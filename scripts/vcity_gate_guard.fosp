                       

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}

const uint16[]Pids_AllWeapon={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332),(11),(400),(13),(12),(389),(395),(350),(355),(387),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486),(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116),(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSmallGuns={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponPistols={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394)};
const uint16[]Pids_WeaponRifles={(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392)};
const uint16[]Pids_WeaponShotguns={(94),(385),(242),(268),(354)};
const uint16[]Pids_WeaponPistolMachineGun={(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponBigGuns={(11),(400),(13),(12),(389),(395),(350),(355),(387)};
const uint16[]Pids_WeaponEnergo={(16),(402),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397)};
const uint16[]Pids_WeaponLaser={(16),(402),(118),(401),(28),(120)};
const uint16[]Pids_WeaponPlasma={(24),(406),(15),(233)};
const uint16[]Pids_WeaponPulse={(396),(397)};
const uint16[]Pids_WeaponThrowing={(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponGrenade={(159),(25),(26),(27)};
const uint16[]Pids_WeaponThrowingOther={(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponMelee={(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116)};
const uint16[]Pids_WeaponCutting={(4),(236),(517),(383),(319),(522)};
const uint16[]Pids_WeaponPricking={(7),(280),(320)};
const uint16[]Pids_WeaponShock={(5),(20),(384),(6),(386),(115)};
const uint16[]Pids_WeaponElectric={(160),(399),(116)};
const uint16[]Pids_WeaponUnarmed={(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSpecial={(270),(393),(371),(372),(427),(489),(498),(290),(291),(518),(520),(530),(531),(421),(390)};

const uint16[]Pids_AllArmor={(74),(1),(379),(265),(2),(380),(240),(17),(381),(239),(3),(232),(348),(349),(113),(524)};
const uint16[]Pids_ArmorLight={(74),(1),(379),(265)};
const uint16[]Pids_ArmorMedium={(2),(380),(240),(17),(381),(239)};
const uint16[]Pids_ArmorHeavy={(3),(232),(348),(349)};
const uint16[]Pids_ArmorRobes={(113)};
const uint16[]Pids_ArmorSpecial={(524)};

const uint16[]Pids_AllAmmo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358),(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_Ammo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358)};
const uint16[]Pids_AmmoOther={(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_AmmoSpecial={(274)};

const uint16[]Pids_AllDrugs={(40),(48),(49),(109),(144),(260),(273),(525),(106),(124),(125),(310),(311),(469),(53),(87),(110),(259),(71),(81),(103),(378),(424)};
const uint16[]Pids_DrugsPreparations={(40),(48),(49),(109),(144),(260),(273),(525)};
const uint16[]Pids_DrugsAlcohol={(106),(124),(125),(310),(311),(469)};
const uint16[]Pids_Drugs={(53),(87),(110),(259)};
const uint16[]Pids_DrugsOther={(71),(81),(103),(378)};
const uint16[]Pids_DrugsSpecial={(334),(473),(480),(481),(482),(424)};

const uint16[]Pids_MiscExplosions={(51),(85),(544)};
const uint16[]Pids_MiscActiveExplosions={(206),(209),(545),(222)};
const uint16[]Pids_MiscPartsBasic={(98),(92),(127),(271),(272),(276),(277),(278),(284),(285),(286),(318),(416),(542),(532),(534),(475),(535),(536),(537),(538),(50),(449),(539),(541)};
const uint16[]Pids_MiscPartsSelfSpecial={(89),(222),(229),(307),(419),(454),(364),(422),(479),(488)};
const uint16[]Pids_MiscPartsSpecial={(55),(253),(254),(258),(269),(356),(377)};
const uint16[]Pids_MiscPartsBody={(114),(251),(281),(282),(321),(322),(323),(324),(429),(484),(485),(507)};
const uint16[]Pids_MiscAllTools={(75),(77),(84),(308),(410),(411),(412),(47),(91),(408),(409),(428),(440),(289),(297),(543)};
const uint16[]Pids_MiscToolsTech={(75),(77),(84),(308),(410),(411),(412)};
const uint16[]Pids_MiscToolsMediacal={(47),(91),(408),(409),(428),(440)};
const uint16[]Pids_MiscToolsOther={(289),(297),(543)};
const uint16[]Pids_MiscToolsSpecial={(52),(54),(59)};
const uint16[]Pids_MiscOther={(101),(117),(126),(226),(227),(262),(295),(314),(315),(316),(317),(325),(326),(436),(437)}; 

import bool AddAttackPlane(Critter&npc,uint priory,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priory,Critter&target,int minHp)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priory,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";                                                        

class TPlayerCard{
	
	uint Id;
	int8 AlertCount;
	int8 AlertType;
	int8 Time;
}; 

class TGuardCard{
	
	uint Id;
	uint Targer;
	uint Job;
	int8 Time;
}; 

class CGuardsManager
{
	
	TGuardCard[]Guards;
	TPlayerCard[]Players;  
	
	uint[]Observing;
	int8[]AlertCount;
	int8[]AlertType;
	int8[]TimeOut;    
	
	int TimerFlag; 
	
	int Dialog;  
	
	int PerceptionAdd; 
	
	int MaxAlert;  
	
	int AtackMinusHp;  
	
	int AtackTimeout; 
	
	int[]AlertPriority; 
	
	CGuardsManager()
	{
		Dialog=0;
		MaxAlert=(10);
		PerceptionAdd=(7);
		AtackMinusHp=(10);
		
		AlertPriority.resize((30));
		TimerFlag=0;
		AtackTimeout=0;
	} 
	
	int AddObserving(Critter@player)
	{
		int i=FindInArray(Observing,player.Id);
		if(i==-1)
		{
			int8 zero=0;
			Observing.insertLast(player.Id);
			AlertCount.insertLast(zero);
			AlertType.insertLast(zero);
			TimeOut.insertLast(zero);
			return Observing.length()-1;
		}
		else
		return i;
	} 
	
	void DelObserving(uint index)
	{
		Observing.removeAt(index);
		AlertCount.removeAt(index);
		AlertType.removeAt(index);
		TimeOut.removeAt(index);
	} 
	
	void DelObserving(Critter@player)
	{
		int i=FindInArray(Observing,player.Id);
		if(i!=-1)
		DelObserving(i);
	}  
	
	void GuardWarn(Critter@npc,Critter@bastard,int alertLevel)
	{
		if(alertLevel==0)
		return;
		
		string tmp=MaxAlert;
		
		if(alertLevel>MaxAlert)
		{
			npc.SayMsg((4),(1),(1000000000+(Dialog)*100000+(3)));
			int minhp=bastard.Stat[(72)]-AtackMinusHp;
			if(minhp<0)
			minhp=0;
			AddAttackPlane(npc,0,bastard,minhp);
		}
		else if(alertLevel>MaxAlert/2)
		{
			npc.SayMsg((2),(1),(1000000000+(Dialog)*100000+(2)));
			if(npc.IsNoPlanes())
			AddWalkPlane(npc,0,bastard.HexX,bastard.HexY,
			GetDirection(npc.HexX,npc.HexY,bastard.HexX,bastard.HexY),false,3);
		}
		else
		{
			
			npc.SayMsg((2),(1),(1000000000+(Dialog)*100000+(1)));
		}
	} 
	
	void GuardObserving(Critter@npc,bool modifyAlertCount)
	{
		uint myMap=npc.GetMapId();
		for(uint i=0;i<Observing.length();i++)
		{
			
			Critter@player=GetCritter(Observing[i]);
			if((@player!=null))
			{
				if((myMap!=player.GetMapId())||(player.Stat[(72)]<=0))
				{
					
					DelObserving(player);
					continue;
				}
				if(GetCrittersDistantion(npc,player)<uint(npc.Stat[(1)]+PerceptionAdd))
				if(GuardItemTest(player.GetItem(0,(1))))
				{
					
					if(modifyAlertCount&&(AlertCount[i]<MaxAlert*2))
					AlertCount[i]++;
					GuardWarn(npc,player,AlertCount[i]);
				}
				else
				{
					if(AlertCount[i]<=-MaxAlert)
					DelObserving(player);  
					
				} 
				
			}
			else
			{
				DelObserving(i);
				continue;
			}
		}
	} 
	
	bool GuardItemTest(Item@item)
	{
		if((@item!=null))
		if(item.GetType()==(3))
		{
			if(item.GetProtoId()==(383))
			return false;
			return true;
		}
		
		return false;
	}     
	
	void EventOnAddCritter(Critter&guard,Critter&player)
	{
		if(guard.Stat[(72)]<=0)
		return;
		if((not player.IsPlayer())||(player.Stat[(72)]<=0))
		return;
		
		if(GuardItemTest(player.GetItem(0,(1))))
		{
			int i=AddObserving(player);
			AlertType[i]=(25);
			
			if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
			GuardWarn(guard,player,i);
		}
	} 
	
	void EventOnRemoveCritter(Critter&guard,Critter&player)
	{
		if(guard.Stat[(72)]<=0)
		return;
		if(not player.IsPlayer())
		return;
		
		int idx=-1;
		if(FindInArray(Observing,player.Id,idx))
		if(AlertCount[idx]<=0)
		DelObserving(idx);
		
	} 
	
	void EventEndPlane(Critter&guard)
	{
		
		if(not guard.IsLife())
		return;
		if(guard.GetPlanes(null)>1)
		return;
		
		GuardObserving(guard,false);
	}  
	
	void EventOnMoveItem(Critter&guard,Critter&player,Item&item,uint8 fromSlot)
	{
		if(guard.Stat[(72)]<=0)
		return;
		if((not player.IsPlayer())||(player.Stat[(72)]<=0))
		return;
		
		Item@whatInHand=player.GetItem(0,(1));
		if(GuardItemTest(whatInHand))
		
		{
			
			if(GetCrittersDistantion(guard,player)<(__LookMinimum*2))
			if(whatInHand.GetProtoId()==(161)||whatInHand.GetProtoId()==(300))
			{
				
				guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(7)));
				return;
			}
			
			int index=AddObserving(player);
			AlertType[index]=(25);
			if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
			{
				AlertCount[index]++;
				GuardWarn(guard,player,AlertCount[index]);
			}
		}
		else
		{
			if(item.GetType()==(3)&&fromSlot==(1))
			if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
			
			{
				int i=FindInArray(Observing,player.Id);
				if(i!=-1)
				if((AlertCount[i]>MaxAlert)&&(AlertType[i]==(25)))
				{
					
					AlertCount[i]--;
					guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(4)));
				}
			}
		}
	} 
	
	void EventOnMessage(Critter&guard,Critter&player,int num,int val)
	{
		if(num==(13))
		{
			int index=AddObserving(player);
			AlertCount[index]=AlertCount[index]+MaxAlert;
			AlertType[index]=(23);
			
			AddAttackPlane(guard,0,player,__DeadHitPoints);
		}
	}   
	
	void EventOnUseItem(Critter&guard,Critter&player,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
	{
		if((not player.IsPlayer())||(player.Stat[(72)]<=0))
		return;
		if(guard.Stat[(72)]<=0)
		return;   
		
		if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
		{
			uint16 itemType=item.GetType();
			switch(itemType)
			{
				case((2)):
				if(Present(item.GetProtoId(),Pids_DrugsAlcohol))
				{
					guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(5)));
					
					int index=AddObserving(player);
					AlertCount[index]++;
					AlertType[index]=(21);
					if(AlertCount[index]>MaxAlert)
					GuardWarn(guard,player,AlertCount[index]);
				}
				if(Present(item.GetProtoId(),Pids_Drugs))
				{
					guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(6)));
					
					int index=AddObserving(player);
					AlertCount[index]=AlertCount[index]+MaxAlert;
					AlertType[index]=(22);
					if(AlertCount[index]>MaxAlert)
					GuardWarn(guard,player,AlertCount[index]);
				}
				break;
			}
			if(Present(item.GetProtoId(),Pids_MiscExplosions)||item.GetProtoId()==(222))
			{
				player.SendMessage((13),player.Id,(2));
			}
		}
	} 
	
	void EventOnDropItem(Critter&guard,Critter&player,Item&item)
	{
		if(!player.IsPlayer()||!player.IsLife())
		return;
		if(Present(item.GetProtoId(),Pids_MiscActiveExplosions))
		{
			player.SendMessage((13),player.Id,(2));
		}
	}  
	
	void EventOnSmthAttack(Critter&guard,Critter&player,Critter&target)
	{
		if(not player.IsPlayer())
		return;
		if(guard.Stat[(72)]<=0)
		return;
		Item@weapon=player.GetItem(0,(1));
		if(not(@weapon!=null))
		return;
		
		bool isDead=
		(target.Stat[(72)]<__DeadHitPoints)and
		((target.Stat[(67)]==(0))||(target.Stat[(67)]==(1))||(target.Stat[(67)]==(2)));  
		
		if(GetCrittersDistantion(guard,player)<
		(uint(guard.Stat[(1)]+PerceptionAdd)*4))
		if(
		(weapon.GetProtoId()!=(161))
		and(
		Present(weapon.GetProtoId(),Pids_WeaponSmallGuns)or
		Present(weapon.GetProtoId(),Pids_WeaponBigGuns)or
		Present(weapon.GetProtoId(),Pids_WeaponEnergo))
		)
		{
			int index=AddObserving(player);
			AlertType[index]=(26);
			if((AlertCount[index]==0)&&(not isDead))
			{
				guard.SetDir(GetDirection(guard.HexX,guard.HexY,player.HexX,player.HexY));
				guard.SayMsg((4),(1),(1000000000+(Dialog)*100000+(8)));
				AlertCount[index]++;
			}
			else
			{
				AlertCount[index]=AlertCount[index]+MaxAlert+1;
				if(isDead)
				AddAttackPlane(guard,0,player);
				else
				GuardWarn(guard,player,AlertCount[index]);
			}
		}
	} 
	
	void EventStealing(Critter&guard,Critter&fromCrit,Critter&thief,bool success,Item&item,uint count)
	{   
		
		AddAttackPlane(guard,0,thief,thief.Stat[(7)]/2);    
		
	} 
	
	uint EventObserving(Critter@guard)
	{
		if(Observing.length()==0)
		return(((Random(1,6))*__TimeMultiplier))*2;
		
		if(not(@guard!=null))
		{
			Log("Not valid npc from TimeEventGetCritter");
			return 0;
		}
		if(guard.Stat[(72)]<=0)
		return(((Random(1,6))*__TimeMultiplier))*2;
		
		GuardObserving(guard,true);
		
		return(((Random(1,6))*__TimeMultiplier));
	}  
	
	void EventTimerObserving()
	{}  
	
	void EventTimerAlertLevelDown()
	{
		
	} 
	
	void EventDropItem(Critter&guard,Critter&fromCrit,Item&item)
	{
		
	}  
	
}   

class CGuardSearching
{}  

uint[]player_ok;
uint[]player_warned; 

import bool GuardItemTest(Item@item)from"vcity_guard";
import uint8 GetRank(Critter&cr)from"vc_guardsman";

void _GateGuardInit(Critter&guard,bool firstTime)
{
	guard.SetEvent((18),"Guard_OnMessage");
	guard.SetEvent((4),"Guard_on_add_critter");
	guard.SetEvent((8),"Guard_on_remove_critter");
	guard.SetEvent((14),"Guard_on_pick_item");
}

void Guard_on_add_critter(Critter&npc,Critter&player)
{
	if(not player.IsPlayer())
	return;
	
	int i=FindInArray(player_ok,player.Id);
	if(i>0)
	player_ok.removeAt(i);
	i=FindInArray(player_warned,player.Id);
	if(i>0)
	player_warned.removeAt(i);
} 

void Guard_on_remove_critter(Critter&npc,Critter&player)
{
	if(not player.IsPlayer())
	return;
	int i=FindInArray(player_ok,player.Id);
	if(i>0)
	player_ok.removeAt(i);
	i=FindInArray(player_warned,player.Id);
	if(i>0)
	player_warned.removeAt(i);
} 

bool ItemTest(uint16 protoId)
{
	if(
	Present(protoId,Pids_Drugs)||
	Present(protoId,Pids_DrugsAlcohol)||
	Present(protoId,Pids_MiscExplosions)||
	Present(protoId,Pids_MiscActiveExplosions)
	)
	return false;
	else
	return true;
}        

int Searching(Critter&npc,Critter&player)
{
	int result=5;
	int pid=0;
	Item@[]items;
	int count=player.GetItems(-1,items);
	for(int i=0;i<count;i++)
	{
		pid=items[i].GetProtoId();
		if(not ItemTest(pid))
		return 1;
		if(pid==(255))
		result=0;
		if(pid==(256))
		result=0;
	}
	return result;
} 

void Guard_OnMessage(Critter&guard,Critter&player,int num,int val)
{
	
	if(not player.IsPlayer())
	return;
	if(not guard.IsNoPlanes())
	return;
	if(guard.Cond!=(1))
	return;
	if(player.Stat[(72)]<0)
	return;
	if(GetRank(player)>0)
	return;
	
	if(num==(1))
	{
		
		if(Present(player.Id,player_warned))
		return;
		player_warned.insertLast(player.Id);
		Item@itm=player.GetItem(0,(3));
		if((@itm!=null))
		if(Present(itm.GetProtoId(),Pids_ArmorHeavy))
		{
			guard.SayMsg((2),(1),(1000000000+((422))*100000+(5)));
			return;
		}
		guard.SayMsg((2),(1),(1000000000+((422))*100000+(1)));
		return;
	}
	
	if(num==(2))
	if(GetCrittersDistantion(guard,player)==1)
	{
		if(Present(player.Id,player_ok))
		return;
		guard.SetDir(GetDirection(guard.HexX,guard.HexY,player.HexX,player.HexY));
		if(GuardItemTest(player.GetItem(0,(1))))
		{
			
			guard.SayMsg((2),(1),(1000000000+((422))*100000+(6)));
			return;
		}
		Item@itm=player.GetItem(0,(3));
		if((@itm!=null))
		if(Present(itm.GetProtoId(),Pids_ArmorHeavy))
		{
			
			guard.SayMsg((2),(1),(1000000000+((422))*100000+(5)));
			return;
		}
		guard.Animate(0,(28),null,true,true);
		int searchResult=0;
		if((searchResult=Searching(guard,player))==0)
		{ 
			
			guard.SayMsg((2),(1),(1000000000+((422))*100000+(2)));
			player_ok.insertLast(player.Id);
		}
		else
		{
			if(searchResult==5)
			guard.SayMsg((2),(1),(1000000000+((422))*100000+(7)));
			else
			{ 
				
				guard.SayMsg((2),(1),(1000000000+((422))*100000+(3)));
				player_ok.removeAt(uint(FindInArray(player_ok,player.Id)));
			}
		}
		return;
	}
	else
	{
		return;
	}
	
	if(num==(3))
	if(not Present(player.Id,player_ok))
	{ 
		
		guard.SayMsg((4),(1),(1000000000+((422))*100000+(4)));  
		
		player.SendMessage((13),0,(0)); 
		
	}
	else
	{ 
		
	}
	
	if(num==(4))
	{
		
		if(Searching(guard,player)!=0)
		{
			uint idx=uint(FindInArray(player_ok,player.Id));
			if(idx>=0)
			player_ok.removeAt(idx);
			idx=uint(FindInArray(player_ok,player.Id));
			if(idx>=0)
			player_warned.removeAt(idx);
			guard.SayMsg((2),(1),(1000000000+((422))*100000+(1)));
		}
	}
	
} 

void t_incoming(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(not entered)
	return; 
	
	if(not player.IsPlayer())
	return; 
	
	if(dir==1||dir==2||dir==3)
	{   
		
		return;
	} 
	
	player.SendMessage((1),0,(0));
}  

void t_income(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(not entered)
	return;
	
	if(not player.IsPlayer())
	return; 
	
	player.SendMessage((2),0,(0));
} 

void t_pre_enter(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(not entered)
	return; 
	
	if(not player.IsPlayer())
	return;
	
	if(dir==1||dir==2||dir==3)
	return; 
	
	player.SendMessage((4),0,(0));
} 

void t_enter(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(not entered)
	return; 
	
	if(not player.IsPlayer())
	return;
	
	if(dir==1||dir==2||dir==3)
	{   
		
		return;
	} 
	
	player.SendMessage((3),0,(0));
}

void Guard_on_pick_item(Critter&guard,Item&hideItem,bool removed,Critter@picker)
{
	if(not(@picker!=null))
	return;
	if(removed)
	return;
	if(not picker.IsPlayer())
	return;
	if(not guard.IsNoPlanes())
	return;
	if(guard.Cond!=(1))
	return; 
	
	if(not ItemTest(hideItem.GetProtoId()))
	{
		int i=0;
		if(FindInArray(player_ok,picker.Id,i))
		{
			player_ok.removeAt(i);
			guard.SayMsg((2),(1),(1000000000+((422))*100000+(1)));
		}
	}
}

uint r_searching(Critter&player,Critter@guard,int val)
{
	if(Searching(guard,player)==0)
	{
		
		if(not Present(player.Id,player_ok))
		player_ok.insertLast(player.Id);
		return 9;
	}
	
	return 10;
} 

