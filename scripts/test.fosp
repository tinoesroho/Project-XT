

void test(Critter&cr,int p0,int p1,int p2)
{
	Map@map=cr.GetMap();
	if(not(@map!=null))
	return;
	Item@car=map.AddItem(p0,p1,(800),1);
	
	(car.Flags=(car.Flags)|((0x00010000)));
	car.Update();
}

void test1(Critter&cr,int p0,int p1,int p2)
{
	cr.Say((1),"русские буквы АБВгДееейёёёё!");
}

class Example
{
	int a;
	int8 b;
	uint16 c;
	uint64[]arr;
	string str;
}       

shared class Serializator
{
	uint8[]Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
	
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer(uint size)
	{
		if(size<=BufSize)
		return;
		if(BufSize==0)
		BufSize=1;
		while(size>BufSize)
		BufSize*=2;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		
		bool result=SetAnyData(name,Array,DataSize);    
		
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		
		if(not GetAnyData(name,Array))
		return false;    
		
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator&SetCurPos(uint pos)
	{
		GrowBuffer(pos);
		CurPos=pos;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Fill(uint8 value,uint length)
	{
		GrowBuffer(CurPos+length);
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string&value)
	{
		uint len=value.rawLength();
		GrowBuffer(CurPos+len+1);
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Set(const Critter&cr)
	{
		GrowBuffer(CurPos+4);
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const Item&item)
	{
		GrowBuffer(CurPos+4);
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator&Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator&Get(int64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(bool[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(string[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	} 
	
	Serializator&Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator&Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
};  

void test2(Critter&cr,int p0,int p1,int p2)
{
	Example e;
	e.a=-100;
	e.b=123;
	e.c=60000;
	e.str="Example!";
	e.arr.resize(5000);
	
	for(uint i=0;i<10;i++)
	{
		Serializator save;
		save.Set(e.arr).Set(e.a).Set(e.b).Set(e.c).Set(e.str).Save("Example_"+i);
	}
	
	cr.Say((11),"0<"+e.str+","+e.a+","+e.b+","+e.c+">");
}

void test3(Critter&cr,int p0,int p1,int p2)
{
	Example e;
	for(uint i=0;i<10;i++)
	{
		Serializator load;
		if(load.Load("Example_"+i))
		load.Get(e.arr).Get(e.a).Get(e.b).Get(e.c).Get(e.str);
	} 
	
	cr.Say((11),"1<"+e.str+","+e.a+","+e.b+","+e.c+">");
}

void zero(Critter&cr,int p0,int p1,int p2)
{ 
	
	float t=1.0f/0.9f;
	cr.Say((11),"!!!!!!!!!!!!!!");
}

void test4(Critter&cr,int p0,int p1,int p2)
{
	uint16 year=0;
	uint16 month=0;
	uint16 day_of_week=0;
	uint16 day=0;
	uint16 hour=0;
	uint16 minute=0;
	uint16 second=0;
	GetGameTime(__FullSecond,year,month,day,day_of_week,hour,minute,second);
	uint fm=GetFullSecond(year,month,day,hour,minute,second);
	
	Log("Real: "+"FullSecond "+__FullSecond+" Year "+__Year+" Month "+__Month+" Day "+__Day+" Hour "+__Hour+" Minute "+__Minute+" Second "+__Second);
	Log("Calc: "+"FullSecond "+fm+" Year "+year+" Month "+month+" Day "+day+" Hour "+hour+" Minute "+minute+" Second "+second+" DayOfWeek "+day_of_week);
}                                                                  

void answer_Generic(Critter&player,uint answerI,string&answerS)
{
	player.Say((11),"Answer integer<"+answerI+">, string<"+answerS+">.");
}

void elevator(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((6),(((uint((p0)&0xFFFF)<<16)|(0)&0xFFFF)),"answer_Generic");
}

void dlgbox(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((2),5,"answer_Generic");
	cr.Say((18),"Choose you button dude.");
	cr.Say((19+(0)),"Button0");
	cr.Say((19+(1)),"Button1");
	cr.Say((19+(2)),"Button2");
	cr.Say((19+(3)),"Button3");
	cr.Say((19+(4)),"Button4");
}

void skillbox(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((3),0,"answer_Generic");
}

void say(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((5),p0,"answer_Generic");
	cr.Say((39),"Choose you...");
	cr.Say((40),"sometext");
}

void timer(Critter&cr,int p0,int p1,int p2)
{
	ProtoItem@proto=GetProtoItem((41));
	cr.ShowScreen((1),proto.PicInv,"answer_Generic");
}

void bag(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((4),0,"answer_Generic");
}

void inventory(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((7),0,"");
}

void cha(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((8),0,"");
}

void fixboy(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((9),0,"");
}

void pipboy(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((10),0,"");
}

void minimap(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((11),0,"");
}

void close(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((0),0,"");
}                               

void DLog(string&str)
{
	Log(str);
}

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}           

class SomeClassA
{
	int A;
	
	~SomeClassA()
	{
		Log("destruct");
	}
}

class SomeClassB
{
	SomeClassA@nullptr;
	SomeClassB(SomeClassA@aPtr)
	{
		this.nullptr.A=100;
	}
}

void test10(Critter&crit,int p0,int p1,int p2)
{
	SomeClassA a;
	SomeClassB(a);
}                            

void _Begin(Critter&crit,NpcPlane&plane,int reason)
{
	Log("Begin, reason: "+reason+".");
}

void _End(Critter&crit,NpcPlane&plane,int reason)
{
	Log("End, reason: "+reason+".");
}                                                                                                                   

bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(0);
	plane.Priority=(priority==0?(10):priority);
	plane.Misc_WaitSecond=waitSecond;
	if((@funcName!=null)&&not plane.Misc_SetScript(funcName))
	{
		Log("Set script <"+funcName+"> fail");
		return false;
	}
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint entire,uint cut,bool run)
{
	uint16 hX=0,hY=0;
	Map@map=npc.GetMap();
	if((@map!=null)&&map.GetEntireCoords(entire,0,hX,hY))
	{
		return AddWalkPlane(npc,0,hX,hY,6,run,cut);
	}
	return false;
}

bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(not npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(not npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Identifier=identifier;
	plane.IdentifierExt=identifierExt;
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexY=target.HexY;
	plane.Attack_LastHexX=target.HexX;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,bool run)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=__DeadHitPoints;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp,bool run)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp,bool run)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=hexX;
	plane.Pick_HexY=hexY;
	plane.Pick_Pid=protoId;
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=item.HexX;
	plane.Pick_HexY=item.HexY;
	plane.Pick_Pid=item.GetProtoId();
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

uint EraseAttackPlane(Critter&npc,Critter&target)
{
	return EraseAttackPlane(npc,target.Id);
}

uint EraseAttackPlane(Critter&npc,uint critId)
{
	NpcPlane@[]planes;
	uint count=npc.GetPlanes(planes);
	if(count==0)
	return 0;
	
	uint erased=0;
	for(uint i=0;i<count;i++)
	{
		if(planes[i].Attack_TargId==critId&&npc.ErasePlane(i-erased))
		erased++;
	}
	
	return erased;
}

void test12(Critter&cr,int p0,int p1,int p2)
{
	Critter@npc=GetCritter(uint(p0)+5000000);
	if(not(@npc!=null))
	return;
	
	AddWalkPlane(npc,2,cr.HexX,cr.HexY,cr.Dir,false,2);
	AddMiscPlane(npc,1,__FullSecond+3*60,null);
}

void plane_Misc(Critter&npc)
{
	npc.Say((1),"Ho-ho-ho.");
} 

void test13(Critter&cr,int p0,int p1,int p2)
{
	Map@map=cr.GetMap();
	Log("begin");
	if(map.Reload())
	Log("ok");
}

void test14(Critter&cr,int p0,int p1,int p2)
{
	Map@location=cr.GetMap();
	Log("begin loc");
	if(location.Reload())
	Log("ok");
}

void test15(Critter&cr,int p0,int p1,int p2)
{
	cr.RunClientScript("__Test",p0,p1,p2,null,null);
}

void test16(Critter&cr,int p0,int p1,int p2)
{
	uint[]ui(3);
	ui[0]=p0;
	ui[1]=p1;
	ui[2]=p2;
	CreateTimeEvent(__FullSecond+5*60,"e_Test",ui,true);
}

uint e_Test(uint[]@values)
{
	Log("Values ("+values.length()+"): "+values[0]+", "+values[1]+", "+values[2]+".");
	return((5)*__TimeMultiplier);
}

void test17(Critter&cr,int p0,int p1,int p2)
{
	Log("Show callback.");
}

void testGroup(Critter&cr,int p0,int p1,int p2)
{
	Critter@npc=GetCritter(uint(p0)+5000000);
	if(not(@npc!=null))
	return;
	Critter@npc2=GetCritter(uint(p1)+5000000);
	if(not(@npc2!=null))
	return;
	
	Critter@[]group(2);
	@group[0]=npc;
	@group[1]=npc2;
	
	cr.TransitToGlobal(group);
}

void testLex(Critter&cr,int p0,int p1,int p2)
{
	Item@[]items;
	cr.GetItems(-1,items);
	for(uint i=0;i<items.length();i++)
	items[i].SetLexems("$Number"+Random(100,200));
	
	Critter@npc=GetCritter(uint(p0)+5000000);
	if(not(@npc!=null))
	return;
	
	npc.SetLexems("$name"+"Dude");
	Log("Done");
}

void testFly(Critter&cr,int p0,int p1,int p2)
{
	Log("x "+cr.HexX+" y "+cr.HexY);
	cr.GetMap().RunFlyEffect(p0,null,null,cr.HexX,cr.HexY,p1,p2);
}

void testDelItem(Critter&cr,int p0,int p1,int p2)
{
	Critter@cl=GetCritter(uint(p0));
	if(not(@cl!=null))
	return;
	DeleteItem(cl.GetItem(0,p1));
}

void testSwap(Critter&cr,int p0,int p1,int p2)
{
	Critter@cr1=GetCritter(uint(p0));
	Critter@cr2=GetCritter(uint(p1));
	SwapCritters(cr1,cr2,true,true);
}        

void test_find(Critter&cr,int p0,int p1,int param2)
{
	Map@map=cr.GetMap();
	int f=0;
	switch(p0)
	{
		case 0:
		f=(0x01);
		break;
		case 1:
		f=(0x02);
		break;
		case 2:
		f=(0x04);
		break;
		case 3:
		f=(0x03);
		break;
		case 4:
		f=(0x05);
		break;
		case 5:
		f=(0x06);
		break;
		case 6:
		f=(0x0F);
		break;
	}
	uint count=map.GetNpcCount(param2,f);
	for(uint i=0;i<count;i++)
	{
		Critter@cow=map.GetNpc(param2,f,i);
		map.SetText(cow.HexX,cow.HexY,(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF))),""+count);
	}
	cr.Say((2),""+f);
} 

import void AffectRadiation(Critter&cr,int value)from"radiation";
import void AffectPoison(Critter&cr,int value)from"poison";

void testPlague(Critter&cr,int isRad,int value,int p2)
{
	if(isRad!=0)
	AffectRadiation(cr,value);
	else
	AffectPoison(cr,value);
	cr.Say((11),"rad "+cr.Stat[(74)]);
	cr.Say((11),"psn "+cr.Stat[(73)]);
}

void LocInfo(Critter&cr,int isRad,int value,int p2)
{
	Location@loc=cr.GetMap().GetLocation();
	cr.Say((11),"MapPid "+cr.GetMap().GetProtoId());
	cr.Say((11),"LocPid "+loc.GetProtoId());
	cr.Say((11),"Visible "+(loc.Visible?"true":"false"));
	cr.Say((11),"GeckVisible "+(loc.GeckVisible?"true":"false"));
	cr.Say((11),"AutoGarbage "+(loc.AutoGarbage?"true":"false"));
	cr.Say((11),"GeckCount "+loc.GeckCount);
	cr.Say((11),"Radius "+loc.Radius);
}

void GetCrIds(Critter&cr,int onlyNpc,int,int)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		Critter@[]critters;
		for(uint i=0,j=map.GetCritters(0,(0x0F)|(onlyNpc==1?(0x20):0),critters);i<j;i++)
		cr.Say((11),critters[i].Name+" "+critters[i].Id);
	}
}

void CrAddItem(Critter&cr,int crId,int pid,int count)
{
	Critter@toCr=GetCritter(crId);
	if((@toCr!=null))
	toCr.AddItem(pid,count);
}

void AddExp(Critter&cr,int crId,int val,int)
{
	Critter@toCr=GetCritter(crId);
	if((@toCr!=null))
	toCr.StatBase[(76)]+=val;
}

void SetStat(Critter&cr,int crId,int num,int val)
{
	Critter@toCr=GetCritter(crId);
	if((@toCr!=null))
	toCr.StatBase[num]=val;
}

void SetSkill(Critter&cr,int crId,int num,int val)
{
	Critter@toCr=GetCritter(crId);
	if((@toCr!=null))
	toCr.SkillBase[num]=val;
}

void SetPerk(Critter&cr,int crId,int num,int val)
{
	Critter@toCr=GetCritter(crId);
	if((@toCr!=null))
	toCr.PerkBase[num]=val;
}          

void TestLoc(Critter&cr,int locPid,int count,int)
{
	for(int i=0;i<count;i++)
	{
		Location@loc=GetLocation(CreateLocation(locPid,100,100,null));
		Map@map=loc.GetMapByIndex(0);
		Critter@[]critters;
		uint crCount=map.GetCritters(0,(0x0F),critters);
		for(uint j=0;j<crCount;j++)
		{
			for(uint k=0;k<crCount;k++)
			{
				if(j!=k)
				AddAttackPlane(critters[j],0,critters[k]);
			}
		}
	}
}

void TestWorld(Critter&cr,int,int,int)
{  
	
	for(uint i=0;i<1000;i++)
	CreateLocation(101,100,100,null);
	
	for(uint i=0;i<242000;i++)
	GetLocalVar(3040,i);
	for(uint i=0;i<87000;i++)
	GetUnicumVar(2020,i,i);         
	
}

void CrClearInv(Critter&cr,int crId,int,int)
{
	Critter@toCr=GetCritter(crId);
	if((@toCr!=null))
	{
		Item@[]items;
		toCr.GetItems(-1,items);
		for(uint i=0,j=items.length();i<j;i++)
		DeleteItem(items[i]);
	}
}

void SetType(Critter&cr,int crId,int crType,int)
{
	Critter@toCr=GetCritter(crId);
	if((@toCr!=null))
	{
		toCr.ChangeCrType(crType);
		toCr.StatBase[(112)]=crType;
	}
}

void ChangeLook(Critter&cr,int,int,int)
{}

import void ExplodeEx(Map&map,uint16 hexX,uint16 hexY,uint16 effectPid,uint effectRadius,uint damage,uint damageType,uint damageRadius,uint ownerId)from"explode";
void Boom(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x03),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].Id!=cr.Id)
		ExplodeEx(cr.GetMap(),critters[i].HexX,critters[i].HexY,(4011),3,666,(7),3,0);
	}
}

void Patch0(Critter&cr,int,int,int)
{
	Log("Begin patch...");
	Critter@[]npcs;
	GetAllNpc(0,npcs);
	for(uint i=0,j=npcs.length();i<j;i++)
	{
		Critter@npc=npcs[i];
		Map@map=npc.GetMap();
		if((@map!=null))
		{
			uint16 locPid=map.GetLocation().GetProtoId();
			
		}
	}
	
	Location@locHell=GetLocationByPid((44),0);
	locHell.Reload();
	Log("End patch.");
}

void RandomTypes(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x10)|(0x03),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].Id!=cr.Id)
		{
			int type=Random(20,90);
			critters[i].ChangeCrType(type);
			critters[i].StatBase[(112)]=type;
		}
	}
}

void AllToVaultBoys(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x10)|(0x0F),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].Id!=cr.Id)
		{
			critters[i].ChangeCrType(249);
			critters[i].StatBase[(112)]=249;
		}
	}
}

void AllMapsEveryBoom(Critter&cr,int,int,int)
{
	Map@[]maps;
	::GetAllMaps(0,maps);
	for(uint i=0,j=maps.length();i<j;i++)
	{
		Map@map=maps[i];
		uint16 locPid=map.GetLocation().GetProtoId();
		if((((locPid)>=(1)&&(locPid)<=(19)&&(locPid)!=(11)&&(locPid)!=(12)&&(locPid)!=(8))||(locPid)==(44)))
		CreateTimeEvent(__FullSecond,"e_Boom",map.Id,false);
	}
}

void RandomEveryBoom(Critter&cr,int,int,int)
{
	CreateTimeEvent(__FullSecond,"e_Boom",cr.GetMap().Id,true);
}

uint e_Boom(uint[]@values)
{
	Map@map=GetMap(values[0]);
	if((@map!=null))
	{
		for(int i=0;i<4;i++)
		ExplodeEx(map,Random(10,map.GetWidth()-10),Random(10,map.GetHeight()-10),(4011),3,666,(7),3,0);
	}
	return((Random(1,4))*__TimeMultiplier);
}

void AllToLife(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x04)|(0x10),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		critters[i].ToLife();
	}
}

void NpcToLife(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x04)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		critters[i].ToLife();
	}
}

void AllToDead(Critter&cr,int deadType,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x10),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		critters[i].ToDead(deadType,null);
	}
}

void ShowIds(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	critters[i].Say((2),"My id is "+critters[i].Id);
}

void SetDustyScript(Critter&cr,int dustyId,int,int)
{
	Critter@dusty=GetCritter(dustyId);
	if((@dusty!=null))
	dusty.SetScript("ncr_dusty@_DustyInit");
}

void TestIndex(Critter&cr,int i,int,int)
{
	cr.StatBase[(0)]=20;
	const int ii=cr.Stat[(0)];
	Log("Strenght "+cr.Stat[(0)]);
}

void Transit(Critter&cr,int hx,int hy,int)
{
	cr.TransitToHex(hx,hy,6);
}

void GlobalCar(Critter&iam,int crId,int,int)
{
	Critter@cr=::GetCritter(crId);
	if((@cr!=null))
	{
		Item@[]items;
		cr.GetItemsByType((13),items);
		for(uint i=0;i<items.length();i++)
		{
			Item@car=items[i];
			car.Charge=car.Proto.Car_TankVolume;
			car.Deterioration=0;
			car.Update();
			iam.Say((11),"Done.");
		}
	}
}

void NullPtr(Critter&iam,int crId,int,int)
{
	Critter@cr=GetCritter(666);
	if(iam.SkillBase[555]==11)
	crId=0;
}

void AddHellTurret(Critter&iam,int pid,int,int)
{
	Map@map=iam.GetMap();
	uint16 hx=iam.HexX,hy=iam.HexY;
	map.MoveHexByDir(hx,hy,iam.Dir,1);
	Critter@turret=map.AddNpc(pid!=0?pid:480,hx,hy,iam.Dir,null,null,null);
	turret.SetScript("replication_hell@_TurretInit");
}

uint NpcCrazyId=0;
void NpcCrazyEvent(Critter&cr,int off,int,int)
{
	if(off!=0)
	EraseTimeEvent(NpcCrazyId);
	else
	NpcCrazyId=CreateTimeEvent(__FullSecond,"e_NpcCrazy",cr.GetMap().Id,false);
}

uint e_NpcCrazy(uint[]@values)
{
	Map@map=GetMap(values[0]);
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		Critter@[]players;
		map.GetCritters(0,(0x03)|(0x10),players);
		for(uint l=0,m=players.length();l<m;l++)
		AddAttackPlane(critters[i],0,players[l]);
	}
	return((Random(10,40))*__TimeMultiplier);
}

void AddMadRobot(Critter&iam,int,int,int)
{
	Map@map=iam.GetMap();
	uint16 hx=iam.HexX,hy=iam.HexY;
	map.MoveHexByDir(hx,hy,iam.Dir,1);
	Critter@turret=map.AddNpc(480,hx,hy,iam.Dir,null,null,null);
	turret.StatBase[(106)]=19;
	turret.SetScript("replication_hell@_TurretInit"); 
	
	turret.AddItem(520,2);
}

void AllNpcSetParam(Critter&cr,int index,int value,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	critters[i].ParamBase[index]=value;
}

void AddGuard(Critter&cr,int,int,int)
{
	int[]params={(104),2200,(106),5};
	int[]items={(531),3,(0)};
	Critter@guard=cr.GetMap().AddNpc(369,cr.HexX,cr.HexY-1,2,params,items,"map_barter_ground@_GuardInit");
}

void NpcFullDead(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		critters[i].StatBase[(84)]=-1;
		critters[i].ToDead(1,null);
	}
}

void NpcReturn(Critter&cr,int replTime,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		critters[i].StatBase[(84)]=replTime;
		critters[i].ToLife();
	}
}                                                                                                                                                                                                                               

const uint16[]pids={54,54,54,54,(50),(51),(19),(20),(19),(20),(19),(20),(50),(51),(19),(20),(58),(69),(238),(239)};

void AddHostile(Critter&iam,int,int,int)
{
	Map@map=iam.GetMap();
	uint16 hx=iam.HexX,hy=iam.HexY;
	map.MoveHexByDir(hx,hy,iam.Dir,1);
	Critter@hostile=map.AddNpc(pids[Random(0,pids.length()-1)],hx,hy,iam.Dir,null,null,null);
	hostile.StatBase[(106)]=19;
	
	CreateTimeEvent(__FullSecond,"e_HostileMove",hostile.Id,true);
}

uint SufferingLastTime=0;
uint e_HostileMove(uint[]@values)
{
	Critter@hostile=::GetCritter(values[0]);
	if(not(@hostile!=null))
	return 0;
	
	if(hostile.IsLife())
	{
		hostile.MoveRandom();
		
		if(__FullSecond>SufferingLastTime)
		{
			string say;
			switch(Random(0,50))
			{
				case 0:
				say="Малые страдания выводят нас из себя, великие же - возвращают нас самим себе.";
				break;
				case 1:
				say="Минутное удовольствие часто бывает причиной долгих страданий. ";
				break;
				case 2:
				say="Кто боится страдания, тот уже страдает от боязни.";
				break;
				case 3:
				say="Язвы желудка возникают не от того, что вы едите, а от того, что съедает вас. ";
				break;
				case 4:
				say="Бедное раздавленное насекомое страдает так же, как умирающий гигант. ";
				break;
				case 5:
				say="Молчание - величайшее из человеческих страданий; святые никогда не молчали. ";
				break;
				case 6:
				say="Раны, нанесенные собственной рукой, всегда заживают медленнее, чем те, которые нанес противник. ";
				break;
				case 7:
				say="Не умеешь нести бремя невзгод - усугубляешь их тяжесть. ";
				break;
				case 8:
				say="Есть два способа преодолевать трудности: либо вы изменяете сами трудности, чтобы было легче с ними справится, либо, справляясь с ними изменяетесь сами. ";
				break;
				case 9:
				say="Если мы еще можем любить тех, кто заставил нас страдать, то любовь наша лишь становится сильнее.  ";
				break;
				case 10:
				say="Мужественный человек обыкновенно страдает, не жалуясь, человек же слабый жалуется, не страдая.";
				break;
				case 11:
				say="Величайшее зло - страдание.";
				break;
				case 12:
				say="Всеми страданиями вокруг нас должны страдать и мы. У всех у нас не одно тело, но одно развитие, а это проводит нас через все боли в той или иной форме. Как дитя проходит в своем развитии через все стадии жизни вплоть до старости и до смерти (и каждая стадия, в сущности, от страха или от желания, кажется предыдущей недостижимою), точно так же и мы (связанные с человечеством не менее глубоко, чем с самими собой) проходим в своем развитии через все страдания этого мира. Справедливости при таком положении нет места, но нет места и страху перед страданием или возможности истолковать страдание как заслугу.";
				break;
				case 13:
				say="Издевательство над чужими страданиями не должно быть прощаемо.";
				break;
				case 14:
				say="К величию есть только один путь, и этот путь проходит через страдания.";
				break;
				case 15:
				say="Когда мне не дают роли, чувствую себя пианисткой, которой отрубили руки.";
				break;
				case 16:
				say="Мы стремимся в большей степени к тому, чтобы отвести от себя страдания, нежели к тому, чтобы получить удовольствие.";
				break;
				case 17:
				say="Обусловленное существование есть страдание. У страдания есть причина. У страдания есть конец, и есть пути, ведущие к этому концу.";
				break;
				case 18:
				say="Только здесь страдать – это страдать. Не в том смысле, что те, кто страдает здесь, где-то в другом месте из-за этого страдания будут возвышенны, а в том смысле, что то, что именуется в этом мире страданием, в другом мире не изменяется, а только освобождено от своей противоположности, блаженства.";
				break;
				case 19:
				say="Ты можешь отстраняться от страданий мира, это тебе разрешается и соответствует твоей природе, но, быть может, как раз это отстранение и есть единственное страдание, которого ты мог бы избежать.";
				break;
				case 20:
				say="Человеческий разум может излечить от иллюзий, но не от страданий.";
				break;
				case 21:
				say="Чем больше любят, тем больше страдают. Вся возможная для каждой души боль пропорциональна степени ее совершенства.";
				break;
				case 22:
				say="Мудрый не горюет о потерянном, об умершем и о прошлом. Тем он отличается от глупца.";
				break;
				case 23:
				say="Размышляй об изгнании, пытках, войнах, болезнях, кораблекрушениях, чтобы не быть новичком ни при каких бедствиях.";
				break;
				case 24:
				say="Подлинное душевное спокойствие достигается примирением с самым худшим.";
				break;
				case 25:
				say="Кто страдает раньше, чем это необходимо, тот страдает больше необходимого.";
				break;
				case 26:
				say="Кто боится страданий, тот уже страдает от боязни.";
				break;
				case 27:
				say="Ничтожным не бывает то, что больно нам.";
				break;
				case 28:
				say="Моря человеческих слез не были бы так огромны, если бы не были бы так мелки.";
				break;
				case 29:
				say="Чувствительный человек – точно безоружный среди хорошо вооруженных.";
				break;
				case 30:
				say="Люди не бывают очень несчастны, если им не в чем раскаиваться.";
				break;
				case 31:
				say="Чужие бедствия могут быть поводом к безропотности, но не к утешению.";
				break;
				case 32:
				say="Огорчение существует не само по себе, а в нашем представлении.";
				break;
				case 33:
				say="Мы созданы для несчастий. Слезы для сердца, что вода для рыб.";
				break;
				case 34:
				say="В этом мире самым надежным развлечением для нас являются тревоги и страдания.";
				break;
				case 35:
				say="Наш мир есть ничто иное, как скопление громадных страданий.";
				break;
				case 36:
				say="Горечь – единственное накопление человека в жизни.";
				break;
				case 37:
				say="Единственный способ быть счастливым – это любить страдания.";
				break;
				case 38:
				say="В жизни, как и в природе, бывает гораздо больше пасмурных дней, чем безоблачных.";
				break;
				case 39:
				say="Не чувствовать страданий не свойственно человеку, а не уметь их переносить не подобает мужчине.";
				break;
				case 40:
				say="Ни с кем не случается ничего такого, что он не в силах был бы вынести.";
				break;
				case 41:
				say="Мужайтесь и храните себя для благоприятных времен.";
				break;
				case 42:
				say="Переноси с достоинством то, что изменить не сможешь.";
				break;
				case 43:
				say="Кто переносит нетерпеливо, тот страдает вдвойне.";
				break;
				case 44:
				say="Слезы для женщины – облегчение, для мужчины – пытка.";
				break;
				case 45:
				say="Хочешь быть счастливым – выучись сперва страдать.";
				break;
				default:
				break;
			}
			if(say!="")
			hostile.Say((1),say);
			SufferingLastTime=__FullSecond+Random(3,6)*60;
		}
		else if(Random(0,100)==0)
		ExplodeEx(hostile.GetMap(),hostile.HexX,hostile.HexY,(4011),10,666,(7),10,0);
	}
	
	return((Random(10,20))*__TimeMultiplier);
}

void AttackTurret(Critter&cr,int,int,int)
{
	Critter@turret;
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].GetProtoId()==480)
		{
			@turret=critters[i];
			break;
		}
		
	}
	
	critters.resize(0);
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].GetProtoId()!=480)
		{
			AddAttackPlane(critters[i],100,turret);
		}
	}
} 

void TurretFrags(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].GetProtoId()==480)
		{
			CreateTimeEvent(__FullSecond,"e_HostileMove",critters[i].Id,true);
			break;
		}
		
	}
}

uint e_TurretFrags(uint[]@values)
{
	Critter@turret=::GetCritter(values[0]);
	uint frags=0;
	turret.Say((2),"Frags "+frags);
	return((3)*__TimeMultiplier);
}

void TurretParam(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	Critter@[]critters;
	map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		critters[i].StatBase[(101)]=1000;
	}
}

void CreateCar(Critter&cr,int pid,int ox,int oy)
{
	Item@car=cr.GetMap().AddItem(cr.HexX+ox,cr.HexY+oy,pid,1);
	if(not(@car!=null)||car.GetType()!=(13))
	return;
	
	car.Charge=car.Proto.Car_TankVolume;
	car.Deterioration=0;
	
	uint keyId=Random(10000,50000);
	car.LockerId=keyId;
	car.LockerComplexity=1000;
	car.GetChild(0).LockerId=keyId;
	car.GetChild(0).LockerComplexity=1000;
	cr.AddItem((97),1).LockerId=keyId;
	
	car.Update();
	cr.Say((11),"Done.");
}

void CreateCarPersonal(Critter&cr,int pid,int crId,int oy)
{
	Item@car=cr.GetMap().AddItem(cr.HexX,cr.HexY+oy,pid,1);
	if(not(@car!=null)||car.GetType()!=(13))
	return;
	
	car.Charge=car.Proto.Car_TankVolume;
	car.Deterioration=0;
	car.Val0|=(0x0002);
	
	uint keyId=(0x40000000|(crId));
	car.LockerId=keyId;
	car.LockerComplexity=1000;
	car.GetChild(0).LockerId=keyId;
	car.GetChild(0).LockerComplexity=1000;
	
	car.Update();
	cr.Say((11),"Done.");
}

void AllTo3d(Critter&cr,int,int,int)
{
	Critter@[]critters;
	cr.GetMap().GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		int rnd=Random(290,316);
		critters[i].ChangeCrType(rnd);
		critters[i].StatBase[(112)]=rnd;
	}
}

void TestLexem(Critter&cr,int,int,int)
{
	Item@item=cr.GetItem(0,(1));
	if((@item!=null))
	{
		item.SetLexems("test test test");
		item.Update();
	}
}

class Prop
{
	void set_Test(uint value){}
	uint get_Test()const{return 0;}
};
void TestProp(Critter&cr,int,int,int)
{
	Prop p;
	uint i=(p.Test-1);
}                 

void TestScriptTimeout(Critter&cr,int,int,int)
{
	Test2();
}
void Test2()
{
	Test3();
}
void Test3()
{
	int ggg=1;
	do
	{
		ggg=Random(1,100);
	}
	while(ggg!=0);
}

void TestNullptr(Critter&,int,int,int)
{
	Critter@cr;
	Log("begin");
	uint id=cr.Id;
	Log("end");
} 

void TestScriptConcurrent(Critter&cr,int test,int,int)
{ 
	
	Synchronize();
	Map@map=cr.GetMap();
	Resynchronize();
	
	if(test==1)
	Resynchronize();
	else if(test==2)
	Synchronize();
	
	if(test==5)
	{
		for(int i=0;i<1000;i++)
		CreateTimeEvent(0,"e_TestScriptConcurrent",false);
	}
}

int Data=0;
uint e_TestScriptConcurrent(uint[]@values)
{ 
	
	if(Data==0)
	Data++;
	else if(Data==1)
	Data--;
	else
	Log("Fail!");
	return 1;
}

void TestLog(Critter&cr,int,int,int)
{
	for(uint i=0;i<10000;i++)
	Log("Test message "+i);
}

void TestMapLoop(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	map.SetEvent((4),"_MapLoopEvent");
	map.SetLoopTime(3,1000);
	Log("ok");
}

void _MapLoopEvent(Map&map)
{
	Log("_MapLoopEvent "+map.Id);
}

void patchBunker(Critter&cr,int,int,int)
{
	Location@loc=GetLocationByPid(21,0);
	if(@loc!=null)
	{
		uint locId=loc.Id;
		DeleteLocation(locId);
		cr.Say(11,"Location deleted. Id"+locId);
	}
	
	uint id=CreateLocation(21,1000,1397,null);
	if(id==0)
	{
		cr.Say(11,"Create location error: "+GetLastError());
		return;
	}
	@loc=GetLocation(id);
	
	if(@loc==null)
	{
		cr.Say(11,"Get location error: "+GetLastError());
		return;
	}
	
	loc.Visible=false;
	loc.GeckVisible=false;
	loc.AutoGarbage=false;
	loc.Radius=6;
}

import void ClearPermanentDeath()from"replication";
void ClearPermanentDeath(Critter&cr,int,int,int)
{
	ClearPermanentDeath();
}

void TestBlockItem(Critter&cr,int,int,int)
{
	Item@item=cr.GetMap().AddItem(cr.HexX,cr.HexY,(100),1);
	item.SetEvent((4),"_ChangeMode");
	(item.Flags=((item.Flags)&(~((0x00000004)))));
}

bool _ChangeMode(Item&item,Critter&cr,int skill)
{
	if((((item.Flags)&((0x00000004)))!=0))
	{
		(item.Flags=((item.Flags)&(~((0x00000004)))));
	}
	else
	{
		(item.Flags=(item.Flags)|((0x00000004)));
	}
	item.Update();
	return false;
}

void DeleteTimeEvent(Critter&cr,int id,int,int)
{
	::EraseTimeEvent(uint(id));
}

void HandToGround(Critter&cr,int,int,int)
{
	Item@item=cr.GetItem(0,(1));
	if((@item!=null))
	::MoveItem(item,0,cr.GetMap(),cr.HexX,cr.HexY);
}

void PatchItemFlags(Critter&cr,int,int,int)
{
	Item@[]items;
	uint count=::GetAllItems(0,items);
	for(uint i=0;i<count;i++)
	{
		Item@item=items[i];
		bool canPickUp=false;
		switch(item.GetType())
		{
			case(1):
			case(2):
			case(3):
			case(4):
			case(5):
			case(7):
			canPickUp=true;
			break;
			
			case(8):
			canPickUp=(((item.Flags)&((0x08000000)))!=0);
			break;
			case(9):
			(item.Flags=(item.Flags)|((0x00001000)));
			break;
			default:
			break;
		}
		switch(item.GetProtoId())
		{
			case 148:
			case 150:
			case 154:
			case 156:
			case 850:
			case 851:
			case 852:
			case 854:
			case 855:
			case 856:
			case 857:
			case 858:
			case 859:
			case 860:
			case 861:
			case 862:
			case 863:
			case 864:
			case 865:
			case 866:
			case 867:
			case 868:
			case 869:
			case 870:
			case 871:
			case 872:
			canPickUp=false;
			break;
			default:
			break;
		}
		if(canPickUp)
		(item.Flags=(item.Flags)|((0x08000000)));
		else
		(item.Flags=((item.Flags)&(~((0x08000000)))));
	}
}

void ColorizeHandItem(Critter&cr,int dist,int color,int flags)
{
	Item@item=cr.GetItem(0,(1));
	if((@item!=null))
	{
		item.LightIntensity=Random(30,80);
		item.LightColor=(color!=0?color:Random(0,0xFFFFFF));
		item.LightDistance=(dist!=0?dist:Random(5,15));
		item.LightFlags=0;
		
		if((flags%10)==1)
		{
			((item.LightFlags=(item.LightFlags)|(1<<(((0)>(5))?(5):(((0)<(0))?(0):(0))))));
			((item.LightFlags=(item.LightFlags)|(1<<(((2)>(5))?(5):(((2)<(0))?(0):(2))))));
			((item.LightFlags=(item.LightFlags)|(1<<(((4)>(5))?(5):(((4)<(0))?(0):(4))))));
		}
		else if((flags%10)==2)
		{
			((item.LightFlags=(item.LightFlags)|(1<<(((1)>(5))?(5):(((1)<(0))?(0):(1))))));
			((item.LightFlags=(item.LightFlags)|(1<<(((3)>(5))?(5):(((3)<(0))?(0):(3))))));
			((item.LightFlags=(item.LightFlags)|(1<<(((5)>(5))?(5):(((5)<(0))?(0):(5))))));
		}
		if((flags/10)==1)
		((item.LightFlags=(item.LightFlags)|(1<<7)));
		
		(item.Flags=(item.Flags)|((0x00008000)));
		item.Update();
	}
}

void ColorizeHandItem2(Critter&cr,int dist,int color,int flags)
{
	Item@item=cr.GetItem(0,(1));
	if((@item!=null))
	{
		item.LightColor=0xFF000000|(color!=0?color:Random(0,0xFFFFFF));
		(item.Flags=(item.Flags)|((0x00400000)));
	}
}

void ColorizeLegsItem(Critter&cr,int dist,int color,int flags)
{
	Item@item=cr.GetMap().GetItem(cr.HexX,cr.HexY,0);
	if((@item!=null))
	{
		item.LightColor=0xFF000000|(color!=0?color:Random(0,0xFFFFFF));
		
		item.Update();
	}
}

void ColorizeLegsItem2(Critter&cr,int dist,int color,int flags)
{
	Item@item=cr.GetMap().GetItem(cr.HexX,cr.HexY,0);
	if((@item!=null))
	{
		if((((item.Flags)&((0x00400000)))!=0))
		(item.Flags=((item.Flags)&(~((0x00400000)))));
		else
		(item.Flags=(item.Flags)|((0x00400000)));
	}
}

void PatchLight(Critter&cr,int,int,int)
{
	Item@[]items;
	uint count=::GetAllItems(0,items);
	for(uint i=0;i<count;i++)
	{
		Item@item=items[i];
		if(item.LightIntensity!=0||item.Proto.LightIntensity!=0)
		(item.Flags=(item.Flags)|((0x00008000)));
	}
}

void ItemFlags(Critter&cr,int,int,int)
{
	Item@[]items;
	uint count=cr.GetMap().GetItems(cr.HexX,cr.HexY,items);
	for(uint i=0;i<count;i++)
	cr.Say((11),"item "+items[i].GetProtoId()+" flags "+items[i].Flags);
}

void CheckAccess(Critter&cr,int,int,int)
{
	Map@[]maps;
	uint mapsCount=::GetAllMaps(0,maps);
	for(uint i=0;i<mapsCount;i++)
	{
		Map@map=maps[i];
		Critter@[]players;
		uint count=map.GetCritters(0,(0x0F)|(0x10),players);
		for(uint j=0;j<count;j++)
		{
			Critter@player=players[j];
			if(player.GetAccess()>0)
			cr.Say((11),"Player "+player.Name+" access "+player.GetAccess()+".");
		}
	}
	cr.Say((11),"Search complete.");
}

void Effect(Critter&cr,int radius,int,int)
{
	cr.GetMap().RunEffect((4008),cr.HexX,cr.HexY+10,radius);
}

void AddLoc(Critter&cr,int pid,int x,int y)
{
	if(::CreateLocation(pid,x,y,null)!=0)
	cr.Say((11),"Success.");
	else
	cr.Say((11),"Fail.");
}

void DeleteNpc(Critter&cr,int crId,int,int)
{
	DeleteNpc(GetCritter(crId));
}

void EndTB(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	map.SetTurnBasedAvailability(false);
	map.EndTurnBased();
}

void TestVar(Critter&cr,int i,int,int)
{                     
	
}

void TestTE(Critter&cr,int set,int,int)
{
	uint num=CreateTimeEvent(__FullSecond+((10)*__TimeMultiplier),"e_TestTE",-8,false);
	Log("created "+num);
	
	uint duration=0;
	uint[]values;
	if(GetTimeEvent(num,duration,values))
	{
		Log("get ok+ duration "+duration);
		for(uint i=0;i<values.length();i++)
		Log(i+") "+values[i]);
		Log("get ok-");
		
		if(set!=0)
		{
			values[0]=123;
			uint value=456;
			values.insertLast(value);
			if(SetTimeEvent(num,duration,values))
			{
				Log("set ok+");
				for(uint i=0;i<values.length();i++)
				Log(i+") "+values[i]);
				Log("set ok-");
			}
		}
	}
}

uint e_TestTE(int[]@values)
{
	Log("e_TestTE+");
	for(uint i=0;i<values.length();i++)
	Log(i+") "+values[i]);
	Log("e_TestTE-");
	return 0;
}

void DoorKey(Critter&cr,int,int,int)
{
	uint16 hx=cr.HexX,hy=cr.HexY;
	Map@map=cr.GetMap();
	if(not(@map!=null))
	return;
	map.MoveHexByDir(hx,hy,cr.Dir,1);
	Item@door=map.GetDoor(hx,hy);
	if(not(@door!=null))
	return;
	Item@key=cr.AddItem((438),1);
	if(not(@key!=null))
	return;
	key.LockerId=door.LockerId;
	key.Update();
}

void HandToInv(Critter&cr,int,int,int)
{
	Item@item=cr.GetItem(0,(1));
	if((@item!=null))
	{
		if(cr.MoveItem(item.Id,0,(0)))
		Log("ok");
		else
		Log("fail");
	}
}

void KillSpawn(Critter&cr,int,int,int)
{
	uint16 hx=cr.HexX,hy=cr.HexY;
	Map@map=cr.GetMap();
	if(not(@map!=null))
	return;
	
	map.MoveHexByDir(hx,hy,cr.Dir,1);
	
	Critter@oldNpc=map.GetCritter(hx,hy);
	if(not(@oldNpc!=null))
	return;
	
	DeleteNpc(oldNpc);
	
	uint[]values={map.Id,hx,hy};
	CreateTimeEvent(__FullSecond+((50)*__TimeMultiplier/1000),"e_KillSpawn",values,false);
}

uint e_KillSpawn(uint[]@values)
{
	Map@map=GetMap(values[0]);
	if((@map!=null))
	map.AddNpc(20+Random(0,10),values[1],values[2],2,null,null,null);
	return 0;
}

import void DropDrugEffects(Critter&cr)from"drugs";
void DropDrugs(Critter&iam,int,int,int)
{
	Map@map=iam.GetMap();
	if(not(@map!=null))
	return;
	
	uint16 hx=iam.HexX,hy=iam.HexY;
	for(uint i=0;i<10;i++)
	{
		map.MoveHexByDir(hx,hy,iam.Dir,1);
		Critter@cr=map.GetCritter(hx,hy);
		if((@cr!=null))
		{
			DropDrugEffects(cr);
			cr.Say((1),"Drugs dropped.");
			break;
		}
	}
}

void ClearExplode(Critter&iam,int,int,int)
{
	Map@map=iam.GetMap();
	if(not(@map!=null))
	return;
	
	Item@[]items;
	map.GetItems((206),items);
	map.GetItems((209),items);
	map.GetItems((545),items);
	
	DeleteItems(items);
}

void Sandbags(Critter&iam,int lineLen,int skipLen,int stackCount)
{
	Map@map=iam.GetMap();
	if(not(@map!=null))
	return;
	
	uint16 pid=(587);
	if(stackCount!=0)
	pid=(580)-1+stackCount;
	
	uint16 hx=iam.HexX,hy=iam.HexY;
	for(uint i=0;i<uint(lineLen);i++)
	{
		if(skipLen!=0)
		skipLen--;
		else
		{
			map.MoveHexByDir(hx,hy,iam.Dir,1);
			map.AddItem(hx,hy,pid,1);
		}
	}
}

void ClearItems(Critter&iam,int lineLen,int skipLen,int)
{
	Map@map=iam.GetMap();
	if(not(@map!=null))
	return;
	
	Item@[]items;
	uint16 hx=iam.HexX,hy=iam.HexY;
	for(uint i=0;i<uint(lineLen);i++)
	{
		if(skipLen!=0)
		skipLen--;
		else
		{
			map.MoveHexByDir(hx,hy,iam.Dir,1);
			map.GetItems(hx,hy,items);
		}
	}
	
	DeleteItems(items);
}

import void PlayMusic(Map&map,string&musicName,uint pos,uint repeat)from"media";
void BattleMusic(Critter&iam,int index,int,int)
{
	if(index==1)
	PlayMusic(iam.GetMap(),"02 - Into The Dust.ogg",0,0);
	else if(index==2)
	PlayMusic(iam.GetMap(),"07 - Echelon.ogg",0,0);
	else if(index==3)
	PlayMusic(iam.GetMap(),"11 - Face To Face.ogg",0,0);
	else if(index==4)
	PlayMusic(iam.GetMap(),"16 - Stranglet.ogg",0,0);
	else if(index==5)
	PlayMusic(iam.GetMap(),"17 - Trinity.ogg",0,0);
	else
	PlayMusic(iam.GetMap(),"01 - No Fate No Fear.ogg",0,0);
}

void FixPlayer(Critter&admin,int id,int,int)
{
	Critter@cr=::GetCritter(id);
	if((@cr!=null))
	{
		if(cr.StatBase[(101)]==9999)
		{
			cr.StatBase[(101)]=0;
			if(cr.Perk[(315)]!=0)
			cr.StatBase[(101)]=6;
			admin.Say((11),"Fixed bonus look.");
		}
		
		if(cr.StatBase[(84)]==-1)
		{
			cr.StatBase[(84)]=0;
			cr.TimeoutBase[(241)]=0;
			admin.Say((11),"Fixed replication.");
		}
		
		cr.SetEvent((2),null);
	}
	else
	{
		admin.Say((11),"Not found.");
	}
}

void SetAnim1(Critter&cr,int value,int,int)
{
	cr.SetAnims(0,value,0);
}

void Pos(Critter&cr,int newPos,int,int)
{
	
	int curPos=((cr.Anim1Life&(0x0100))!=0?1:((cr.Anim1Life&(0x0200))!=0?2:0));
	switch(curPos)
	{
		case 0:
		switch(newPos)
		{
			case 1:
			cr.Animate(0,(11),null,true,true);
			break;
			case 2:
			cr.Animate(0,(11),null,true,true);
			cr.Animate((0x0100),(12),null,false,true);
			break;
			default:
			break;
		}
		break;
		case 1:
		switch(newPos)
		{
			case 0:
			cr.Animate(0,(10),null,true,true);
			break;
			case 2:
			cr.Animate(0,(12),null,true,true);
			break;
			default:
			break;
		}
		break;
		case 2:
		switch(newPos)
		{
			case 0:
			cr.Animate(0,(11),null,true,true);
			cr.Animate((0x0100),(10),null,false,true);
			break;
			case 1:
			cr.Animate(0,(11),null,true,true);
			break;
			default:
			break;
		}
		break;
		default:
		break;
	}
	switch(newPos)
	{
		case 0:
		cr.SetAnims(0,0,0);
		break;
		case 1:
		cr.SetAnims(0,(0x0100),0);
		break;
		case 2:
		cr.SetAnims(0,(0x0200),0);
		break;
		default:
		break;
	}
}

void ColorOffset(Critter&cr,int skin,int hair,int armor)
{
	cr.SetAnims(0,(((skin)&0xF)<<20)|(((hair)&0xF)<<24)|(((armor)&0xF)<<28),0);
}

void Shield(Critter&cr,int on,int,int)
{
	if(on!=0)
	cr.SetAnims(0,(0x1000),0);
	else
	cr.SetAnims(0,0,0);
}

void Palette(Critter&cr,int index,int,int)
{
	cr.SetAnims(0,(((index)&3)<<((8)+8)),0);
}

void SetWalk(Critter&cr,int time,int off,int)
{
	cr.StatBase[(117)]=time;
	cr.ModeBase[(539)]=off;
}

void SetRun(Critter&cr,int time,int off,int)
{
	cr.StatBase[(118)]=time;
	cr.ModeBase[(540)]=off;
}  

void excep0(Critter&cr,int,int,int)
{
	Log("excep0");
	excep1(cr);
}
void excep1(Critter&cr)
{
	Log("excep1");
	int y=100;
	excep2(6);
}
void excep2(int i)
{
	Log("excep2");
	for(int k=0;k<10;k++)
	excep3();
}
void excep3()
{
	Log("excep3");
	int h=0;
	int k=10/h;
}

void toDead(Critter&cr,int,int,int)
{
	cr.ToDead((110),null);
}
void toLife(Critter&cr,int,int,int)
{
	cr.ToLife();
}
void toKO(Critter&cr,int,int,int)
{
	cr.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),1000,cr.HexX,cr.HexY);
} 

void testScriptCall(Critter&,int,int,int)
{
	if(TestScriptCallNative("test","double TestScriptCallAS(int v1, uint64 v2, float v3, string@ v4)"))
	Log("testScriptCall success.");
	else
	Log("testScriptCall fail.");
}
double TestScriptCallAS(int v1,uint64 v2,float v3,string@v4)
{
	Log("TestScriptCall: "+v1+", "+v2+", "+v3+", "+v4+".");
	return 1.234567890;
} 

void testStringExample(Critter&,int,int,int)
{
	StringExample();
} 

void animate(Critter&cr,int anim1,int anim2,int)
{
	cr.Animate(anim1,anim2,null,true,true);
}
