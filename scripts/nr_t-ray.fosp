

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}

import uint GetCarCost(uint16 protoCar)from"car";                        

int GetFuelCost(Item@car)
{
	return int(car.Proto.Car_TankVolume)-car.Charge+10;
}

int GetWearCost(Item@car)
{
	return car.Deterioration+10;
}

int GetBioCost(Item@car)
{
	return GetCarCost(car.GetProtoId())*10/100;
}

void dlg_PrepareBuy(Critter&player,Critter@tray,string@lexems)
{
	if(not((@lexems!=null)&&lexems.length()==0))
	return;
	
	lexems+="$hummer"+GetCarCost((800));
	lexems+="$buggy"+GetCarCost((802));
	lexems+="$scout"+GetCarCost((805));
	lexems+="$highwayman"+GetCarCost((816));
}

uint r_BuyHummer(Critter&player,Critter@tray,int val)
{
	return TryCreateCar(player,(800));
}

uint r_BuyBuggy(Critter&player,Critter@tray,int val)
{
	return TryCreateCar(player,(802));
}

uint r_BuyScout(Critter&player,Critter@tray,int val)
{
	return TryCreateCar(player,(805));
}

uint r_BuyHighwayman(Critter&player,Critter@tray,int val)
{
	return TryCreateCar(player,(816));
}

uint TryCreateCar(Critter&player,uint16 protoCar)
{
	if(protoCar!=(800)&&protoCar!=(802)&&protoCar!=(805)&&protoCar!=(816))
	return(100);
	
	uint cost=GetCarCost(protoCar);
	if(player.CountItem((41))<cost)
	return(5);
	
	Map@map=player.GetMap();
	if(not(@map!=null))
	return(100);
	
	Entire[]entires;
	ParseEntires(map,entires,(100));
	ParseEntires(map,entires,(243));
	
	uint16 hx,hy,entNum;
	for(int i=0,j=entires.length();i<=j;i++)
	{
		if(i==j)
		return(6);
		
		Entire@ent=entires[i];
		if(map.CheckPlaceForItem(ent.HexX,ent.HexY,protoCar))
		{
			hx=ent.HexX;
			hy=ent.HexY;
			entNum=ent.Number;
			break;
		}
	}
	
	uint keyId=Random(10000,50000);
	
	Item@car=map.AddItem(hx,hy,protoCar,1);
	if(not(@car!=null))
	return(100);
	car.LockerId=keyId;
	car.Charge=car.Proto.Car_TankVolume;
	car.Deterioration=0;
	car.Update();
	
	Item@bag=car.GetChild(0);
	if((@bag!=null))
	{
		bag.LockerId=keyId;
		bag.LockerComplexity=Random(50,100);
		bag.Update();
	}
	
	Item@key=player.AddItem((82),1);
	if((@key!=null))
	{
		key.LockerId=keyId;
		key.Update();
	}
	
	player.DeleteItem((41),cost);
	if(entNum==(100))
	return(7);
	
	return(8);
}

Item@GetPlayerKey(Critter@player)
{
	Item@key=player.GetItem(0,(1));
	if(not(@key!=null)||key.GetType()!=(7))
	return null;
	return key;
}

Item@GetPlayerCar(Critter@player,uint&forceDialog)
{
	Map@map=player.GetMap();
	if(not(@map!=null))
	{
		forceDialog=(100);
		return null;
	}
	
	Item@key=GetPlayerKey(player);
	if(not(@key!=null))
	{
		forceDialog=(101);
		return null;
	}
	
	Entire[]entires;
	ParseEntires(map,entires,(100));
	ParseEntires(map,entires,(243));
	for(int i=0,j=entires.length();i<j;i++)
	{
		Item@car=map.GetCar(entires[i].HexX,entires[i].HexY);
		if((@car!=null)&&car.LockerId==key.LockerId)
		return car;
	}
	
	forceDialog=(102);
	return null;
}

uint r_CheckCar(Critter&player,Critter@tray,int val)
{
	uint forceDialog=0;
	if(not(@GetPlayerCar(player,forceDialog)!=null))
	return forceDialog;
	return 0;
}

uint dlg_SellCar(Critter&player,Critter@tray,string@lexems)
{
	if(not((@lexems!=null)&&lexems.length()==0))
	return 0;
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	lexems="$sell_cost0";
	else
	{
		uint cost=GetCarCost(car.GetProtoId())/2;
		GameVar@isQuest=GetLocalVar((1000),car.Id);
		if((@isQuest!=null)&&isQuest==1)
		cost=0;
		lexems="$sell_cost"+cost;
	}
	
	return forceDialog;
}

uint r_SellCar(Critter&player,Critter@tray,int val)
{
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	return forceDialog;
	uint cost=GetCarCost(car.GetProtoId())/2;
	GameVar@isQuest=GetLocalVar((1000),car.Id);
	if((@isQuest!=null)&&isQuest==1)
	cost=0;
	Item@key=player.GetItem(0,(1));
	if((@key!=null)&&key.GetType()==(7)&&key.LockerId==car.LockerId)
	DeleteItem(key);
	DeleteItem(car);
	player.AddItem((41),cost);
	return 0;
}

uint dlg_Fuel(Critter&player,Critter@tray,string@lexems)
{
	if(not((@lexems!=null)&&lexems.length()==0))
	return 0;
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	lexems="$fuel_cost0";
	else
	lexems="$fuel_cost"+GetFuelCost(car);
	return forceDialog;
}

uint dlg_Wear(Critter&player,Critter@tray,string@lexems)
{
	if(not((@lexems!=null)&&lexems.length()==0))
	return 0;
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	lexems="$wear_cost0";
	else
	lexems="$wear_cost"+GetWearCost(car);
	return forceDialog;
}

uint dlg_Bio(Critter&player,Critter@tray,string@lexems)
{
	if(not((@lexems!=null)&&lexems.length()==0))
	return 0;
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	lexems="$bio_cost0";
	else
	lexems="$bio_cost"+GetBioCost(car);
	return forceDialog;
}

uint r_DoFuel(Critter&player,Critter@tray,int val)
{
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	return forceDialog;
	
	uint cost=GetFuelCost(car);
	uint money=player.CountItem((41));
	if(cost>money)
	return(37);
	
	if(car.Charge>=car.Proto.Car_TankVolume)
	return(38);
	car.Charge=car.Proto.Car_TankVolume;
	player.DeleteItem((41),cost);
	return 0;
}

uint r_DoWear(Critter&player,Critter@tray,int val)
{
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	return forceDialog;
	
	uint cost=GetWearCost(car);
	uint money=player.CountItem((41));
	if(cost>money)
	return(37);
	
	if(car.Deterioration==0)
	return(38);
	car.Deterioration=0;
	player.DeleteItem((41),cost);
	return 0;
}

uint r_DoBio(Critter&player,Critter@tray,int val)
{
	uint forceDialog=0;
	Item@car=GetPlayerCar(player,forceDialog);
	if(not(@car!=null))
	return forceDialog;
	
	uint cost=GetBioCost(car);
	uint money=player.CountItem((41));
	if(cost>money)
	return(37);
	
	if(((car.Val0&(0x0001))!=0))
	return(38);
	car.Val0|=(0x0001);
	player.DeleteItem((41),cost);
	return 0;
}

uint r_CopyKey(Critter&player,Critter@tray,int val)
{
	uint money=player.CountItem((41));
	if(money<(1000))
	return(37);
	
	Item@key=GetPlayerKey(player);
	if(not(@key!=null))
	return(103);
	
	Item@keyCopy=player.AddItem((82),1);
	if(not(@keyCopy!=null))
	return(100);
	keyCopy.LockerId=key.LockerId;
	keyCopy.Update();
	
	player.DeleteItem((41),(1000));
	return 0;
}
