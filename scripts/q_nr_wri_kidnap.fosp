

import bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)from"entire";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool Merc2Player(Critter&player,Critter&merc)from"merc";
import void _MercInit(Critter&merc,bool firstTime)from"merc";  

uint KidnapLocationId=0;

void _OliverInit(Critter&cr,bool firstTime)
{
	if(cr.Stat[(90)]==0)
	{
		cr.StatBase[(90)]=CreateTimeEvent(__FullSecond+(60*60*24*30*Random(1,3)),"e_Kidnap",true);
	}
	
}

uint e_Kidnap(uint[]@values)
{
	if(!KidnapLocationExist())
	{
		uint locId=CreateLocation(((227)),(Random(1229,1359)),(Random(847,942)),null);
		if(locId>0)
		{
			KidnapLocationId=locId;
			;
		}
	}
	return(60*60*24*30*Random(1,3));
}  

bool KidnapLocationExist()
{
	if(KidnapLocationId==0)
	return false;
	Location@loc=GetLocation(KidnapLocationId);
	return(@loc!=null);
}

bool d_QuestActive(Critter&player,Critter@npc)
{
	return KidnapLocationExist();
}

bool d_NotQuestActive(Critter&player,Critter@npc)
{
	return!KidnapLocationExist();
}

void r_ShowLocation(Critter&player,Critter@npc)
{
	Location@loc=GetLocation(KidnapLocationId);
	if((@loc!=null))
	{
		if(!player.IsKnownLoc(true,loc.Id))
		player.SetKnownLoc(true,loc.Id);
	}
} 

void _MapInit(Map&map,bool firstTime)
{
	;
	Location@loc=map.GetLocation();
	KidnapLocationId=loc.Id;
	map.SetEvent((1),"_MapLoop0");
	map.SetEvent((6),"_MapInCritter");
	map.SetEvent((8),"_MapCritterDead");
	
	map.SetEvent((7),"_MapOutCritter");
	map.SetLoopTime(0,6000);
} 

void _MapInCritter(Map&map,Critter&cr)
{
	;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return;
	GameVar@status=GetLocalVar(((15)),loc.Id);
	GameVar@qVar=GetLocalVar(((3707)),cr.Id);
	if((@status!=null)&&(@qVar!=null)&&qVar==(1))
	{
		if(status==1)
		{
			cr.SayMsg((11),(0),(3350));
			return;
		}
		if(cr.Skill[(208)]>50)
		cr.SayMsg((11),(0),(3351));
		else
		cr.SayMsg((11),(0),(3352));
	}
}

void _MapOutCritter(Map&map,Critter&cr)
{
	UpdateQuestStatus(map,cr);
	Location@loc=map.GetLocation();
	if((@loc!=null))
	ResetHostileIfNoPlayers(loc);
}

void ResetHostileIfNoPlayers(Location&loc)
{
	GameVar@status=GetLocalVar(((15)),loc.Id);
	if(!(@status!=null)||status==0)
	return;
	Critter@[]players;
	for(uint i=0;i<loc.GetMapCount();i++)
	{
		Map@map=loc.GetMapByIndex(i);
		if((@map!=null))
		map.GetCritters(0,(0x0F)|(0x10),players);
	}
	if(players.length()==0)
	{
		status=0;
		
		GameVar@guardId=GetLocalVar(((3708)),loc.Id);
		if((@guardId!=null)&&guardId>0)
		{
			Critter@cr=GetCritter(guardId.GetValue());
			if((@cr!=null)&&cr.IsNpc()&&cr.IsDead())
			{
				guardId=0;
				cr.ToLife();
			}
		}
	}
}

void _MapCritterDead(Map&map,Critter&cr,Critter@killer)
{
	Location@loc=map.GetLocation();
	if((@loc!=null))
	ResetHostileIfNoPlayers(loc);
	UpdateQuestStatus(map,null);
} 

bool IsHostile(Map&map)
{
	Location@loc=map.GetLocation();
	if((@loc!=null))
	{
		GameVar@status=GetLocalVar(((15)),loc.Id);
		return(@status!=null)&&status==1;
	}
	return false;
}

void SetHostile(Location@loc,bool hostileOn)
{
	if((@loc!=null))
	{
		GameVar@status=GetLocalVar(((15)),loc.Id);
		if((@status!=null))
		status=hostileOn?1:0;
	}
}

void AcceptAttack(Map&map)
{
	;
	if(!IsHostile(map))
	SetHostile(map.GetLocation(),true);
	uint marodeurs=map.GetNpcCount((1),(0x01)|(0x20));
	Critter@marodeur;
	Critter@[]players;
	Critter@player;
	map.GetCritters(0,(0x03)|(0x10),players);
	for(uint i=0;i<marodeurs;i++)
	{
		;
		@marodeur=map.GetNpc((1),(0x01)|(0x20),i);
		if((@marodeur!=null))
		{
			for(uint j=0,l=players.length();j<l;j++)
			{
				@player=players[j];
				if((@player!=null))
				{
					;
					marodeur.AddEnemyInStack(player.Id);
					if(GetCrittersDistantion(marodeur,player)<15)
					{
						AddAttackPlane(marodeur,0,player);
					}
				}
				
			}
		}
	}
}

void r_Attack(Critter&cr,Critter@npc)
{
	AcceptAttack(cr.GetMap());
}

void dlg_Attack(Critter&cr,Critter@npc,string@lexems)
{
	AcceptAttack(cr.GetMap());
}  

void _MapLoop0(Map&map)
{
	if(IsHostile(map))
	return;
	Critter@[]players;
	Critter@[]marodeurs;
	Critter@player;
	Critter@npc;
	if(map.GetCritters(0,(0x01)|(0x10),players)>0)
	{
		for(uint i=0,l=players.length();i<l;i++)
		{
			@player=players[i];
			if(!(@player!=null))
			return;
			marodeurs.resize(0);
			if(map.GetCrittersHex(player.HexX,player.HexY,(15),(0x01)|(0x20),marodeurs)>0)
			{
				@npc=marodeurs[0];
				if((@npc!=null)&&npc.Stat[(89)]==(1))
				{
					TryMarodeurDialog(player,npc,map);
				}
			}
		}
	}
}

void TryMarodeurDialog(Critter&player,Critter&marodeur,Map&map)
{
	if(marodeur.GetTalkedPlayers(null)>0)
	return;
	GameVar@warned=GetLocalVar(((3709)),player.Id);
	if(!(@warned!=null)||warned.GetValue()+__TimeMultiplier*20>int(__FullSecond))
	return;
	player.Wait(0);
	Critter@cr;
	Critter@[]players;
	
	uint npcCount=map.GetNpcCount((1),(0x01)|(0x20));
	if(npcCount>0)
	{
		for(uint i=0;i<npcCount;i++)
		{
			@cr=map.GetNpc((1),(0x01)|(0x20),i);
			if((@cr!=null))
			cr.GetTalkedPlayers(players);
		}
	}
	for(uint i=0,l=players.length();i<l;i++)
	{
		@cr=players[i];
		if((@cr!=null)&&cr.Id==player.Id)
		return;
	}
	
	warned=__FullSecond;
	RunDialog(player,marodeur,true);
} 

void _HostileInit(Critter&cr,bool firstTime)
{
	cr.SetEvent((15),"_HostileAttack");
	cr.SetEvent((2),"_HostileDead");
	cr.SkillBase[(200)]=250;
	cr.StatBase[(7)]=Random(400,600);
	cr.StatBase[(8)]=Random(8,12);
	cr.StatBase[(72)]=cr.Stat[(7)];
	cr.PerkBase[(322)]=1;
	cr.PerkBase[(325)]=1;
}

bool _HostileAttack(Critter&cr,Critter&target)
{
	if(target.IsPlayer()&&!target.IsDead()&&!IsHostile(cr.GetMap()))
	{
		if(Random(1,2)==1)
		{
			AcceptAttack(cr.GetMap());
			cr.SayMsg((3),(0),(3353));
		}
		
	}
	return false;
}
void _HostileDead(Critter&cr,Critter@killer)
{
	if((@killer!=null)&&killer.IsPlayer())
	{
		GameVar@counter=GetLocalVar((3711),killer.Id);
		if((@counter!=null))
		counter=counter.GetValue()+1;
	}
}

void _GuardInit(Critter&cr,bool firstTime)
{
	cr.SetEvent((2),"_GuardDead");
	cr.SetEvent((16),"_GuardAttacked");
	cr.SetEvent((3),"_GuardRespawn");
}

void _GuardDead(Critter&cr,Critter@killer)
{
	Location@loc=cr.GetMap().GetLocation();
	GameVar@guardId=GetLocalVar(((3708)),loc.Id);
	if((@guardId!=null))
	guardId=cr.Id;
	if((@killer!=null)&&!IsHostile(cr.GetMap()))
	{
		GameVar@qVar=GetLocalVar(((3707)),killer.Id);
		if(((@qVar!=null)&&qVar==1)||((@qVar!=null)&&qVar==2))
		{
			qVar=3;
		}
	}
}

void _GuardRespawn(Critter&cr)
{
	Location@loc=cr.GetMap().GetLocation();
	GameVar@guardId=GetLocalVar(((3708)),loc.Id);
	if((@guardId!=null)&&guardId==cr.Id)
	guardId=0;
}

bool _GuardAttacked(Critter&cr,Critter&attacker)
{
	Item@wpn=attacker.GetItem(0,(1));
	if((@wpn!=null)&&wpn.GetType()==(3)&&wpn.Proto.Weapon_Skill_1!=(203)&&wpn.Proto.Weapon_Skill_1!=(204))
	{
		
		if(!IsHostile(cr.GetMap()))
		{
			SetHostile(cr.GetMap().GetLocation(),true);
			cr.SayMsg((3),(0),(3353));
		}
	}
	return false;
}

void t_Alarm(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	Map@map=player.GetMap();
	Critter@guard=map.GetNpc((2),(0x0F)|(0x20),0);
	if(!(@guard!=null)||guard.IsDead()||!entered||IsHostile(player.GetMap()))
	return;
	if(player.IsPlayer())
	{
		GameVar@questVar=GetLocalVar(((3707)),player.Id);
		if((@questVar!=null)&&questVar!=2&&questVar!=4)
		{
			AddAttackPlane(guard,0,player);
			guard.SayMsg((3),(0),(3353));
			SetHostile(guard.GetMap().GetLocation(),true);
			Critter@npc=map.GetNpc((1),(0x01)|(0x20),0);
			if((@npc!=null))
			{
				AddAttackPlane(npc,0,player);
			}
		}
	}
}

void t_CheckSneak(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	Map@map=player.GetMap();
	Critter@guard=map.GetNpc((2),(0x0F)|(0x20),0);
	if(!player.IsPlayer()||!(@guard!=null)||guard.IsDead()||!entered||IsHostile(player.GetMap()))
	return;
	
	GameVar@questVar=GetLocalVar(((3707)),player.Id);
	if((@questVar!=null))
	{
		if(questVar==2)
		{
			player.Wait(0);
			RunDialog(player,guard,true);
			return;
		}
		if(questVar==1)
		{
			if(player.Mode[(510)]==1&&(player.Dir==2||player.Dir==3))
			{
				guard.SayMsg((1),(0),3354);
				return;
			}
		}
		if(questVar==4)
		{
			return;
		}
	}
	AddAttackPlane(guard,0,player);
	guard.SayMsg((3),(0),(3353));
	SetHostile(guard.GetMap().GetLocation(),true);
	Critter@npc=map.GetNpc((1),(0x01)|(0x20),0);
	if((@npc!=null))
	{
		AddAttackPlane(npc,0,player);
	}
} 

void _WrightInit(Critter&cr,bool firstTime)
{
	cr.SetEvent((2),"_WrightDead");
	cr.StatBase[(84)]=-1;
}

void _WrightDead(Critter&cr,Critter@killer)
{
	
	UpdateQuestStatus(cr.GetMap(),null);
	if((@killer!=null))
	{
		GameVar@status=GetLocalVar((3710),killer.Id);
		if((@status!=null)&&status==1)
		status=2;
	}
} 

bool d_WeaponHand(Critter&player,Critter@npc)
{
	Item@item=player.GetItem(0,(1));
	if((@item!=null)&&item.GetType()==(3))
	return true;
	return false;
}

void dlg_WeaponHand(Critter&player,Critter@npc,string@lexems)
{
	Item@item=player.GetItem(0,(1));
	if((@item!=null)&&item.GetType()==(3))
	lexems="$weaponName@msg ITEM"+item.GetProtoId()*100+"@";
}

void r_GiveWeaponHand(Critter&player,Critter@npc)
{
	Item@item=player.GetItem(0,(1));
	if((@item!=null)&&item.GetType()==(3))
	{
		npc.AddItem(item.GetProtoId(),1);
		npc.SetFavoriteItem((1),item.GetProtoId());
		DeleteItem(item);
	}
} 

void r_Fight(Critter&player,Critter@npc)
{
	if((@npc!=null))
	{
		npc.AddTimeEvent("cte_WrightAttack",((3)*__TimeMultiplier),(17));
		npc.ModeBase[(522)]=1;
	}
} 

void r_WrightMerc(Critter&player,Critter@npc)
{
	if(!(@npc!=null))
	return;
	Merc2Player(player,npc);
	npc.MercBase[(801)]=1;
	npc.MercBase[(803)]=0;
	npc.MercBase[(804)]=2;
}

void _WrightInitMerc(Critter&cr,bool firstTime)
{
	_MercInit(cr,firstTime);
	
	cr.SetEvent((40),"_WrightGlobalProcess");
}

bool _WrightGlobalProcess(Critter&cr,int type,Item@car,float&x,float&y,float&toX,float&toY,float&speed,uint&encounterDescriptor,bool&waitForAnswer)
{
	cr.SayMsg((1),(1),(1000000000+(cr.Stat[(104)])*100000+(1)));
	DeleteNpc(cr);
	return false;
}

void UpdateQuestStatus(Map@map,Critter@cr)
{
	if(!(@map!=null))
	return;
	bool wrightAlive=(map.GetNpcCount((3),(0x01)|(0x20))>0);
	bool wrightDead=(map.GetNpcCount((3),(0x04)|(0x20))>0);
	bool marodeursAlive=(map.GetNpcCount((1),(0x01)|(0x20))>0);
	int status=0; 
	
	if(!wrightAlive&&!wrightDead&&marodeursAlive)
	status=5;
	if(wrightAlive&&!marodeursAlive)
	status=6;
	if(!wrightAlive&&!wrightDead&&!marodeursAlive)
	status=6;
	if(wrightDead&&marodeursAlive)
	status=7;
	if(wrightDead&&!marodeursAlive)
	status=8;
	Critter@[]players;
	if((@cr!=null))
	players.insertLast(cr);
	GameVar@qVar;
	if(map.GetCritters(0,(0x0F)|(0x10),players)>0)
	{
		for(uint i=0,l=players.length();i<l;i++)
		{
			@qVar=GetLocalVar(((3707)),players[i].Id);
			if((@qVar!=null)&&qVar!=0&&qVar!=11)
			qVar=status;
		}
	}
	if(wrightDead||!marodeursAlive||(!wrightDead&&!wrightAlive))
	CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier*3600),"e_DeleteQuestLocation",map.Id,true);
	if(!marodeursAlive)
	{
		Location@loc=map.GetLocation();
		if((@loc!=null))
		{
			GameVar@allDead=GetLocalVar((3712),loc.Id);
			allDead=1;
		}
	}
}

uint e_DeleteQuestLocation(uint[]@values)
{
	Map@map=GetMap(values[0]);
	if((@map!=null))
	{
		Location@loc=map.GetLocation();
		if((@loc!=null))
		{
			loc.AutoGarbage=true;
		}
	}
	return 0;
}

uint cte_WrightAttack(Critter&cr,int identifier,uint&stage)
{
	Map@map=cr.GetMap();
	AcceptAttack(map);
	uint marodeurs=map.GetNpcCount((1),(0x01)|(0x20));
	Critter@marodeur;
	for(uint i=0,l=marodeurs;i<marodeurs;i++)
	{
		@marodeur=map.GetNpc((1),(0x01)|(0x20),i);
		if((@marodeur!=null))
		{
			marodeur.AddEnemyInStack(cr.Id);
			cr.AddEnemyInStack(marodeur.Id);
			AddAttackPlane(cr,0,marodeur);
		}
	}
	return 0;
}
