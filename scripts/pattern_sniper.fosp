

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import void CombatAttack(Critter&cr,Critter&target,ProtoItem&weapon,uint8 weaponMode,ProtoItem@ammo)from"combat";
import uint EraseAttackPlane(Critter&npc,Critter&target)from"npc_planes";
import uint8 GetDir(Critter&cr0,Critter&cr1)from"merc";
import bool GetFreeHex(Map&map,uint radius,uint16&hx,uint16&hy)from"caravan";
import int GetDeteriorationProcent(Item&item)from"repair";
import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs";
import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";                                                                                                                                

class CommonPattern
{
	
	bool _MsgReact(Critter&sender,Critter&reciever,uint msg)
	{
		uint dist=GetCrittersDistantion(sender,reciever);
		if(dist==0)
		return false;
		if(sender.Id==reciever.Id)
		return false;
		
		switch(msg)
		{
			case(156):
			return(dist<=(12));
			case(157):
			return true;
			default:
			break;
		}
		return false;
	}  
	
	void _TryUseStim(Critter&cr)
	{
		if(!cr.IsLife())
		return;
		if(cr.Stat[(72)]*100>cr.Stat[(7)]*50)
		return;
		
		if(cr.CountItem((144))>0||cr.CountItem((40))>0)
		{
			Item@item=cr.GetItem((cr.CountItem((144))>0?(144):(40)),-1);
			UseDrugOn(cr,cr,item);
			cr.Animate(0,(28),null,true,true);
			return;
		}
	} 
	
	void _ShowCritter(Critter&cr,Critter&showCrit)
	{
		if(!cr.IsCurPlane((1))&&showCrit.IsPlayer())
		{
			NpcPlane@[]planes;
			uint count=cr.GetPlanes(planes);
			if(count>0)
			{
				uint critId=showCrit.Id;
				for(uint i=0;i<count;i++)
				{
					if(planes[i].Attack_TargId==critId)
					return;
				}
			}
			AttackPlayer(cr,showCrit);
		}
	} 
	
	bool _Attacked(Critter&cr,Critter&attacker)
	{
		_TryUseStim(cr);
		cr.SendMessage((356),0,(2));
		return false;
	} 
	
	void _Dead(Critter&cr,Critter@killer)
	{
		if(!cr.IsDead())
		return;
		Item@[]items;
		uint iCount=cr.GetItems(-1,items);
		if(iCount>0)
		{
			for(uint i=0;i<iCount;i++)
			{
				Item@item=items[i];
				if(!(@item!=null))
				continue;
				
				SetDeterioration(item,Random(50,90));
				
				if(item.GetType()==(4))
				{
					do{if(item.GetCount()>(uint(item.GetCount()-Random(1,30)))) item.SetCount(item.GetCount()-(uint(item.GetCount()-Random(1,30))));else DeleteItem(item);}while(false);
				}
			}
		}
	} 
	
	int _PlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		if(plane.Type==(1))
		{
			Critter@target=GetCritter(plane.Attack_TargId);
			if((@target!=null)&&target.Stat[(106)]==cr.Stat[(106)])
			{
				EraseAttackPlane(cr,target);
				EraseAttackPlane(target,cr);
				return(2);
			}
		}
		return(0);
	}
	
	void AttackPlayer(Critter&cr,Critter&player)
	{
		AttackPlayer(cr,0,player);
	}
	
	void AttackPlayer(Critter&cr,uint priority,Critter&player)
	{
		if(!player.IsPlayer())
		return;
		AddAttackPlane(cr,priority,player);
	}
	
	void SetEvents(Critter&cr)
	{}
}  

bool _GetLimits(uint[]arr,uint&min,uint&max)
{
	if(arr.length()==0)
	return false;
	min=arr[0];
	max=arr[0];
	for(uint i=0;i<arr.length();i++)
	{
		min=(min<arr[i]?min:arr[i]);
		max=(max>arr[i]?max:arr[i]);
	}
	
	return true;
}

bool _GetFirstMinIndex(uint[]arr,uint&minIndex)
{
	uint min=0;
	uint max=0;
	if(!_GetLimits(arr,min,max))
	return false;
	
	for(uint i=0;i<arr.length();i++)
	{
		if(arr[i]==min)
		minIndex=i;
	}
	return false;
}

bool _GetRandomMaxIndex(uint[]arr,uint&maxIndex)
{
	uint min=0;
	uint max=0;
	if(!_GetLimits(arr,min,max))
	return false;
	uint[]maxes;
	for(uint i=0;i<arr.length();i++)
	{
		if(arr[i]==max)
		{
			maxes.insertLast(i);
		}
	}
	maxIndex=maxes[Random(0,maxes.length()-1)];
	return true;
}

void _CritterInit(Critter&cr,bool firstTime)
{
	pattern.SetEvents(cr);
}

void DL(string s)
{
	
}                           

const int[]sniperStats_=
{
	
	1,120,190,150,180,7,25,30,10,170,
	2,100,185,180,240,8,35,60,12,220,
	3,120,250,190,250,9,35,70,16,280,
	4,200,300,250,300,10,35,120,20,400
};                

class SniperPattern:CommonPattern
{
	
	void _Message(Critter&sniper,Critter&fromCr,int message,int value)
	{
		if(message==(156))
		{
			if(sniper.IsCurPlane((1)))
			return;
			if(sniper.Stat[(106)]!=fromCr.Stat[(106)])
			return;
			if(this._MsgReact(sniper,fromCr,message))
			return;
			
			Critter@target=GetCritter(value);
			if((@target!=null))
			{
				this.AttackPlayer(sniper,target);
			}
			return;
		}
		if(message==(157))
		{
			Critter@target=GetCritter(value);
			if((@target!=null))
			{
				this.AttackPlayer(sniper,target);
			}
			return;
		}
	} 
	
	bool _Attack(Critter&cr,Critter&target)
	{
		if(target.IsNpc())
		return false;
		if(target.IsKnockout())
		return false;
		cr.SendMessage((156),target.Id,(1)); 
		
		uint8 mode=0;
		ProtoItem@weapon=cr.GetSlotProto((1),mode);
		if(!(@weapon!=null))
		return false;
		if(weapon.Type!=(3)||((((mode)&0xF))==0?weapon.Weapon_Skill_0:((((mode)&0xF))==1?weapon.Weapon_Skill_1:((((mode)&0xF))==2?weapon.Weapon_Skill_2:0)))!=(200))
		return false;
		
		Item@weap=cr.GetItem(0,(1));
		if(!(@weap!=null))
		return false;
		
		ProtoItem@ammo=GetProtoItem(weap.AmmoPid);
		if(!(@ammo!=null))
		return false;  
		
		cr.TimeoutBase[(249)]=__FullSecond+((1)*__TimeMultiplier*60);
		CombatAttack(cr,target,weapon,(((((7))<<4)|((0)&0xF))&0xFF),ammo);
		this._SetOnAfterAttackEvent(cr,target);
		return true;
	} 
	
	void _SetOnAfterAttackEvent(Critter&sniper,Critter&target)
	{
		if(!target.IsPlayer())
		return;
		uint[]values={sniper.Id,target.Id};
		CreateTimeEvent(__FullSecond+60,"pattern_sniper@e_OnAfterAttack",values,false);
		
	} 
	
	void TryRunAway(Critter&sniper)
	{
		uint16 x=sniper.HexX;
		uint16 y=sniper.HexY;
		uint8 dir=sniper.Dir;
		if(!_GetRunAwayPoint(sniper,x,y,dir))
		return;
		AddWalkPlane(sniper,((50)*2),(76),0,x,y,dir,true,0);
	} 
	
	void _Idle(Critter&sniper)
	{
		
		if(sniper.IsDead())
		return;
		if(sniper.Mode[(510)]==0&&sniper.IsLife())
		{
			sniper.ModeBase[(510)]=1;
		}
		Critter@[]players;
		if(sniper.GetCritters(false,(0x01)|(0x10),players)>0)
		{
			uint[]distances(players.length());
			for(uint i=0;i<players.length();i++)
			{
				distances[i]=GetCrittersDistantion(sniper,players[i]);
				this.AttackPlayer(sniper,players[i]);
			}
			uint minInd=0;
			if(_GetFirstMinIndex(distances,minInd))
			{
				EraseAttackPlane(sniper,players[minInd]);
				
				this.AttackPlayer(sniper,(50)+10,players[minInd]);
			}
		}
		
	} 
	
	int _PlaneEnd(Critter&sniper,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		if(plane.Identifier==(76))
		{
			if(reason==(30))
			{
				this.HideSniper(sniper);
				sniper.StatBase[(97)]=0;
			}
			else
			{
				sniper.StatBase[(97)]++;
				
				if(sniper.StatBase[(97)]<9&&sniper.StatBase[(97)]>6)
				{
					TryRunAway(sniper);
				}
				if(sniper.StatBase[(97)]<7)
				{
					Map@map=sniper.GetMap();
					if((@map!=null))
					{
						if(GetFreeHex(map,4,plane.Walk_HexX,plane.Walk_HexY))
						{
							return(2);
						}
						
					}
				}
			}
		}
		return(0);
	} 
	
	void HideSniper(Critter&sniper)
	{
		sniper.ModeBase[(510)]=1;
		sniper.ErasePlane((1),true);
	}
	
	void SetEvents(Critter&cr)
	{
		cr.SetEvent((15),"_SniperAttack");
		cr.SetEvent((36),"_SniperPlaneEnd");
		cr.SetEvent((35),"_SniperPlaneBegin");
		cr.SetEvent((0),"_SniperIdle");
		cr.SetEvent((18),"_SniperMessage");
		cr.SetEvent((4),"_SniperShowCritter");
		cr.SetEvent((16),"_SniperAttacked");
		cr.SetEvent((2),"_SniperDead");
	}
	
	bool _HaveToRun(Critter&sniper,Critter&player)
	{ 
		
		if(player.IsLife()&&!player.IsKnockout())
		{
			uint8 mode=8;
			ProtoItem@weapon=sniper.GetSlotProto((1),mode);
			if((@weapon!=null))
			{
				if(weapon.Type==(3))
				{
					if(player.Stat[(72)]>30&&
					sniper.Stat[(75)]<int(((((mode)&0xF))==0?weapon.Weapon_ApCost_0:((((mode)&0xF))==1?weapon.Weapon_ApCost_1:((((mode)&0xF))==2?weapon.Weapon_ApCost_2:0))))&&
					player.Stat[(7)]>player.Stat[(72)])
					{
						return true;
					}
					else
					{
						if(sniper.Stat[(72)]>30&&
						sniper.Stat[(7)]>sniper.Stat[(72)])
						{
							return true;
						}
						else
						{
							return false;
						}
						
					}
				}
			}
			
		}
		
		if(sniper.GetCritters(false,(0x01)|(0x10),null)>0)
		return true;
		
		Map@map=sniper.GetMap();
		if(!(@map!=null))
		return false;
		
		return map.GetCrittersHex(sniper.HexX,sniper.HexY,(25),(0x01)|(0x10),null)>0;
	}
	
} 

SniperPattern pattern;   

void SetSniperStats(Critter&cr,uint8 lvl)
{
	lvl=(((lvl)>((4)-1))?((4)-1):(((lvl)<(0))?(0):(lvl)));
	if(lvl<1)
	return;
	if(lvl>2)
	cr.PerkBase[(325)]=1;
	cr.PerkBase[(315)]=1;
	if(lvl>2)
	cr.PerkBase[(322)]=1;
	cr.PerkBase[(305)]=lvl;
	cr.PerkBase[(407)]=1;
	cr.PerkBase[(398)]=1;
	if(lvl>3)
	cr.PerkBase[(306)]=1;
	cr.PerkBase[(316)]=1;
	
	cr.StatBase[(6)]=10;
	cr.StatBase[(1)]=(sniperStats_[(((lvl<(4))?lvl:0)*10)+5]);
	cr.StatBase[(7)]=(sniperStats_[(((lvl<(4))?lvl:0)*10)+9]);
	cr.StatBase[(8)]=(sniperStats_[(((lvl<(4))?lvl:0)*10)+8]);
	cr.StatBase[(72)]=(sniperStats_[(((lvl<(4))?lvl:0)*10)+9]);
	
	for(int i=(23);i<=(31);i++)
	{
		if(i!=(28))
		{
			cr.StatBase[i]=(Random(sniperStats_[(((lvl<(4))?lvl:0)*10)+6],sniperStats_[(((lvl<(4))?lvl:0)*10)+7]));
		}
	}
	
	cr.SkillBase[(200)]=(Random(sniperStats_[(((lvl<(4))?lvl:0)*10)+1],sniperStats_[(((lvl<(4))?lvl:0)*10)+2]));
	cr.SkillBase[(208)]=(Random(sniperStats_[(((lvl<(4))?lvl:0)*10)+3],sniperStats_[(((lvl<(4))?lvl:0)*10)+4]));
}

void _SniperInit(Critter&cr,bool firstTime)
{
	_CritterInit(cr,firstTime);
}

void _SniperDead(Critter&cr,Critter@killer)
{
	pattern._Dead(cr,killer);
}

void _SniperShowCritter(Critter&cr,Critter&showCrit)
{
	pattern._ShowCritter(cr,showCrit);
} 

int _SniperPlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return pattern._PlaneBegin(cr,plane,reason,someCr,someItem);
} 

void _SniperMessage(Critter&sniper,Critter&fromCr,int message,int value)
{
	pattern._Message(sniper,fromCr,message,value);
} 

bool _SniperAttacked(Critter&sniper,Critter&attacker)
{
	return pattern._Attacked(sniper,attacker);
} 

bool _SniperAttack(Critter&cr,Critter&target)
{
	return pattern._Attack(cr,target);
} 

void _SniperIdle(Critter&sniper)
{
	pattern._Idle(sniper);
} 

int _SniperPlaneEnd(Critter&sniper,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return pattern._PlaneEnd(sniper,plane,reason,someCr,someItem);
} 

uint e_OnAfterAttack(uint[]@values)
{
	
	if(!(@values!=null))
	return 0;
	if(values.length()<2)
	return 0;
	
	Critter@sniper=GetCritter(values[0]);
	Critter@target=GetCritter(values[1]);
	if(!(@sniper!=null)||!(@target!=null))
	return 0;
	
	bool run=pattern._HaveToRun(sniper,target);
	
	if(run)
	{
		pattern.TryRunAway(sniper);
		
	}
	
	return 0;
}

bool _GetRunAwayPoint(Critter&sniper,uint16&x,uint16&y,uint8&dir)
{
	
	Map@map=sniper.GetMap();
	if(!(@map!=null))
	return false;
	
	uint[]enemies(6);
	for(uint i=0;i<enemies.length();i++)
	{
		x=sniper.HexX;
		y=sniper.HexY;
		map.MoveHexByDir(x,y,i,(35));
		enemies[i]=map.GetCrittersPath(sniper.HexX,sniper.HexY,x,y,30,(35),(0x01)|(0x10),null);
		
	}
	
	uint min=0;
	uint max=0;
	if(!_GetLimits(enemies,min,max))
	return false;  
	
	uint[]safeDirs;
	for(uint d=0;d<enemies.length()&&d<6;d++)
	if(enemies[d]==min)
	safeDirs.insertLast(d);
	
	uint[]distances(safeDirs.length());
	for(uint i=0;i<safeDirs.length();i++)
	{
		
		x=sniper.HexX;
		y=sniper.HexY;
		map.MoveHexByDir(x,y,safeDirs[i],(35));
		distances[i]=GetDistantion(sniper.HexX,sniper.HexY,x,y);
	}
	
	if(!_GetRandomMaxIndex(distances,max))
	return false;
	
	x=sniper.HexX;
	y=sniper.HexY;
	map.MoveHexByDir(x,y,safeDirs[max],(35));
	dir=GetDirection(x,y,sniper.HexX,sniper.HexY);
	
	return GetFreeHex(map,4,x,y);
} 

void testSniper(Critter&cr,int lvl,int team,int bag)
{
	int[]params={(107),bag,(106),team};
	Critter@npc=cr.GetMap().AddNpc(222,cr.HexX-5,cr.HexY-5,0,params,null,null);
	SetSniperStats(npc,lvl);
	pattern.SetEvents(npc);
}  

void dmg(Critter&cr,int lvl,int team,int)
{
	for(uint i=(__DamageBegin);i<=(__DamageEnd);i++)
	{
		cr.DamageBase[i]=0;
	}
}
