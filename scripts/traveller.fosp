

shared class Serializator
{
	uint8[]Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
	
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer(uint size)
	{
		if(size<=BufSize)
		return;
		if(BufSize==0)
		BufSize=1;
		while(size>BufSize)
		BufSize*=2;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		
		bool result=SetAnyData(name,Array,DataSize);    
		
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		
		if(not GetAnyData(name,Array))
		return false;    
		
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator&SetCurPos(uint pos)
	{
		GrowBuffer(pos);
		CurPos=pos;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Fill(uint8 value,uint length)
	{
		GrowBuffer(CurPos+length);
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string&value)
	{
		uint len=value.rawLength();
		GrowBuffer(CurPos+len+1);
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Set(const Critter&cr)
	{
		GrowBuffer(CurPos+4);
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const Item&item)
	{
		GrowBuffer(CurPos+4);
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator&Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator&Get(int64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(bool[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(string[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	} 
	
	Serializator&Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator&Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
};                   

import string DateTimeToString(uint gameTime)from"time";       

void SetTraveller(uint crId,bool isTransit,uint entireNum,uint timeWaitLoc,uint timeWaitEnc,uint16[]locPids,bool visibleEncounters)
{
	Critter@cr=GetCritter(crId);
	if(!(@cr!=null))
	return;
	cr.ModeBase[(518)]=1;
	
	Traveller@t=Traveller(crId);
	t.TravelType=(isTransit?(0):(1));
	t.EntireTo=entireNum;
	t.TimeWaitLocation=timeWaitLoc;
	t.TimeWaitEncounter=timeWaitEnc;
	t.VisibleEncounters=visibleEncounters;
	for(uint i=0,l=locPids.length();i<l;i++)
	{
		t.AddLocPid(locPids[i]);
	}
	t.Save();
	if((@cr.GetMap()!=null))
	{
		t.SheduleChooseLocation();
		t.SheduleTravel(true);
	}
	if(t.TravelType==(1))
	{
		cr.SetEvent((41),"_GlobalInvite");
		cr.SetEvent((40),"_GlobalProcess");
	}
}

void CancelTraveller(uint crId)
{
	Traveller@ti=Traveller(crId);
	ti.Erase();
	Critter@cr=GetCritter(crId);
	if(!(@cr!=null))
	return;
	if(cr.GetTimeEvents((11),null,null,null)!=0)
	cr.EraseTimeEvents((11));
	if(cr.GetTimeEvents((12),null,null,null)!=0)
	cr.EraseTimeEvents((12));
}

class Traveller
{
	Traveller(uint crId)
	{
		this.CritterId=crId;
	}
	
	uint CritterId;
	uint8 TravelType;
	uint MapIdTo;
	uint EntireTo;
	uint TimeWaitLocation;
	uint TimeWaitEncounter;
	bool VisibleEncounters;
	uint TimeLastStart;
	uint TimeNextRoute;
	uint16[]LocationPids;
	uint[]Followers;
	
	void AddLocPid(uint16 locPid)
	{
		for(uint i=0,l=this.LocationPids.length();i<l;i++)
		{
			if(locPid==this.LocationPids[i])
			return;
		}
		this.LocationPids.insertLast(locPid);
	}
	
	void AddFollower(uint crId)
	{
		for(uint i=0,l=this.Followers.length();i<l;i++)
		{
			if(crId==this.Followers[i])
			return;
		}
		this.Followers.insertLast(crId);
		this.Save();
	}  
	
	void Save()
	{
		Serializator save;
		save.Set(this.CritterId);
		save.Set(this.TravelType);
		save.Set(this.MapIdTo);
		save.Set(this.EntireTo);
		save.Set(this.TimeWaitLocation);
		save.Set(this.TimeWaitEncounter);
		save.Set(this.VisibleEncounters);
		save.Set(this.TimeLastStart);
		save.Set(this.TimeNextRoute);
		save.Set(this.LocationPids);
		save.Set(this.Followers);
		save.Save(("Traveller_"+this.CritterId));
	}
	
	void Load()
	{
		Serializator load;
		if(!load.Load(("Traveller_"+this.CritterId)))
		return;
		load.Get(this.CritterId);
		load.Get(this.TravelType);
		load.Get(this.MapIdTo);
		load.Get(this.EntireTo);
		load.Get(this.TimeWaitLocation);
		load.Get(this.TimeWaitEncounter);
		load.Get(this.VisibleEncounters);
		load.Get(this.TimeLastStart);
		load.Get(this.TimeNextRoute);
		load.Get(this.LocationPids);
		load.Get(this.Followers);
	}
	
	void Erase()
	{
		string key=("Traveller_"+this.CritterId);
		if(IsAnyData(key))
		EraseAnyData(key);
	}
	
	Critter@GetTraveller()
	{
		if(this.CritterId==0)
		return null;
		return GetCritter(this.CritterId);
	} 
	
	bool TryFoundNewLocation()
	{
		int tries=20;
		uint idx=0;
		uint len=this.LocationPids.length();
		uint maps=0;
		if(len==0)
		return false;
		Critter@cr=this.GetTraveller();
		if(!(@cr!=null))
		return false;
		uint mapId=0;
		Map@mapCr=cr.GetMap();
		if((@mapCr!=null))
		mapId=mapCr.Id;
		while(tries>0)
		{
			idx=Random(0,len-1);
			Location@[]locations;
			GetAllLocations(this.LocationPids[idx],locations);
			if(locations.length()>0)
			{
				idx=Random(0,locations.length()-1);
				Location@loc=locations[idx];
				if((@loc!=null))
				{
					maps=loc.GetMapCount();
					for(uint i=0;i<maps;i++)
					{
						Map@map=loc.GetMapByIndex(i);
						if((@map!=null)&&(map.CountEntire(this.EntireTo)>0)&&map.Id!=mapId)
						{
							;
							this.MapIdTo=map.Id;
							this.Save();
							return true;
						}
					}
				}
			}
			tries--;
		}
		;
		return false;
	}
	
	bool TransitToLocation()
	{
		Critter@cr=this.GetTraveller();
		if(!(@cr!=null)||this.MapIdTo==0)
		return false;
		Map@map=GetMap(this.MapIdTo);
		if(!(@map!=null)||map.CountEntire(this.EntireTo)==0)
		return false;
		if(cr.TransitToMap(this.MapIdTo,this.EntireTo))
		{
			cr.SetHomePos(cr.HexX,cr.HexY,cr.Dir);
			return true;
		}
		return false;
	}  
	
	bool BeginTravelToLocation()
	{
		Critter@cr=this.GetTraveller();
		if(!(@cr!=null))
		return false;
		Map@map=cr.GetMap();
		if(!(@map!=null))
		return false;
		Critter@[]grp;
		uint[]confirmedIds;
		grp.insertLast(@cr);
		uint ch=cr.Stat[(3)];
		for(uint i=0,l=this.Followers.length();i<l&&confirmedIds.length()<ch;i++)
		{
			Critter@follower=GetCritter(this.Followers[i]);
			if((@follower!=null)&&follower.IsLife()&&(@follower.GetMap()!=null)&&(follower.GetMap().Id==map.Id)&&(GetCrittersDistantion(cr,follower)<=(10)))
			{
				grp.insertLast(@follower);
				confirmedIds.insertLast(follower.Id);
			}
		}
		this.Followers.resize(0);
		for(uint i=0,l=confirmedIds.length();i<l;i++)
		{
			this.Followers.insertLast(confirmedIds[i]);
		}
		cr.TransitToGlobal(grp);
		this.TimeLastStart=__FullSecond;
		this.Save();
		return true;
	}
	
	void SheduleChooseLocation()
	{
		Critter@cr=this.GetTraveller();
		if(!(@cr!=null))
		return;
		if(cr.GetTimeEvents((11),null,null,null)==0)
		cr.AddTimeEvent("cte_ChooseTravelPoint",0,(11));
	}
	
	void SheduleTravel(bool fromLoc)
	{
		Critter@cr=this.GetTraveller();
		if(!(@cr!=null))
		return;
		if(fromLoc&&cr.GetTimeEvents((17),null,null,null)!=0)
		cr.EraseTimeEvents((17));
		if(cr.GetTimeEvents((12),null,null,null)==0)
		{
			cr.AddTimeEvent("cte_Travel",(fromLoc?this.TimeWaitLocation:this.TimeWaitEncounter),(12));
			this.TimeNextRoute=__FullSecond+(fromLoc?this.TimeWaitLocation:this.TimeWaitEncounter);
			;
		}
		this.Save();
	}  
	
	bool ValidateRoute(float&worldX,float&worldY)
	{
		if(this.MapIdTo==0)
		return false;
		Map@map=GetMap(this.MapIdTo);
		if(!(@map!=null))
		return false;
		Location@loc=map.GetLocation();
		if(!(@loc!=null))
		return false;
		worldX=loc.WorldX;
		;
		worldY=loc.WorldY;
		return true;
	} 
	
	void SetCheck()
	{
		Critter@cr=this.GetTraveller();
		if(!(@cr!=null))
		return;
		uint[]indexes;
		if(cr.GetTimeEvents((17),indexes,null,null)==0)
		{
			cr.AddTimeEvent("cte_Check",(7*24*60*60),(17));
		}
		else
		{ 
			
		}
	}
}

Traveller@TravellerFromCritter(uint crId)
{
	string key=("Traveller_"+crId);
	if(!IsAnyData(key))
	return null;
	Traveller@t=Traveller(crId);
	t.Load();
	return t;
} 

uint cte_Travel(Critter&cr,int identifier,uint&rate)
{
	if(!cr.IsNoPlanes()||!(@cr.GetMap()!=null))
	return(((10)*__TimeMultiplier*60));
	Traveller@t=TravellerFromCritter(cr.Id);
	;
	if((@t!=null))
	{
		if(t.TravelType==(0))
		{
			if(!t.TransitToLocation())
			{
				;
				return(((10)*__TimeMultiplier*60));
			}
			else
			{
				t.SheduleChooseLocation();
				t.SheduleTravel(true);
			}
		}
		else
		{
			if(!t.BeginTravelToLocation())
			{
				;
				return(((10)*__TimeMultiplier*60));
			}
			else
			{
				t.SetCheck();
			}
		}
	}
	return 0;
}  

uint cte_Check(Critter&cr,int identifier,uint&rate)
{
	Map@map=cr.GetMap();
	if((@map!=null)&&(@map.GetLocation()!=null)&&!map.GetLocation().AutoGarbage)
	{
		return 0;
	}
	Traveller@t=TravellerFromCritter(cr.Id);
	if((@t!=null))
	{
		if(!t.TransitToLocation())
		{
			;
			return(((10)*__TimeMultiplier*60));
		}
		else
		{
			t.Followers.resize(0);
			t.Save();
			t.SheduleChooseLocation();
			t.SheduleTravel(true);
		}
	}
	return 0;
} 

uint cte_ChooseTravelPoint(Critter&cr,int identifier,uint&rate)
{
	;
	Traveller@t=TravellerFromCritter(cr.Id);
	if((@t!=null))
	{
		if(!t.TryFoundNewLocation())
		{
			;
			return(((10)*__TimeMultiplier*60));
		}
	}
	return 0;
}

uint cte_ShowLoc(Critter&cr,int identifier,uint&rate)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		Location@loc=map.GetLocation();
		if((@loc!=null)&&!loc.Visible)
		{
			loc.Visible=true;
			return 0;
		}
	}
	return(60);
} 

bool _GlobalProcess(Critter&cr,int type,Item@car,float&x,float&y,float&toX,float&toY,float&speed,uint&encounterDescriptor,bool&waitForAnswer)
{
	
	Traveller@t=TravellerFromCritter(cr.Id);
	if(encounterDescriptor!=0)
	{
		return false;
	}
	if((@t!=null)&&type!=(0))
	{
		if(t.ValidateRoute(toX,toY))
		{
			if(toX==x&&toY==y)
			{
				if(cr.TransitToMap(t.MapIdTo,t.EntireTo,true))
				{
					cr.SetHomePos(cr.HexX,cr.HexY,cr.Dir);
					t.Followers.resize(0);
					t.Save();
					t.SheduleChooseLocation();
					t.SheduleTravel(true);
					
					uint[]indexes;
					if(cr.GetTimeEvents((17),indexes,null,null)!=0)
					cr.EraseTimeEvents((17));
					return true;
				}
			}
			else
			{
				speed=2*(2.4f);
				return true;
			}
		}
		else
		{
			t.SheduleChooseLocation();
		}
	}
	waitForAnswer=false;
	return false;
}

bool _GlobalInvite(Critter&cr,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir)
{
	;
	Traveller@t=TravellerFromCritter(cr.Id);
	if((@t!=null))
	{
		t.SheduleTravel(false);
		if(cr.GetTimeEvents((18),null,null,null)==0)
		{
			cr.AddTimeEvent("cte_ShowLoc",(60),(18));
		}
	}
	return false;
} 

void r_AddFollower(Critter&player,Critter@npc)
{
	if(!(@npc!=null))
	return;
	Traveller@t=TravellerFromCritter(npc.Id);
	if(!(@t!=null))
	return;
	if((@t!=null))
	{
		t.AddFollower(player.Id);
	}
} 

bool d_OnEncounter(Critter&player,Critter@npc)
{
	if(!(@npc!=null))
	return false;
	Traveller@t=TravellerFromCritter(npc.Id);
	if((@t!=null))
	{
		Map@map=npc.GetMap();
		if(!(@map!=null))
		return false;
		Location@loc=map.GetLocation();
		if(!(@loc!=null))
		return false;
		return loc.AutoGarbage;
	}
	return false;
}

bool d_NotOnEncounter(Critter&player,Critter@npc)
{
	if(!(@npc!=null))
	return false;
	Traveller@t=TravellerFromCritter(npc.Id);
	if((@t!=null))
	{
		Map@map=npc.GetMap();
		if(!(@map!=null))
		return false;
		Location@loc=map.GetLocation();
		if(!(@loc!=null))
		return false;
		return!loc.AutoGarbage;
	}
	return false;
}

void r_BeginTravel(Critter&player,Critter@npc)
{
	if(!(@npc!=null))
	return;
	Traveller@t=TravellerFromCritter(npc.Id);
	if((@t!=null))
	{
		if(t.BeginTravelToLocation())
		t.SetCheck();
	}
} 

void dlg_WhereAndWhen(Critter&player,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	if(!(@npc!=null))
	return;
	Traveller@t=TravellerFromCritter(npc.Id);
	if(!(@t!=null))
	return;
	lexems="";
	if(t.MapIdTo!=0)
	{
		Map@map=GetMap(t.MapIdTo);
		if((@map!=null))
		{
			Location@loc=map.GetLocation();
			if((@loc!=null))
			lexems="$where@msg GM "+((loc.GetProtoId()+100)*1000)+"@";
		}
	}
	if(t.TimeNextRoute!=0)
	{
		lexems+="$when"+DateTimeToString(t.TimeNextRoute);
	}
}
