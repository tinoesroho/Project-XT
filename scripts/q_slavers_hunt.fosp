

import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";  

class EncSpawnHexDescr
{
	uint HexX;
	uint HexY;
	
	EncSpawnHexDescr(uint hX,uint hY)
	{
		this.HexX=hX;
		this.HexY=hY;
	}
	
	int[]SlaverTypes;
	
	void PushSlaverType(int sType)
	{
		
		if(this.CheckSTypeAllow(sType))
		{
			return;
		}
		
		this.SlaverTypes.insertLast(sType);
		
	}
	
	bool CheckSTypeAllow(int sType)
	{
		for(uint i=0;i<this.SlaverTypes.length();i++)
		{
			if(this.SlaverTypes[i]==sType)
			{
				return true;
			}
		}
		return false;
	}
} 

class EncSlaversDescr
{
	uint MapPid;
	EncSpawnHexDescr[]Hexes;
	
	EncSlaversDescr()
	{}
}

EncSlaversDescr@GetEncDescr(uint mapPid)
{
	switch(mapPid)
	{
		case(106):
		return Desert06Enc();
		case(111):
		return Desert11Enc();
		case(112):
		return Desert12Enc();
		default:
		break;
	}
	return null;
}   

EncSlaversDescr@Desert06Enc()
{
	EncSlaversDescr eDescr=EncSlaversDescr();
	eDescr.MapPid=(106);
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(60,38));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(71,43));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(75,43));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(72,44));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(42,58));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(41,65));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(46,63));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(29,53));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(32,66));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(30,45));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(39,42));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(110,74));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	return eDescr;
}

EncSlaversDescr@Desert11Enc()
{
	EncSlaversDescr eDescr=EncSlaversDescr();
	eDescr.MapPid=(111);
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(59,42));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(57,47));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(65,41));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(64,49));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(39,45));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(41,46));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(41,53));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(84,62));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(97,57));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(98,53));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	return eDescr;
}

EncSlaversDescr@Desert12Enc()
{
	EncSlaversDescr eDescr=EncSlaversDescr();
	eDescr.MapPid=(112);
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(70,22));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(52,34));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(65,32));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(72,50));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(73,49));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(84,30));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(88,33));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(92,33));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(102,44));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(112,55));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((4));
	
	eDescr.Hexes.insertLast(EncSpawnHexDescr(103,44));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((1));
	eDescr.Hexes[eDescr.Hexes.length()-1].PushSlaverType((2));
	return eDescr;
}

import void InviteToEncounter(Critter@[]&group,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir)from"worldmap";

bool _CheckRightGlobalZone(uint wX,uint wY)
{
	if(wX<318||wX>542)
	{
		return false;
	}
	if(wY<174||wY>325)
	{
		return false;
	}
	return true; 
	
}

bool e_OnPlayerInvite(Critter&cr,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir) 

{
	Critter@[]@group=cr.GetGlobalGroup();
	
	InviteToEncounter(group,null,encounterDescriptor,combatMode,mapId,hexX,hexY,dir); 
	
	if(!cr.IsPlayer())
	{
		return true;
	}
	GameVar@qVar=GetLocalVar((4247),cr.Id);
	if(!(@qVar!=null))
	{
		return true;
	}
	if(qVar<1||qVar>21)
	{
		return true;
	}   
	
	bool noLoot=false;
	
	if(group.length()>1)
	{
		noLoot=true;
	} 
	
	Map@map=GetMap(mapId);
	int maxLvl=cr.StatBase[(77)];
	for(uint j=0;j<group.length();j++)
	{
		maxLvl=(group[j].StatBase[(77)]>maxLvl)?group[j].StatBase[(77)]:maxLvl;
	}
	if((@map!=null))
	{
		
		Location@loc=map.GetLocation();
		if(!(@loc!=null))
		{
			return true;
		} 
		
		EncSlaversDescr@d=GetEncDescr(loc.GetProtoId());
		
		if((@d!=null))
		{
			if(!_CheckRightGlobalZone(loc.WorldX,loc.WorldY))
			{
				return true;  
				
			}
			for(uint i=0;i<(((group.length()+uint(Random(2,8)))>(d.Hexes.length()))?(d.Hexes.length()):(((group.length()+uint(Random(2,8)))<(4))?(4):(group.length()+uint(Random(2,8)))));i++)
			{
				Critter@slaver=_GetSlaver(map,d.Hexes[i],maxLvl,noLoot);
			}
			
			cr.SayMsg((11),(0),(2700));
		}
	}
	
	return true;
}

Critter@_GetSlaver(Map@map,EncSpawnHexDescr hDesc,uint crLvl,bool noLoot)
{
	uint slaverPid=(260);
	uint type=(1);
	
	if(hDesc.CheckSTypeAllow((3)))
	{
		slaverPid=(260);
		type=(3);
	}
	if(hDesc.CheckSTypeAllow((2)))
	{
		slaverPid=(23);
		type=(2);
	}
	if(hDesc.CheckSTypeAllow((4)))
	{
		slaverPid=(359);
		type=(4);
	}
	
	int[]params=
	{
		(104),slaverPid==(23)?(4212):(4211),
		(107),type==(4)?(167)+Random(0,1):(147),
		(106),(21),(105),(124),(77),crLvl+Random(4,8)
	};
	Critter@slaver=map.AddNpc(slaverPid,hDesc.HexX,hDesc.HexY,Random(1,5),params,null,"encounter_npc@_NpcInit");
	if(not(@slaver!=null))
	return null; 
	
	switch(uint(crLvl/5))
	{
		case 2:
		slaver.SkillBase[(200)]=120;
		break;
		case 3:
		slaver.SkillBase[(200)]=Random(150,200);
		break;
		case 4:
		slaver.SkillBase[(200)]=250;
		break;
		case 5:
		slaver.SkillBase[(200)]=300;
		break;
		default:
		break;
	}
	if(noLoot)
	{    
		
		slaver.ModeBase[(512)]=1;
		slaver.ModeBase[(511)]=1;
		slaver.StatBase[(66)]=Random(1,3);
	}
	slaver.StatBase[(84)]=-1;
	slaver.StatBase[(89)]=type;
	slaver.ShowCritterDist1=Random(10,30);
	
	slaver.SetEvent((18),"_SlaverMessage");
	
	switch(type)
	{
		case(2):
		slaver.AddItem((40),Random(4,8));
		
		slaver.SetEvent((18),"_SlaverHealerMessage");
		slaver.SetEvent((36),"_SlaverHealerPlaneEnd");
		slaver.SetEvent((26),"_SlaverHealerSmthDead");
		slaver.ModeBase[(517)]=1;
		slaver.SkillBase[(200)]=150;  
		
		break;
		case(4):
		slaver.ShowCritterDist1=50;
		slaver.SkillBase[(200)]=300;
		slaver.ModeBase[(510)]=1;
		default:
		break;
		
	}
	
	slaver.SetEvent((5),"_SlaverShowCritterDist1");
	slaver.SetEvent((16),"_SlaverAttacked");
	slaver.SetEvent((2),"_SlaverDead");
	
	return slaver;
} 

void _SlaverDead(Critter&cr,Critter@killer)
{
	if(!(@killer!=null))
	{
		return;
	}
	
	cr.SendMessage((14),killer.Id,(2));
	
	if(!killer.IsPlayer())
	{
		return;
	}
	
	GameVar@qVar=GetLocalVar((4247),killer.Id);
	if(!(@qVar!=null))
	{
		return;
	}
	
	if(qVar<1||qVar>20)
	{
		return;
	}
	
	GameVar@sVar=GetLocalVar((4246),killer.Id);
	if(!(@sVar!=null))
	{
		return;
	}
	qVar=qVar+1;
	switch(qVar.GetValue())
	{
		case 2:
		sVar=2;
		break;
		case 6:
		sVar=3;
		break;
		case 11:
		sVar=4;
		break;
		case 16:
		sVar=5;
		break;
		case 21:
		sVar=6;
		
		killer.SetEvent((41),"");
		break;
		default:
		
		return;
	}
}  

void _SlaverShowCritterDist1(Critter&cr,Critter&showCrit)
{
	if(showCrit.IsPlayer())
	{ 
		
		if(!cr.CheckEnemyInStack(showCrit.Id))
		{
			cr.AddEnemyInStack(showCrit.Id);
			AddAttackPlane(cr,(50),showCrit.Id);
			cr.SayMsg((2),(1),(1000000000+(cr.Stat[(104)])*100000+((1))));
			
		}
		
	}
}  

void _SlaverHealerSmthDead(Critter&cr,Critter&fromCr,Critter@killer)
{
	if(fromCr.StatBase[(106)]==(21))
	{
		NpcPlane@[]planes;
		if(cr.GetPlanes((11),fromCr.Id,planes)>0)
		{
			for(uint i=0;i<planes.length();i++)
			{
				if(planes[i].Identifier==(11)&&planes[i].IdentifierExt==fromCr.Id)
				{
					cr.ErasePlane(i);
					return;
				}
			}
		}
	}
}

void _WaitForHeal(Critter&cr)
{
	
	return;
} 

int _SlaverHealerPlaneEnd(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Identifier==(11)&&reason==(30))
	{
		Critter@toCr=GetCritter(plane.IdentifierExt);
		if((@toCr!=null))
		{
			
			if(toCr.Stat[(72)]*2>toCr.Stat[(7)])
			return(0);
			
			cr.SetDir(GetDirection(cr.HexX,cr.HexY,toCr.HexX,toCr.HexY));
			
			if(GetCrittersDistantion(cr,toCr)>1)
			{
				cr.SayMsg(2*Random(1,2),(1),(1000000000+(cr.Stat[(104)])*100000+((2))));
				AddWalkPlane(cr,(101),(11),toCr.Id,toCr.HexX,toCr.HexY,GetDirection(cr.HexX,cr.HexY,toCr.HexX,toCr.HexY),true,1);
				
				AddMiscPlane(toCr,(102),__FullSecond+60,"q_slavers_hunt@_WaitForHeal");
				
				return(0);
			}
			
			Item@item=cr.GetItem((40),-1);
			if((@item!=null))
			{
				UseDrugOn(cr,toCr,item);
				cr.Animate(0,(28),null,true,true);
			}
		}
	}
	return(0);
} 

void _SlaverHealerMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	if(message==(10)&&fromCr.StatBase[(106)]==(21))
	{
		
		if(cr.GetPlanes((11),null)!=0)
		{
			return;
		}
		
		if(cr.CountItem((40))==0)
		{
			return;
		} 
		
		if(cr.Id==fromCr.Id)
		{
			return;
		}
		
		AddWalkPlane(cr,(101),(11),fromCr.Id,fromCr.HexX,fromCr.HexY,GetDirection(cr.HexX,cr.HexY,fromCr.HexX,fromCr.HexY),true,1);
		return;
	}
	
}   

void _SlaverMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	if(message==(13)||message==(14))
	{
		if(!cr.CheckEnemyInStack(value))
		{
			cr.AddEnemyInStack(value);
			AddAttackPlane(cr,0,value);
		}
	}
} 

bool _SlaverAttacked(Critter&cr,Critter&attacker)
{   
	
	cr.SendMessage((10),cr.Id,(2));
	cr.SendMessage((13),attacker.Id,(0));   
	
	return false;
} 

void e_SlaverShowCritter(Critter&cr,Critter&showCrit)
{} 

void GG(Critter&cr,int crId,int val,int)
{
	cr.SetEvent((41),"e_OnPlayerInvite");
	
	GameVar@qVar=GetLocalVar((4247),cr.Id);
	qVar=1;
	_AddElizeSlaversMap(cr);
} 

void _AddElizeSlaversMap(Critter&player)
{
	if(!player.IsPlayer())
	{
		return;
	} 
	
	Item@item=player.GetItem((343),-1);
	if((@item!=null))
	{
		if(item.Info==2)
		{
			return;
		}
	}
	
	GameVar@qVar=GetLocalVar((4247),player.Id);
	
	if(!(@qVar!=null))
	{
		return;
	}
	if(qVar<1||qVar>20)
	{
		return;
	}
	
	Item@map=player.AddItem((343),1);
	map.SetScript("q_slavers_hunt@_ElizeMapInit");
	map.Update();
} 

void _ElizeMapInit(Item&map,bool firstTime)
{
	
	map.Info=2;
	
	(map.Flags=(map.Flags)|((0x10000000)));
	
	map.SetEvent((2),"e_ElizeMapUse");
	
	map.Update();
} 

bool e_ElizeMapUse(Item&item,Critter&player,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(!player.IsPlayer())
	{
		return false;
	}
	GameVar@qVar=GetLocalVar((4247),player.Id);
	if(!(@qVar!=null))
	{
		return false;
	}
	if(qVar<1||qVar>21)
	{
		return false;
	}
	
	player.SayMsg((11),(0),(2701));
	
	player.SetEvent((41),"e_OnPlayerInvite");
	
	return true;
} 

void r_GetMap(Critter&player,Critter@cr)
{
	_AddElizeSlaversMap(player);
	player.SetEvent((41),"e_OnPlayerInvite");
}
