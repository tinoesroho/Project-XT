

import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs"; 

int DeadAllyCounter(Critter&cr)
{
	if(!(@cr.GetMap()!=null))
	return 0;
	
	if(cr.IsPlayer())
	return 0;
	
	if(cr.StatBase[(106)]==0)
	return 0;
	
	return cr.GetMap().GetData(cr.StatBase[(106)]);
	
}

void AddDeadAlly(Critter&cr)
{
	if(!(@cr.GetMap()!=null))
	return;
	
	if(cr.IsPlayer())
	return;
	
	if(cr.StatBase[(106)]==0)
	return;
	
	cr.GetMap().SetData(cr.StatBase[(106)],DeadAllyCounter(cr)+1);
}           

void SetMapMobsTemplate(Map&map,uint teamId,int aDist,int alRadius,int alNum,int hLvl,int locAlarm,int globAlarm,int fArmLvl)
{
	FighterPattern@fp=FighterPattern();
	fp.AttackDist=aDist;
	fp.AllyAssistRadius=alRadius;
	fp.AssistAlliesNum=alNum;
	fp.MustHealLvl=hLvl;
	fp.LocalAlarmDeads=locAlarm;
	fp.GlobalAlarmDeads=globAlarm;
	fp.ForceArmourLvl=fArmLvl;
	
	Critter@[]critters;
	map.GetCritters(0,(0x01)|(0x20),critters);
	
	for(uint i=0;i<critters.length();i++)
	{
		if(uint(critters[i].StatBase[(106)])!=teamId)
		continue;
		fp.InitPattern(critters[i]);
	}
	map.SetEvent((8),"e_OnMapCritterDead");
}

class FighterPattern
{
	FighterPattern()
	{} 
	
	int AttackDist;
	int AllyAssistRadius;
	int AssistAlliesNum;
	int MustHealLvl;
	int LocalAlarmDeads;
	int GlobalAlarmDeads;
	int ForceArmourLvl; 
	
	void InitPattern(Critter&cr)
	{
		cr.ShowCritterDist1=this.AttackDist;
		
		cr.StatBase[(95)]=this.AllyAssistRadius;
		cr.StatBase[(96)]=this.AssistAlliesNum;
		cr.StatBase[(97)]=this.MustHealLvl;
		cr.StatBase[(98)]=this.LocalAlarmDeads;
		cr.StatBase[(99)]=this.GlobalAlarmDeads;  
		
		_SetOnDeadEvents(cr);
		_SetOnAttackedEvents(cr);
		_SetSeeEnemyEvents(cr);
		_SetOnItemDroppedEvents(cr);
		_SetOnMessageEvents(cr);
		_SetOnIddleEvents(cr);
		
		ForceCritterArmour(cr);
	}
	
	void ForceCritterArmour(Critter&cr)
	{
		
		if(this.ForceArmourLvl>3&&Random(1,3)==1)
		{
			cr.PerkBase[(420)]=1;
			cr.StatBase[(0)]=10;
			cr.StatBase[(2)]=Random(9,10);
			DL("Terminator");
		}
		
		for(int i=(23);i<=(29);i++)
		{
			cr.StatBase[i]=Random(1,this.ForceArmourLvl)*20;
			cr.StatBase[i]=(((cr.StatBase[i])>(180))?(180):(((cr.StatBase[i])<(30))?(30):(cr.StatBase[i])));
		}
		
		cr.StatBase[(7)]=(((cr.StatBase[(7)]+this.ForceArmourLvl*30)>(250))?(250):(((cr.StatBase[(7)]+this.ForceArmourLvl*30)<(50))?(50):(cr.StatBase[(7)]+this.ForceArmourLvl*30)));
		cr.StatBase[(72)]=(((cr.StatBase[(72)]+this.ForceArmourLvl*30)>(250))?(250):(((cr.StatBase[(72)]+this.ForceArmourLvl*30)<(50))?(50):(cr.StatBase[(72)]+this.ForceArmourLvl*30)));  
		
	}
	
	void _SetOnAttackedEvents(Critter&cr)
	{
		cr.StatBase[(94)]=Random(1,5);
		cr.SetEvent((16),"e_CritterAttacked");
	}
	
	void _SetSeeEnemyEvents(Critter&cr)
	{
		cr.SetEvent((5),"e_ShowCritter1");
	}
	
	void _SetOnItemDroppedEvents(Critter&cr)
	{}
	
	void _SetOnDeadEvents(Critter&cr)
	{ 
		
	}
	
	void _SetOnMessageEvents(Critter&cr)
	{
		cr.SetEvent((18),"e_CritterMessage");
	}
	
	void _SetOnIddleEvents(Critter&cr)
	{} 
	
}

void e_OnMapCritterDead(Map&map,Critter&cr,Critter@killer)
{
	if(cr.IsPlayer())
	{
		if(map.GetCritters(0,(0x01)|(0x10),null)==0)
		{
			map.SetData(1,0);
			DL("All players dead");
		}
	}
	else
	{
		AddDeadAlly(cr);
		if(!(@killer!=null))
		return;
		if(!killer.IsPlayer())
		return;
		if(DeadAllyCounter(cr)>=cr.StatBase[(99)])
		{
			cr.SendMessage((17),killer.Id,(2));
			DL("Global alarm called"+DeadAllyCounter(cr)+"cr deads = _GlobalAlarmDeads"+cr.StatBase[(99)]);
			return;
		}
		if(DeadAllyCounter(cr)>=cr.StatBase[(98)])
		{
			cr.SendMessage((17),killer.Id,(0));
			DL("Local alarm called"+DeadAllyCounter(cr));
			return;
		}
	}
}

void e_ShowCritter1(Critter&cr,Critter&showCrit)
{
	
	if(!showCrit.IsPlayer())
	return; 
	
	if(cr.GetMap().GetData(1)>0)
	return;
	cr.GetMap().SetData(1,1); 
	
	if(!showCrit.IsLife())
	return;
	if(cr.CheckEnemyInStack(showCrit.Id))
	return;
	
	e_CritterMessage(cr,cr,(17),showCrit.Id);
	uint dist=GetCrittersDistantion(cr,showCrit);
	if(cr.ShowCritterDist1>=dist)
	{
		
		Map@map=cr.GetMap();
		if(!(@map!=null))
		return;
		
		Critter@[]critters;
		
		if(map.GetCrittersHex(cr.HexX,cr.HexY,cr.StatBase[(95)],(0x01)|(0x20),critters)==0)
		return;
		
		for(uint i=0;i<critters.length();i++)
		{
			if(i>=uint(cr.StatBase[(96)]))
			break;
			e_CritterMessage(critters[i],cr,(17),showCrit.Id);
		}
	}
}
bool e_CritterAttacked(Critter&cr,Critter&attacker)
{
	DL("try heal");
	if(cr.Stat[(72)]*100>cr.StatBase[(97)]*cr.Stat[(7)])
	{
		DL("Heal not needed");
		return false;
	}
	_TryHeal(cr);
	return false;
}
void e_CritterMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	switch(message)
	{
		case(17):
		if(_IsAlly(cr,fromCr))
		{
			if(!cr.IsLife())
			return;
			if(!(@GetCritter(value)!=null))
			return;
			if(!cr.CheckEnemyInStack(value))
			{
				cr.AddEnemyInStack(value);
				DL("Added enemy: "+value);
			}
			else
			{
				DL("Enemy already in stack: "+value);
			}
		}
		break;
		default:
		break;
	}
}    

bool _TryHeal(Critter&cr)
{
	if(!cr.IsLife())
	return false;
	if(cr.CountItem((144))==0&&Random(1,6)==1&&cr.StatBase[(94)]>1)
	{
		cr.AddItem((144),1);
		cr.StatBase[(94)]--;
		cr.StatBase[(94)]--;
	}
	if(cr.CountItem((144))>0)
	{
		Item@item=cr.GetItem((144),-1);
		UseDrugOn(cr,cr,item);
		cr.Animate(0,(28),null,true,true);
		DL("SuperStim used");
		return true;
	}
	if(cr.CountItem((40))==0&&Random(1,4)==1&&cr.StatBase[(94)]>0)
	{
		cr.AddItem((40),1);
		cr.StatBase[(94)]--;
	}
	if(cr.CountItem((40))>0)
	{
		Item@item=cr.GetItem((40),-1);
		UseDrugOn(cr,cr,item);
		cr.Animate(0,(28),null,true,true);
		DL("Stim used");
		return true;
	}
	DL("no Stim in bag");
	
	return false;
	
}

bool _IsAlly(Critter&cr1,Critter&cr2)
{
	return cr1.StatBase[(106)]!=0&&cr1.StatBase[(106)]==cr2.StatBase[(106)];
}
void DL(string msg)
{
	
}                                                                                                                                                     

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}

const uint16[]Pids_AllWeapon={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332),(11),(400),(13),(12),(389),(395),(350),(355),(387),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486),(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116),(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSmallGuns={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponPistols={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394)};
const uint16[]Pids_WeaponRifles={(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392)};
const uint16[]Pids_WeaponShotguns={(94),(385),(242),(268),(354)};
const uint16[]Pids_WeaponPistolMachineGun={(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponBigGuns={(11),(400),(13),(12),(389),(395),(350),(355),(387)};
const uint16[]Pids_WeaponEnergo={(16),(402),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397)};
const uint16[]Pids_WeaponLaser={(16),(402),(118),(401),(28),(120)};
const uint16[]Pids_WeaponPlasma={(24),(406),(15),(233)};
const uint16[]Pids_WeaponPulse={(396),(397)};
const uint16[]Pids_WeaponThrowing={(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponGrenade={(159),(25),(26),(27)};
const uint16[]Pids_WeaponThrowingOther={(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponMelee={(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116)};
const uint16[]Pids_WeaponCutting={(4),(236),(517),(383),(319),(522)};
const uint16[]Pids_WeaponPricking={(7),(280),(320)};
const uint16[]Pids_WeaponShock={(5),(20),(384),(6),(386),(115)};
const uint16[]Pids_WeaponElectric={(160),(399),(116)};
const uint16[]Pids_WeaponUnarmed={(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSpecial={(270),(393),(371),(372),(427),(489),(498),(290),(291),(518),(520),(530),(531),(421),(390)};

const uint16[]Pids_AllArmor={(74),(1),(379),(265),(2),(380),(240),(17),(381),(239),(3),(232),(348),(349),(113),(524)};
const uint16[]Pids_ArmorLight={(74),(1),(379),(265)};
const uint16[]Pids_ArmorMedium={(2),(380),(240),(17),(381),(239)};
const uint16[]Pids_ArmorHeavy={(3),(232),(348),(349)};
const uint16[]Pids_ArmorRobes={(113)};
const uint16[]Pids_ArmorSpecial={(524)};

const uint16[]Pids_AllAmmo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358),(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_Ammo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358)};
const uint16[]Pids_AmmoOther={(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_AmmoSpecial={(274)};

const uint16[]Pids_AllDrugs={(40),(48),(49),(109),(144),(260),(273),(525),(106),(124),(125),(310),(311),(469),(53),(87),(110),(259),(71),(81),(103),(378),(424)};
const uint16[]Pids_DrugsPreparations={(40),(48),(49),(109),(144),(260),(273),(525)};
const uint16[]Pids_DrugsAlcohol={(106),(124),(125),(310),(311),(469)};
const uint16[]Pids_Drugs={(53),(87),(110),(259)};
const uint16[]Pids_DrugsOther={(71),(81),(103),(378)};
const uint16[]Pids_DrugsSpecial={(334),(473),(480),(481),(482),(424)};

const uint16[]Pids_MiscExplosions={(51),(85),(544)};
const uint16[]Pids_MiscActiveExplosions={(206),(209),(545),(222)};
const uint16[]Pids_MiscPartsBasic={(98),(92),(127),(271),(272),(276),(277),(278),(284),(285),(286),(318),(416),(542),(532),(534),(475),(535),(536),(537),(538),(50),(449),(539),(541)};
const uint16[]Pids_MiscPartsSelfSpecial={(89),(222),(229),(307),(419),(454),(364),(422),(479),(488)};
const uint16[]Pids_MiscPartsSpecial={(55),(253),(254),(258),(269),(356),(377)};
const uint16[]Pids_MiscPartsBody={(114),(251),(281),(282),(321),(322),(323),(324),(429),(484),(485),(507)};
const uint16[]Pids_MiscAllTools={(75),(77),(84),(308),(410),(411),(412),(47),(91),(408),(409),(428),(440),(289),(297),(543)};
const uint16[]Pids_MiscToolsTech={(75),(77),(84),(308),(410),(411),(412)};
const uint16[]Pids_MiscToolsMediacal={(47),(91),(408),(409),(428),(440)};
const uint16[]Pids_MiscToolsOther={(289),(297),(543)};
const uint16[]Pids_MiscToolsSpecial={(52),(54),(59)};
const uint16[]Pids_MiscOther={(101),(117),(126),(226),(227),(262),(295),(314),(315),(316),(317),(325),(326),(436),(437)}; 

import bool AddAttackPlane(Critter&npc,uint priory,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priory,Critter&target,int minHp)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priory,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";                                                        

class TPlayerCard{
	
	uint Id;
	int8 AlertCount;
	int8 AlertType;
	int8 Time;
}; 

class TGuardCard{
	
	uint Id;
	uint Targer;
	uint Job;
	int8 Time;
}; 

class CGuardsManager
{
	
	TGuardCard[]Guards;
	TPlayerCard[]Players;  
	
	uint[]Observing;
	int8[]AlertCount;
	int8[]AlertType;
	int8[]TimeOut;    
	
	int TimerFlag; 
	
	int Dialog;  
	
	int PerceptionAdd; 
	
	int MaxAlert;  
	
	int AtackMinusHp;  
	
	int AtackTimeout; 
	
	int[]AlertPriority; 
	
	CGuardsManager()
	{
		Dialog=0;
		MaxAlert=(10);
		PerceptionAdd=(7);
		AtackMinusHp=(10);
		
		AlertPriority.resize((30));
		TimerFlag=0;
		AtackTimeout=0;
	} 
	
	int AddObserving(Critter@player)
	{
		int i=FindInArray(Observing,player.Id);
		if(i==-1)
		{
			int8 zero=0;
			Observing.insertLast(player.Id);
			AlertCount.insertLast(zero);
			AlertType.insertLast(zero);
			TimeOut.insertLast(zero);
			return Observing.length()-1;
		}
		else
		return i;
	} 
	
	void DelObserving(uint index)
	{
		Observing.removeAt(index);
		AlertCount.removeAt(index);
		AlertType.removeAt(index);
		TimeOut.removeAt(index);
	} 
	
	void DelObserving(Critter@player)
	{
		int i=FindInArray(Observing,player.Id);
		if(i!=-1)
		DelObserving(i);
	}  
	
	void GuardWarn(Critter@npc,Critter@bastard,int alertLevel)
	{
		if(alertLevel==0)
		return;
		
		string tmp=MaxAlert;
		
		if(alertLevel>MaxAlert)
		{
			npc.SayMsg((4),(1),(1000000000+(Dialog)*100000+(3)));
			int minhp=bastard.Stat[(72)]-AtackMinusHp;
			if(minhp<0)
			minhp=0;
			AddAttackPlane(npc,0,bastard,minhp);
		}
		else if(alertLevel>MaxAlert/2)
		{
			npc.SayMsg((2),(1),(1000000000+(Dialog)*100000+(2)));
			if(npc.IsNoPlanes())
			AddWalkPlane(npc,0,bastard.HexX,bastard.HexY,
			GetDirection(npc.HexX,npc.HexY,bastard.HexX,bastard.HexY),false,3);
		}
		else
		{
			
			npc.SayMsg((2),(1),(1000000000+(Dialog)*100000+(1)));
		}
	} 
	
	void GuardObserving(Critter@npc,bool modifyAlertCount)
	{
		uint myMap=npc.GetMapId();
		for(uint i=0;i<Observing.length();i++)
		{
			
			Critter@player=GetCritter(Observing[i]);
			if((@player!=null))
			{
				if((myMap!=player.GetMapId())||(player.Stat[(72)]<=0))
				{
					
					DelObserving(player);
					continue;
				}
				if(GetCrittersDistantion(npc,player)<uint(npc.Stat[(1)]+PerceptionAdd))
				if(GuardItemTest(player.GetItem(0,(1))))
				{
					
					if(modifyAlertCount&&(AlertCount[i]<MaxAlert*2))
					AlertCount[i]++;
					GuardWarn(npc,player,AlertCount[i]);
				}
				else
				{
					if(AlertCount[i]<=-MaxAlert)
					DelObserving(player);  
					
				} 
				
			}
			else
			{
				DelObserving(i);
				continue;
			}
		}
	} 
	
	bool GuardItemTest(Item@item)
	{
		if((@item!=null))
		if(item.GetType()==(3))
		{
			if(item.GetProtoId()==(383))
			return false;
			return true;
		}
		
		return false;
	}     
	
	void EventOnAddCritter(Critter&guard,Critter&player)
	{
		if(guard.Stat[(72)]<=0)
		return;
		if((not player.IsPlayer())||(player.Stat[(72)]<=0))
		return;
		
		if(GuardItemTest(player.GetItem(0,(1))))
		{
			int i=AddObserving(player);
			AlertType[i]=(25);
			
			if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
			GuardWarn(guard,player,i);
		}
	} 
	
	void EventOnRemoveCritter(Critter&guard,Critter&player)
	{
		if(guard.Stat[(72)]<=0)
		return;
		if(not player.IsPlayer())
		return;
		
		int idx=-1;
		if(FindInArray(Observing,player.Id,idx))
		if(AlertCount[idx]<=0)
		DelObserving(idx);
		
	} 
	
	void EventEndPlane(Critter&guard)
	{
		
		if(not guard.IsLife())
		return;
		if(guard.GetPlanes(null)>1)
		return;
		
		GuardObserving(guard,false);
	}  
	
	void EventOnMoveItem(Critter&guard,Critter&player,Item&item,uint8 fromSlot)
	{
		if(guard.Stat[(72)]<=0)
		return;
		if((not player.IsPlayer())||(player.Stat[(72)]<=0))
		return;
		
		Item@whatInHand=player.GetItem(0,(1));
		if(GuardItemTest(whatInHand))
		
		{
			
			if(GetCrittersDistantion(guard,player)<(__LookMinimum*2))
			if(whatInHand.GetProtoId()==(161)||whatInHand.GetProtoId()==(300))
			{
				
				guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(7)));
				return;
			}
			
			int index=AddObserving(player);
			AlertType[index]=(25);
			if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
			{
				AlertCount[index]++;
				GuardWarn(guard,player,AlertCount[index]);
			}
		}
		else
		{
			if(item.GetType()==(3)&&fromSlot==(1))
			if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
			
			{
				int i=FindInArray(Observing,player.Id);
				if(i!=-1)
				if((AlertCount[i]>MaxAlert)&&(AlertType[i]==(25)))
				{
					
					AlertCount[i]--;
					guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(4)));
				}
			}
		}
	} 
	
	void EventOnMessage(Critter&guard,Critter&player,int num,int val)
	{
		if(num==(13))
		{
			int index=AddObserving(player);
			AlertCount[index]=AlertCount[index]+MaxAlert;
			AlertType[index]=(23);
			
			AddAttackPlane(guard,0,player,__DeadHitPoints);
		}
	}   
	
	void EventOnUseItem(Critter&guard,Critter&player,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
	{
		if((not player.IsPlayer())||(player.Stat[(72)]<=0))
		return;
		if(guard.Stat[(72)]<=0)
		return;   
		
		if(GetCrittersDistantion(guard,player)<uint(guard.Stat[(1)]+PerceptionAdd))
		{
			uint16 itemType=item.GetType();
			switch(itemType)
			{
				case((2)):
				if(Present(item.GetProtoId(),Pids_DrugsAlcohol))
				{
					guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(5)));
					
					int index=AddObserving(player);
					AlertCount[index]++;
					AlertType[index]=(21);
					if(AlertCount[index]>MaxAlert)
					GuardWarn(guard,player,AlertCount[index]);
				}
				if(Present(item.GetProtoId(),Pids_Drugs))
				{
					guard.SayMsg((2),(1),(1000000000+(Dialog)*100000+(6)));
					
					int index=AddObserving(player);
					AlertCount[index]=AlertCount[index]+MaxAlert;
					AlertType[index]=(22);
					if(AlertCount[index]>MaxAlert)
					GuardWarn(guard,player,AlertCount[index]);
				}
				break;
			}
			if(Present(item.GetProtoId(),Pids_MiscExplosions)||item.GetProtoId()==(222))
			{
				player.SendMessage((13),player.Id,(2));
			}
		}
	} 
	
	void EventOnDropItem(Critter&guard,Critter&player,Item&item)
	{
		if(!player.IsPlayer()||!player.IsLife())
		return;
		if(Present(item.GetProtoId(),Pids_MiscActiveExplosions))
		{
			player.SendMessage((13),player.Id,(2));
		}
	}  
	
	void EventOnSmthAttack(Critter&guard,Critter&player,Critter&target)
	{
		if(not player.IsPlayer())
		return;
		if(guard.Stat[(72)]<=0)
		return;
		Item@weapon=player.GetItem(0,(1));
		if(not(@weapon!=null))
		return;
		
		bool isDead=
		(target.Stat[(72)]<__DeadHitPoints)and
		((target.Stat[(67)]==(0))||(target.Stat[(67)]==(1))||(target.Stat[(67)]==(2)));  
		
		if(GetCrittersDistantion(guard,player)<
		(uint(guard.Stat[(1)]+PerceptionAdd)*4))
		if(
		(weapon.GetProtoId()!=(161))
		and(
		Present(weapon.GetProtoId(),Pids_WeaponSmallGuns)or
		Present(weapon.GetProtoId(),Pids_WeaponBigGuns)or
		Present(weapon.GetProtoId(),Pids_WeaponEnergo))
		)
		{
			int index=AddObserving(player);
			AlertType[index]=(26);
			if((AlertCount[index]==0)&&(not isDead))
			{
				guard.SetDir(GetDirection(guard.HexX,guard.HexY,player.HexX,player.HexY));
				guard.SayMsg((4),(1),(1000000000+(Dialog)*100000+(8)));
				AlertCount[index]++;
			}
			else
			{
				AlertCount[index]=AlertCount[index]+MaxAlert+1;
				if(isDead)
				AddAttackPlane(guard,0,player);
				else
				GuardWarn(guard,player,AlertCount[index]);
			}
		}
	} 
	
	void EventStealing(Critter&guard,Critter&fromCrit,Critter&thief,bool success,Item&item,uint count)
	{   
		
		AddAttackPlane(guard,0,thief,thief.Stat[(7)]/2);    
		
	} 
	
	uint EventObserving(Critter@guard)
	{
		if(Observing.length()==0)
		return(((Random(1,6))*__TimeMultiplier))*2;
		
		if(not(@guard!=null))
		{
			Log("Not valid npc from TimeEventGetCritter");
			return 0;
		}
		if(guard.Stat[(72)]<=0)
		return(((Random(1,6))*__TimeMultiplier))*2;
		
		GuardObserving(guard,true);
		
		return(((Random(1,6))*__TimeMultiplier));
	}  
	
	void EventTimerObserving()
	{}  
	
	void EventTimerAlertLevelDown()
	{
		
	} 
	
	void EventDropItem(Critter&guard,Critter&fromCrit,Item&item)
	{
		
	}  
	
}   

class CGuardSearching
{}  

void _GuardInit(Critter&npc,bool firstTime)
{
	
	npc.SetEvent((4),"_GuardOnAddCritter");
	npc.SetEvent((8),"_GuardOnRemoveCritter");
	
	npc.SetEvent((36),"_GuardEndPlane");
	npc.SetEvent((18),"_GuardOnMessage");
	npc.SetEvent((33),"_GuardOnMoveItem");
	npc.SetEvent((30),"_GuardOnUseItem");
	npc.SetEvent((27),"_GuardStealing");
	npc.SetEvent((28),"_GuardOnSmthAttack");
	npc.SetEvent((32),"_GuardOnDropItem"); 
	
	if(not firstTime&&npc.GetTimeEvents((4),null,null,null)==0)
	npc.AddTimeEvent("cte_Observing",(((Random(1,6))*__TimeMultiplier)),(4));
}

uint cte_Observing(Critter&npc,int identifier,uint&stage)
{
	return Grd.EventObserving(npc);
}

void _GuardOnAddCritter(Critter&crit,Critter&showCrit)
{
	Grd.EventOnAddCritter(crit,showCrit);
}

void _GuardOnRemoveCritter(Critter&crit,Critter&hideCrit)
{
	Grd.EventOnRemoveCritter(crit,hideCrit);
}

int _GuardEndPlane(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	Grd.EventEndPlane(npc);
	return(0);
}

void _GuardOnMoveItem(Critter&crit,Critter&fromCrit,Item&item,uint8 fromSlot)
{
	Grd.EventOnMoveItem(crit,fromCrit,item,fromSlot);
}

void _GuardOnMessage(Critter&crit,Critter&fromCrit,int message,int value)
{
	Grd.EventOnMessage(crit,fromCrit,message,value);
}

void _GuardOnUseItem(Critter&crit,Critter&fromCrit,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	Grd.EventOnUseItem(crit,fromCrit,item,onCritter,onItem,onScenery);
}

void _GuardOnDropItem(Critter&crit,Critter&fromCrit,Item&item)
{
	Grd.EventOnDropItem(crit,fromCrit,item);
}

void _GuardOnSmthAttack(Critter&crit,Critter&fromCrit,Critter&target)
{
	Grd.EventOnSmthAttack(crit,fromCrit,target);
}

void _GuardStealing(Critter&crit,Critter&fromCrit,Critter&thief,bool success,Item&item,uint count)
{
	Grd.EventStealing(crit,fromCrit,thief,success,item,count);
}

import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";

class CGuardsManagerForHell:CGuardsManager
{
	CGuardsManagerForHell()
	{
		super();
		Dialog=(4466);
	}
} 

CGuardsManagerForHell Grd;

bool GuardItemTest(Item@item)
{
	return Grd.GuardItemTest(item);
}    

void _GuardInit1(Critter&cr,bool firstTime)
{
	cr.StatBase[(101)]=30;
	cr.StatBase[(14)]=30;
	cr.StatBase[(8)]=12;
	cr.StatBase[(7)]=100;
	cr.ModeBase[(511)]=1;
	cr.ModeBase[(513)]=1;
	cr.ModeBase[(536)]=1;
	cr.ModeBase[(533)]=1;
	cr.PerkBase[(420)]=1;
	
	FighterPattern@fp=FighterPattern();
	fp.ForceArmourLvl=6;
	fp.MustHealLvl=60;
	fp.ForceCritterArmour(cr);
	fp._SetOnAttackedEvents(cr);
	cr.StatBase[(94)]=1000;   
	
	cr.SetEvent((4),"_GuardOnAddCritter");
	cr.SetEvent((8),"_GuardOnRemoveCritter");
	cr.SetEvent((36),"_GuardEndPlane");
	cr.SetEvent((18),"_GuardOnMessage");
	cr.SetEvent((18),"_GuardMessage");
	cr.SetEvent((33),"_GuardOnMoveItem");
	cr.SetEvent((27),"_GuardStealing");
	cr.SetEvent((28),"_GuardOnSmthAttack");
	cr.SetEvent((30),"_GuardSmthUseItem");
	cr.SetEvent((32),"_GuardSmthDropItem"); 
	
	cr.SetEvent((28),"_TurretSmthAttack");
	
	if(not firstTime&&cr.GetTimeEvents((4),null,null,null)==0)
	cr.AddTimeEvent("cte_Observing",(((Random(1,6))*__TimeMultiplier)),(4));
}

void _GuardInit2(Critter&cr,bool firstTime)
{
	cr.StatBase[(101)]=50;
	cr.StatBase[(14)]=95;
	cr.StatBase[(8)]=16;
	cr.StatBase[(7)]=150;
	cr.PerkBase[(322)]=1;
	cr.ModeBase[(511)]=1;
	cr.ModeBase[(523)]=1;
	cr.ModeBase[(532)]=1;
	cr.ModeBase[(513)]=1;
	cr.ModeBase[(536)]=1;
	cr.PerkBase[(420)]=1;
	
	FighterPattern@fp=FighterPattern();
	fp.ForceArmourLvl=6;
	fp.MustHealLvl=60;
	fp.ForceCritterArmour(cr);
	fp._SetOnAttackedEvents(cr);
	cr.StatBase[(94)]=1000;
	
	cr.SetEvent((4),"_GuardOnAddCritter");
	cr.SetEvent((8),"_GuardOnRemoveCritter");
	cr.SetEvent((36),"_GuardEndPlane");
	cr.SetEvent((18),"_GuardOnMessage");
	cr.SetEvent((18),"_GuardMessage");
	cr.SetEvent((33),"_GuardOnMoveItem");
	cr.SetEvent((27),"_GuardStealing");
	cr.SetEvent((28),"_GuardOnSmthAttack");
	cr.SetEvent((30),"_GuardSmthUseItem");
	cr.SetEvent((32),"_GuardSmthDropItem");
	cr.SetEvent((28),"_TurretSmthAttack");
	
	if(not firstTime&&cr.GetTimeEvents((4),null,null,null)==0)
	cr.AddTimeEvent("cte_Observing",(((Random(1,6))*__TimeMultiplier)),(4));
}

void _GuardMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	if(message==(129))
	{
		AddAttackPlane(cr,0,value);
		Critter@target=GetCritter(value);
		if(!(@target!=null))
		return;
		if(target.IsNpc())
		return;
		if(Random(0,4)==1)
		cr.SayMsg((3),(0),(5200),GetPlayerName(value));
	}
}

void _GuardSmthStealing(Critter&guard,Critter&fromCr,Critter&thief,bool success,Item&item,uint count)
{
	if(thief.IsPlayer()&&guard.IsLife())
	{
		AddAttackPlane(guard,0,thief,1);
	}
}

void _GuardSmthDropItem(Critter&npc,Critter&fromCr,Item&item)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(209)||pid==(545)||pid==(206))
		{
			AddAttackPlane(npc,0,fromCr);
		}
	}
	if(!npc.IsLife())
	return;
	if(!CheckItemIsIllegal(item))
	return;
	AddPickPlane(npc,(50),item,0,true);
}

void _GuardSmthUseItem(Critter&npc,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(85)||pid==(544)||pid==(222)||pid==(51))
		{
			AddAttackPlane(npc,0,fromCr);
		}
	}
}  

const uint16[]Pids_IllegalItems=
{
	(206),(209),(545),(222)
};

bool HasIllegalItems(Critter&cr)
{
	Item@[]items;
	if(cr.GetItems(-1,items)==0)
	return false;
	for(uint i=0,l=items.length();i<l;i++)
	{
		if(CheckItemIsIllegal(items[i]))
		return true;
	}
	return false;
}

bool CheckItemIsIllegal(Item@item)
{
	if(!(@item!=null))
	return false;
	return Present(item.GetProtoId(),Pids_IllegalItems);
}  

void _TurretInit(Critter&cr,bool firstTime)
{
	cr.StatBase[(101)]=30;
	cr.PerkBase[(420)]=1;
	cr.ModeBase[(511)]=1;
	cr.ModeBase[(513)]=1;
	cr.ModeBase[(533)]=1;
	
	FighterPattern@fp=FighterPattern();
	fp.ForceArmourLvl=6;
	fp.MustHealLvl=60;
	fp.ForceCritterArmour(cr);
	fp._SetOnAttackedEvents(cr);  
	
	cr.SetEvent((4),"_GuardOnAddCritter");
	cr.SetEvent((8),"_GuardOnRemoveCritter");
	cr.SetEvent((36),"_GuardEndPlane");
	cr.SetEvent((33),"_GuardOnMoveItem");
	cr.SetEvent((28),"_GuardOnSmthAttack");
	cr.SetEvent((28),"_TurretSmthAttack");
	
	if(not firstTime&&cr.GetTimeEvents((4),null,null,null)==0)
	cr.AddTimeEvent("cte_Observing",(((Random(1,6))*__TimeMultiplier)),(4));
}

void _TurretSmthAttack(Critter&turret,Critter&attacker,Critter&target)
{
	if(attacker.IsPlayer())
	AddAttackPlane(turret,0,attacker);
}  

void _PowerInit(Critter&cr,bool firstTime)
{
	cr.StatBase[(101)]=30;
	cr.StatBase[(14)]=30;
	cr.StatBase[(8)]=12;
	cr.ModeBase[(513)]=1;
	cr.ModeBase[(536)]=1;
	cr.PerkBase[(420)]=1;
	cr.StatBase[(115)]=5;
	cr.ModeBase[(533)]=1;
	FighterPattern@fp=FighterPattern();
	fp.ForceArmourLvl=6;
	fp.MustHealLvl=60;
	fp.ForceCritterArmour(cr);
	fp._SetOnAttackedEvents(cr);
	cr.StatBase[(94)]=1000;
}
