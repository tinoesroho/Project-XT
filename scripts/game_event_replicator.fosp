

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}                                                                                                                                                                                                                                            

import bool CheckEventStatus(uint idx,uint status)from"game_event";
import void StopGameEvent(uint idx)from"game_event";
import void RunGameEvent(uint idx)from"game_event";
import bool GetFreeHex(Map&map,uint radius,uint16&hx,uint16&hy)from"caravan";
import void SkillUp(Critter&player,int skill)from"stdlib";

const uint[]colorsReplicator=
{
	25599,25500,(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0x99)&0xFF))),(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0x99)&0xFF))),(uint((0xFF<<24)|(((0x33)&0xFF)<<16)|(((0xCC)&0xFF)<<8)|((0xCC)&0xFF))),
	(uint((0xFF<<24)|(((0x99)&0xFF)<<16)|(((0x99)&0xFF)<<8)|((0xff)&0xFF))),(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xCC)&0xFF)<<8)|((0x66)&0xFF)))
};

const uint[][]entiresSandbags=
{
	{149,158},
	{158,162},
	{163,167},
	{170,177}
};  

uint e_BeginEvent(uint[]@values)
{
	SetReplicationAbandoned();
	return 0;
}

uint e_StopEvent(uint[]@values)
{
	
	StopEvent();
	return 0;
}

void SetReplicationAbandoned()
{
	GameVar@status=GetGlobalVar(((1825)));
	if((@status!=null))
	status=(1);
	Location@loc=GetLocationByPid((43),0);
	if((@loc!=null))
	{
		Map@map=loc.GetMapByIndex(0);
		if((@map!=null))
		{
			
			for(uint i=0,l=entiresSandbags.length();i<l;i++)
			for(uint j=entiresSandbags[i][0],k=entiresSandbags[i][1];j<=k;j++)
			{
				if(j>entiresSandbags[i][0])
				PlaceSandbags(map,j-1,j,3);
			}
			
		} 
		
		uint16 xC=0;
		uint16 yC=0;
		GetEntireFreeHex(map,(304),xC,yC);
		
		uint16 hx=0;
		uint16 hy=0;
		if(GetEntireFreeHex(map,(300),hx,hy))
		{
			int[]params={(84),5,(104),(4059),(89),(304),(106),(20),(107),(67),(532),1};
			map.AddNpc(489,hx,hy,GetDirection(hx,hy,xC,yC),params,null,null);
		}
		Entire[]entires;
		if(ParseEntires(map,entires,(303))>0)
		{
			for(uint i=0,l=entires.length();i<l;i++)
			{
				int[]params={(84),5,(104),(4060),(89),(304),(106),(20),(107),42,(532),1};
				map.AddNpc(503,entires[i].HexX,entires[i].HexY,GetDirection(entires[i].HexX,entires[i].HexY,xC,yC),params,null,null);
			}
		}
		entires.resize(0);
		if(ParseEntires(map,entires,(302))>0)
		{
			for(uint i=0,l=entires.length();i<l;i++)
			{
				int[]params={(84),5,(104),(4061),(89),(304),(106),(20),(107),(174),(532),1};
				map.AddNpc(485,entires[i].HexX,entires[i].HexY,GetDirection(entires[i].HexX,entires[i].HexY,xC,yC),params,null,null);
			}
		}
		if(GetEntireFreeHex(map,(301),hx,hy))
		{
			int[]params={(84),5,(104),(4062),(89),(304),(106),(20),(107),(174),(532),1};
			map.AddNpc(301,hx,hy,GetDirection(hx,hy,xC,yC),params,null,null);
		}
		@map=loc.GetMapByIndex(2);
		if((@map!=null))
		{
			PlaceReplicatorTanks(map);
			map.SetScript("_MapInit");
		}
	}
}

void PlaceSandbags(Map&map,uint eFrom,uint eTo,uint sandbagCount)
{
	Entire@entireFrom=GetEntire(map,eFrom,0);
	Entire@entireTo=GetEntire(map,eTo,0);
	if((@entireFrom!=null)&&(@entireTo!=null))
	{
		uint16 x=entireFrom.HexX,y=entireFrom.HexY;
		uint8 dir=GetDirection(x,y,entireTo.HexX,entireTo.HexY);
		int distantion=GetDistantion(x,y,entireTo.HexX,entireTo.HexY);
		for(int i=0;i<distantion;i++)
		{
			map.MoveHexByDir(x,y,dir,1);
			(map.AddItem(x,y,(580)-1+sandbagCount,1));
		}
	}
}

void PlaceReplicatorTanks(Map&map)
{
	Item@[]items;
	Item@item;
	Item@tank;
	if(map.GetItems((614),items)>0)
	{
		for(uint i=0,l=items.length();i<l;i++)
		{
			@item=items[i];
			if((@item!=null))
			{
				@tank=map.AddItem(item.HexX,item.HexY,(613),1);
				if((@tank!=null))
				{
					tank.SetScript("_ReplTankInit");
					DeleteItem(item);
				}
			}
		}
	}
} 

void StopEvent()
{
	GameVar@status=GetGlobalVar(((1825)));
	if((@status!=null))
	status=0;
	Location@loc=GetLocationByPid((43),0);
	if((@loc!=null))
	{
		Map@map=loc.GetMapByIndex(0);
		if((@map!=null))
		{
			CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier*3600),"e_DeleteSandbags",map.Id,true);
		}
		@map=loc.GetMapByIndex(2);
		Critter@[]zombies;
		if(map.GetCritters(0,(0x20)|(0x0F),zombies)>0)
		{
			for(uint i=0,l=zombies.length();i<l;i++)
			{
				Critter@cr=zombies[i];
				if((@cr!=null)&&cr.IsNpc()&&cr.Stat[(89)]==(123))
				DeleteNpc(cr);
			}
		}
	}
}

uint e_DeleteSandbags(uint[]@values)
{
	Map@map=GetMap(values[0]);
	if((@map!=null))
	{
		
		Critter@[]critters;
		if(map.GetCritters(0,(0x10)|(0x01),critters)>0)
		{
			for(uint i=0,l=critters.length();i<l;i++)
			{
				Critter@cr=critters[i];
				if((@cr!=null)&&(@cr.GetMap()!=null))
				{
					cr.TransitToGlobal(false);
				}
			}
		}
		
		Item@[]items;
		map.GetItems((580),items);
		map.GetItems((581),items);
		map.GetItems((582),items);
		map.GetItems((583),items);
		map.GetItems((584),items);
		for(uint i=0,l=items.length();i<l;i++)
		{
			Item@item=items[i];
			if((@item!=null))
			DeleteItem(item);
		} 
		
		critters.resize(0);
		if(map.GetCritters(0,(0x20)|(0x0F),critters)>0)
		{
			for(uint i=0,l=critters.length();i<l;i++)
			{
				Critter@npc=critters[i];
				if((@npc!=null)&&npc.IsNpc()&&(npc.Stat[(89)]==(123)||npc.Stat[(89)]==(304)))
				DeleteNpc(npc);
			}
		}
	}
	return 0;
} 

void t_ReplDoor(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(player.IsPlayer())
	{
		GameVar@status=GetGlobalVar(((1825)));
		if((@status!=null)&&status==(1))
		{
			Location@loc=player.GetMap().GetLocation();
			if(loc.GetProtoId()==(43))
			{
				Map@map=loc.GetMapByIndex(2);
				if((@map!=null))
				{
					player.TransitToMap(map.Id,0,false);
				}
			}
		}
	}
}

void t_Attack(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(player.IsPlayer()&&entered)
	{
		Critter@[]critters;
		Map@map=player.GetMap();
		if((@map!=null)&&map.GetCrittersHex(player.HexX,player.HexY,20,(0x01)|(0x20),critters)>0)
		{
			for(uint i=0,l=critters.length();i<l;i++)
			{
				Critter@cr=critters[i];
				if((@cr!=null)&&cr.IsNpc()&&cr.Stat[(89)]==(123))
				{
					AddAttackPlane(cr,0,player);
					if(Random(1,3)==2)
					cr.SayMsg((3),(0),4001);
				}
			}
		}
	}
}

bool s_ReplDoor(Critter&player,Scenery&scenery,int skill,Item@item)
{
	GameVar@status=GetGlobalVar(((1825)));
	if((@status!=null)&&status==(1))
	{
		;
		Location@loc=player.GetMap().GetLocation();
		if(loc.GetProtoId()==(43))
		{
			Map@map=loc.GetMapByIndex(2);
			if((@map!=null))
			{
				player.TransitToMap(map.Id,0,false);
				;
				return true;
			}
		}
	}
	return false;
} 

void _MapInit(Map&map,bool firstTime)
{
	map.SetEvent((1),"_MapLoop0");
	map.SetEvent((2),"_MapLoop1");
	map.SetEvent((3),"_MapLoop2");
	map.SetLoopTime(0,5000);
	map.SetLoopTime(1,60000);
	map.SetLoopTime(2,30000);
}  

void _MapLoop0(Map&map)
{
	Item@[]items;
	Item@item;
	if(map.GetItems((613),items)>0)
	{
		for(uint i=0,l=items.length();i<l;i++)
		{
			@item=items[i];
			if((@item!=null)&&Random(1,2)==2)
			{
				item.LightIntensity=Random(30,80);
				item.LightColor=colorsReplicator[Random(0,colorsReplicator.length()-1)];
				item.LightDistance=Random(2,6);
				(item.Flags=(item.Flags)|((0x00008000)));
				item.Update();
			}
		}
	}
} 

void _MapLoop1(Map&map)
{
	if(!CheckEventStatus((11),(1)))
	{ 
		
	}
	if(map.GetCritters((529),(0x03)|(0x20),null)<20)
	{
		Item@[]replicators;
		uint numRepl=map.GetItems((613),replicators);
		if(numRepl==0)
		{
			
			RunGameEvent((12));
			map.SetScript("");
			return;
		}
		else
		{
			uint16 hX=0,hY=0;
			Item@replicator;
			Critter@cr;
			for(uint i=0;i<numRepl;i++)
			{
				@replicator=replicators[i];
				if((@replicator!=null)&&Random(1,3)>1)
				{
					hX=replicator.HexX;
					hY=replicator.HexY;
					if(GetFreeHex(map,7,hX,hY))
					{ 
						
						int[]params={(106),(25),(91),(145),(92),__FullSecond,(89),(123)};
						map.AddNpc((529),hX,hY,6,params,null,"game_event_replicator@_ZombieInit");
						map.SetTextMsg(replicator.HexX,replicator.HexY,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0),4003);
					}
				}
			}
		}
	}
} 

void _MapLoop2(Map&map)
{
	Critter@[]zombies;
	Critter@cr;
	uint16 hX=0;
	uint16 hY=0;
	Location@loc=map.GetLocation();
	Map@mapGround=loc.GetMapByIndex(0);
	map.GetCritters((529),(0x01)|(0x20),zombies);
	for(uint i=0,l=zombies.length();i<l;i++)
	{
		@cr=zombies[i];
		if((@cr!=null))
		{
			uint entire=cr.Stat[(91)];
			uint lastOrder=cr.Stat[(92)];
			if(cr.IsNoPlanes()&&lastOrder+(((1)*__TimeMultiplier*60))<__FullSecond)
			{
				hX=cr.HexX;
				hY=cr.HexY;
				switch(entire)
				{
					case(289):
					
					DeleteNpc(cr);
					return;
					case(145):
					;
					case(146):
					case(147):
					if(GetEntireFreeHex(map,cr.Stat[(91)]+1,hX,hY))
					{
						if(GetFreeHex(map,7,hX,hY))
						{
							cr.StatBase[(92)]=__FullSecond;
							cr.StatBase[(91)]+=1;
							cr.SetHomePos(hX,hY,Random(0,5));
						}
					}
					break;
					case(148):
					if((@mapGround!=null))
					{
						if(cr.TransitToMap(mapGround.Id,288,false))
						{
							cr.SetScript("_ZombieOutInit");
						}
					}
					break;
				}
			}
		}
	}
}        

void _ReplTankInit(Item&item,bool firstTime)
{
	item.SetEvent((3),"_ReplTankUseOnMe");
} 

import void Explode(Map@map,uint16 hexX,uint16 hexY,Critter@cr,uint16 explodePid,uint ownerId,int bonusDamage,int bonusRadius)from"explode";
import void SmokeBlast(Map&map,uint16 hexX,uint16 hexY,uint16 smokePid,uint ownerId)from"smoke_grenade";

bool _ReplTankUseOnMe(Item&item,Critter&cr,Item@usedItem)
{
	GameVar@qVar=GetLocalVar(((1826)),cr.Id);
	if((usedItem.GetProtoId()==(85)||usedItem.GetProtoId()==(209))&&(@qVar!=null)&&qVar==(1))
	{
		DeleteItem(usedItem);
		
		qVar=(2);
		uint mapId=0;
		Map@map=cr.GetMap();
		if((@map!=null))
		{
			mapId=map.Id;
		}
		uint[]values={cr.Id,item.Id,mapId};
		CreateTimeEvent(__FullSecond+(((5)*__TimeMultiplier)),"e_ExplodeReplTank",values,true);
		return true;
	}
	return false;
}

uint e_ExplodeReplTank(uint[]@values)
{
	uint crId=values[0];
	uint itemId=values[1];
	uint mapId=values[2];
	
	Critter@cr=GetCritter(crId);
	Item@item=GetItem(itemId);
	Map@map;
	if(mapId>0)
	@map=GetMap(mapId);
	
	if((@cr!=null)&&(@item!=null))
	{
		GameVar@qVar=GetLocalVar(((1826)),cr.Id);
		if((@qVar!=null)&&qVar==(2))
		{
			
			qVar=(3);
			SkillUp(cr,(211));
		}
		if((@map!=null))
		{
			Explode(map,item.HexX,item.HexY,null,(209),0,300,Random(1,5));
			map.AddItem(item.HexX,item.HexY,(614),1);
			DeleteItem(item);
			SmokeBlast(map,item.HexX,item.HexY,(607),crId);
		}
	}
	return 0;
} 

void _ZombieOutInit(Critter&cr,bool firstTime)
{
	cr.StatBase[(84)]=-1;
	cr.SetEvent((2),"_OnZombieDead");
	
	cr.SetEvent((16),"_OnZombieAttackedGround");
	cr.SetEvent((18),"_OnZombieMessage");
	cr.SetEvent((0),"_OnZombieIdleGround");
	cr.SetEvent((36),"_OnZombiePlaneEnd");
	
}

bool _OnZombieAttackedGround(Critter&cr,Critter&attacker)
{
	
	cr.SendMessage((300),attacker.Id,(1));
	if(Random(1,11)>10)
	{
		cr.SayMsg((5),(0),4001);
		return false;
	}
	if(cr.Stat[(95)]==0)
	{
		Critter@[]critters;
		Map@map=cr.GetMap();
		if((@map!=null)&&map.GetCritters(0,(0x03)|(0x0F),critters)>0)
		{
			for(uint i=0,l=critters.length();i<l;i++)
			{
				Critter@target=critters[i];
				if((@target!=null)&&target.Stat[(89)]!=cr.Stat[(89)])
				{
					AddAttackPlane(cr,0,target);
				}
			}
			cr.SayMsg((3),(0),4001);
		}
		cr.StatBase[(95)]=1;
	}
	return false;
}

void _OnZombieIdleGround(Critter&cr)
{
	if(!cr.IsLife())
	return;
	Map@map=cr.GetMap();
	uint16 hX=cr.HexX;
	uint16 hY=cr.HexY;
	if(GetEntireFreeHex(map,(289),hX,hY))
	{
		if(GetDistantion(cr.HexX,cr.HexY,hX,hY)<6)
		{
			
			DeleteNpc(cr);
			return;
		}
		cr.StatBase[(91)]=(289);
		if(GetFreeHex(map,3,hX,hY))
		{
			cr.StatBase[(92)]=__FullSecond;
			cr.StatBase[(91)]=(289);
			cr.SetHomePos(hX,hY,Random(0,5));
		}
	}
}

void _ZombieInit(Critter&cr,bool firstTime)
{
	cr.StatBase[(84)]=-1;
	cr.SetEvent((2),"_OnZombieDead");
	
	cr.SetEvent((16),"_OnZombieAttacked");
	cr.SetEvent((18),"_OnZombieMessage");
	cr.SetEvent((0),"_OnZombieIdle");
	cr.SetEvent((36),"_OnZombiePlaneEnd");
}    

int _OnZombiePlaneEnd(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(reason!=(30)&&cr.IsLife())
	{
		
		uint16 hx=0;
		uint16 hy=0;
		uint8 dir=0;
		uint mapId=0;
		cr.GetHomePos(mapId,hx,hy,dir);
		Map@map=cr.GetMap();
		if(plane.Type==(2)&&
		plane.Walk_HexX==hx&&
		plane.Walk_HexY==hy&&
		plane.Walk_Dir==dir&&
		map.GetPathLength(cr.HexX,cr.HexY,hx,hy,0)==0)
		{
			
			;
			if(GetEntireFreeHex(map,cr.Stat[(91)],hx,hy))
			{
				if(GetFreeHex(map,7,hx,hy))
				{
					cr.SetHomePos(hx,hy,Random(0,5));
				}
			}
		}
		return(2);
	}
	return(0);
}  

void _OnZombieIdle(Critter&cr)
{
	if(cr.IsDead())
	return;
	Map@map=cr.GetMap();
	if((@map!=null)&&map.GetProtoId()==(237)&&Random(1,3)==3)
	{
		Critter@[]critters;
		if(map.GetCrittersHex(cr.HexX,cr.HexY,(10),(0x01)|(0x10),critters)>0)
		{
			for(uint i=0,l=critters.length();i<l;i++)
			{
				Critter@target=critters[i];
				if((@target!=null))
				{
					AddAttackPlane(cr,0,target);
					cr.AddEnemyInStack(cr.Id);
				}
			}
			cr.SayMsg((3),(0),4001);
			return;
		}
	}
	if(cr.IsLife()&&cr.IsNoPlanes()&&Random(0,3)==1)
	{
		cr.MoveRandom();
		if(Random(1,12)==1)
		cr.SayMsg((5),(0),4002);
	}
}

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
void _OnZombieMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	if(message==(300)&&cr.IsNpc()&&cr.GetPlanes((1),null)==0)
	{
		Critter@target=GetCritter(value);
		
		if((@target!=null))
		{
			AddAttackPlane(cr,0,target);
			cr.AddEnemyInStack(value);
		}
	}
	
}

bool _OnZombieAttacked(Critter&cr,Critter&attacker)
{ 
	
	cr.SendMessage((300),attacker.Id,(2));
	
	return false;
}

void _OnZombieDead(Critter&cr,Critter@killer)
{
	uint killerId=0;
	if((@killer!=null))
	{
		killerId=killer.Id;
		GameVar@qStatus=GetLocalVar((1829),killerId);
		if((@qStatus!=null)&&qStatus>0&&qStatus<6)
		{
			killer.SayMsg((11),(0),4005);
		}
	}
	cr.AddTimeEvent("cte_RespawnZombie",((Random(30,90))*__TimeMultiplier),killerId);
	
}  

uint cte_RespawnZombie(Critter&cr,int identifier,uint&rate)
{
	;
	GameVar@qStatus;
	Critter@killer;
	if(identifier>0)
	{
		@qStatus=GetLocalVar((1829),identifier);
		@killer=GetCritter(identifier);
	}
	if(cr.IsDead()&&cr.Anim2Dead<(110))
	{
		cr.StatBase[(72)]=cr.Stat[(7)]/2;
		cr.ToLife();
		cr.SayMsg((6),(0),(4000));
		;
		if((@killer!=null)&&(@qStatus!=null)&&qStatus>0&&qStatus<6)
		{
			killer.SayMsg((11),(0),4007);
		}
	}
	else
	{
		if((@killer!=null)&&(@qStatus!=null)&&qStatus>0&&qStatus<6)
		{
			killer.SayMsg((11),(0),4006);
			qStatus=qStatus.GetValue()+1;
		}
		
	}
	return 0;
}  

void t_Notify(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(entered&&player.IsPlayer()&&player.Stat[(77)]>9)
	{
		GameVar@status=GetGlobalVar(((1825)));
		if((@status!=null)&&status==(1))
		{
			GameVar@counter=GetLocalVar((1828),player.Id);
			GameVar@qStatus=GetLocalVar((1827),player.Id);
			if((@counter!=null)&&counter<3&&(@qStatus!=null)&&qStatus==0)
			{
				Critter@[]critters;
				Map@map=player.GetMap();
				if((@map!=null)&&map.GetCritters(0,(0x20)|(0x01),critters)>0)
				{
					for(uint i=0,l=critters.length();i<l;i++)
					{
						Critter@cr=critters[i];
						if((@cr!=null)&&cr.Stat[(104)]==(4054))
						{
							cr.SayMsg((1),(0),4004,"$player"+GetPlayerName(player.Id));
							counter=counter.GetValue()+1;
							return;
						}
					}
				}
			}
		}
	}
}    

void Run(Critter&cr,int,int,int)
{
	SetReplicationAbandoned();
}
void Stop(Critter&cr,int,int,int)
{
	StopEvent();
}
