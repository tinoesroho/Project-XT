

const uint16[]gex_table=
{
	(11),(12),(13),(14),(15)
};       

const uint16[]items_table=
{  
	
	(19),(2),1,2,100,(11),
	(271),(2),1,1,90,(11),
	(272),(2),1,1,90,(11),
	(41),(2),1,50,80,(12),
	(519),(4),1,35,90,(12),
	(124),(2),1,1,90,(12),
	(125),(2),1,1,80,(12),
	(71),(2),1,1,90,(12),
	(273),(2),1,1,80,(12),
	(4),(2),1,1,70,(12),
	(543),(2),1,1,80,(12),
	(289),(2),1,1,80,(12),
	(542),(2),1,2,90,(12),
	(276),(2),1,1,50,(12),
	(127),(2),1,2,75,(12),
	(278),(2),1,2,90,(12),
	(540),(2),0,1,60,(12),
	(416),(2),1,3,40,(12),
	(259),(2),1,2,30,(12),
	(439),(2),1,5,90,(12),
	(262),(2),1,1,80,(12),
	(98),(2),1,2,70,(12),
	(475),(2),1,1,70,(12),
	(98),(2),1,1,80,(14),
	(439),(2),1,5,95,(14),
	(71),(2),1,2,60,(14),
	(416),(2),1,1,20,(14),
	(259),(2),1,1,50,(14),
	(273),(2),1,1,90,(14),
	(4),(2),1,1,75,(14),
	
	(19),(1),1,1,90,(11),
	(278),(1),1,1,70,(11),
	(271),(1),1,1,60,(11),
	(272),(1),1,1,60,(11),
	(278),(1),1,1,80,(12),
	(543),(1),1,1,90,(12),
	(262),(1),1,1,90,(12),
	(127),(1),1,2,80,(12),
	(542),(1),1,5,90,(12),
	(92),(1),1,1,90,(12),
	(519),(4),1,35,90,(12),
	(572),(1),1,5,90,(12),
	(273),(1),1,1,60,(14),
	(439),(1),1,5,80,(14),
	(92),(1),1,1,75,(14),
	(98),(1),0,2,60,(14),
	
	(19),(3),1,1,100,(11),
	(278),(3),1,1,50,(11),
	(98),(3),1,1,90,(12),
	(475),(3),1,1,90,(12),
	(49),(3),1,1,80,(12),
	(315),(3),1,1,60,(12),
	(534),(3),1,1,80,(12),
	(259),(3),1,1,50,(12),
	(360),(3),15,35,50,(12),
	(259),(3),1,1,40,(12),
	(74),(3),1,1,2,(12),
	(535),(3),1,1,50,(12),
	(538),(3),1,1,40,(12),
	(573),(3),1,1,20,(12),
	(532),(3),1,1,60,(12),
	
	(19),(4),1,1,90,(11),
	(98),(4),1,3,100,(13),
	(475),(4),1,2,100,(13),
	(538),(4),1,1,90,(12),
	(289),(4),1,1,60,(12),
	(542),(4),1,5,95,(12),
	(50),(4),1,1,80,(12),
	(318),(4),1,3,95,(12),
	(572),(4),1,5,95,(12),
	(127),(4),1,1,60,(12),
	(519),(4),1,35,90,(12),
	(300),(4),1,1,5,(12),
	(71),(4),1,2,80,(14),
	(20),(4),1,1,70,(14),
	(541),(4),1,1,60,(14),
	(439),(4),1,3,95,(14),
	(318),(4),1,3,80,(14),
	(519),(4),1,35,50,(14),
	(259),(4),1,1,25,(14),
	(538),(4),1,1,90,(14),
	(535),(4),1,1,75,(14),
	(4),(4),1,1,95,(14),
	(125),(4),1,1,60,(14),
	(124),(4),1,1,40,(14),
	(541),(4),1,2,95,(15),
	(236),(4),1,1,50,(15),
	(159),(4),1,1,50,(15),
	(300),(4),1,1,15,(15),
	(95),(4),12,30,90,(15),
	(363),(4),10,20,60,(15),
	(29),(4),5,30,90,(15),
	(360),(4),10,20,80,(15),
	(111),(4),10,20,50,(15),
	(34),(4),5,10,50,(15),
	(535),(4),1,1,80,(15),
	
	(19),(5),1,1,95,(11),
	(271),(5),1,1,90,(11),
	(272),(5),1,1,90,(11),
	(41),(5),1,20,70,(12),
	(124),(5),1,1,50,(12),
	(543),(5),1,1,80,(12),
	(289),(5),1,1,80,(12),
	(262),(5),1,1,70,(12),
	(273),(5),1,1,80,(14),
	(4),(5),1,1,95,(14),
	(127),(5),1,2,85,(14),
	(278),(5),1,2,70,(14),
	
	(517),(7),1,1,0,(11)
}

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}                  

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}                  

uint16[]@GetItemsInfo(uint8 eType,uint8 hex)
{
	uint16[]infos;
	for(uint16 i=0;i<(items_table.length()/(6));i++)
	{
		if(((items_table[(6)*(0+i)+1])==eType||(items_table[(6)*(0+i)+1])==(0))&&(items_table[(6)*(0+i)+5])==hex)
		{
			
			infos.insertLast(i);
		}
	}
	
	return infos;
}

uint8 GetEncounterType(Map&map)
{
	uint mapPid=map.GetProtoId();
	
	if((mapPid==(349)||mapPid==(351)||mapPid==(353)||mapPid==(355)||mapPid==(357)||mapPid==(359)||mapPid==(392)))
	return(3);
	
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return(7);
	uint16 pid=loc.GetProtoId();
	if(pid>=(101)&&pid<=(112))
	return(2);
	if(pid>=(121)&&pid<=(126))
	return(1);
	if(pid>=(140)&&pid<=(145))
	return(1);
	if(pid>=(161)&&pid<=(168))
	return(4);
	if(pid>=(181)&&pid<=(191))
	return(5);
	if(pid>=(193)&&pid<=(195))
	return(6);
	
	return(7);
}

void GenerateItems(Map&map,Critter@[]@grp)
{
	int minLuck=8;
	if((@grp!=null))
	{
		for(uint i=0,l=grp.length()-1;i<l;i++)
		{
			Critter@cr=grp[i];
			if(!(@cr!=null))
			continue;
			if(minLuck>cr.Stat[(6)])
			minLuck=cr.Stat[(6)];
		}
	}
	uint8 itemz=Random((0),(((minLuck)>((8)))?((8)):(((minLuck)<(3))?(3):(minLuck))));
	uint8 mapType=GetEncounterType(map);
	
	Entire[]entires;
	for(uint i=0,l=gex_table.length();i<l;i++)
	{
		ParseEntires(map,entires,gex_table[i]);
	}
	uint len=entires.length();
	if(len==0)
	return;
	
	int8 tries=30;
	uint[]foundedEntires;
	uint cur=0;
	int idx=0;
	while(tries>0)
	{
		cur=Random(0,len-1);
		if(!Present(cur,foundedEntires))
		{
			foundedEntires.insertLast(cur);
		}
		if(foundedEntires.length()>itemz)
		break;
		tries--;
	}
	
	bool found=false;
	for(uint i=0,l=foundedEntires.length();i<l;i++)
	{
		Entire@hex=entires[foundedEntires[i]];
		if((@hex!=null))
		{
			uint16[]@rows=GetItemsInfo(mapType,hex.Number);
			if(rows.length()==0)
			continue;
			
			idx=rows[Random(0,rows.length()-1)];
			if(idx<0)
			continue;
			
			if(Random(1,99)<int((items_table[(6)*(0+idx)+4])))
			{
				Item@[]items;
				if(map.GetItems(hex.HexX,hex.HexY,2,0,items)>0)
				{
					for(uint j=0;j<items.length();j++)
					{
						if(items[j].GetType()==(8))
						{
							uint qty=(Random(items_table[(6)*(0+idx)+2],items_table[(6)*(0+idx)+3]));
							if(qty>0)
							items[j].AddItem((items_table[(6)*(0+idx)+0]),qty,0);
							found=true;
							break;
						}
					}
				}
				if(!found)
				map.AddItem(hex.HexX,hex.HexY,(items_table[(6)*(0+idx)+0]),(Random(items_table[(6)*(0+idx)+2],items_table[(6)*(0+idx)+3])));  
				
			}
		}
	}
}
