

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}     

import void FindEncounter(Critter@[]&group,Item@car,uint x,uint y,uint&encounterDescriptor,bool&waitForAnswer,bool empty)from"worldmap";
import void InviteToEncounter(Critter@[]&group,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir)from"worldmap";
import uint GetGlobalMapRelief(uint x,uint y)from"worldmap";           

void global_process(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	int movementType=((@car!=null)?car.Proto.Car_MovementType:(0));
	int curXi=int(curX);
	int curYi=int(curY);
	
	if(processType==(0))
	{
		
		float lastDist=(sqrt((((curX)-(toX))*((curX)-(toX)))+(((curY)-(toY))*((curY)-(toY))))); 
		
		float speedPix=speed*float(__GlobalMapMoveTime)/1000.0f;
		float speedAngle=atan2(toY-curY,toX-curX);
		float speedX=cos(speedAngle)*speedPix;
		float speedY=sin(speedAngle)*speedPix;
		
		float speedMod=1.0f;
		if(movementType==(0))
		{  
			
			switch(GetGlobalMapRelief(curXi,curYi))
			{
				case 0x0:
				speedMod=1.00f;
				break;
				case 0x1:
				speedMod=0.55f;
				break;
				case 0x2:
				speedMod=0.60f;
				break;
				case 0x3:
				speedMod=0.65f;
				break;
				case 0x4:
				speedMod=0.70f;
				break;
				case 0x5:
				speedMod=0.75f;
				break;
				case 0x6:
				speedMod=0.80f;
				break;
				case 0x7:
				speedMod=0.85f;
				break;
				case 0x8:
				speedMod=0.90f;
				break;
				case 0x9:
				speedMod=0.95f;
				break;
				case 0xA:
				speedMod=1.00f;
				break;
				case 0xB:
				speedMod=1.10f;
				break;
				case 0xC:
				speedMod=1.20f;
				break;
				case 0xD:
				speedMod=1.30f;
				break;
				case 0xE:
				speedMod=1.40f;
				break;
				case 0xF:
				speedMod=1.50f;
				break;
				default:
				break;
			}
		}
		
		if((@car!=null)&&speedMod!=1.0f)
		{
			float pass=float(car.Proto.Car_Passability);
			if(pass>100.0f&&speedMod<1.0f)
			speedMod+=(1.0f-speedMod)*(pass-100.0f)/100.0f;
			else if(pass>100.0f&&speedMod>1.0f)
			speedMod-=(speedMod-1.0f)*(pass-100.0f)/100.0f;
			else if(pass<100.0f&&speedMod<1.0f)
			speedMod-=(1.0f-speedMod)*(100.0f-pass)/100.0f;
			else if(pass<100.0f&&speedMod>1.0f)
			speedMod+=(speedMod-1.0f)*(100.0f-pass)/100.0f;
		} 
		
		curX+=speedX*speedMod;
		curY+=speedY*speedMod;
		
		int oldXi=curXi;
		int oldYi=curYi;
		curXi=int(curX);
		curYi=int(curY); 
		
		if(oldXi!=curXi||oldYi!=curYi)
		{
			
			int gmWidth=__GlobalMapWidth*__GlobalMapZoneLength;
			int gmHeight=__GlobalMapHeight*__GlobalMapZoneLength;
			if(curXi<0||curYi<0||curXi>=gmWidth||curYi>=gmHeight)
			{
				if(curXi<0)
				curXi=0;
				if(curXi>=gmWidth)
				curXi=gmWidth-1;
				if(curYi<0)
				curYi=0;
				if(curYi>=gmHeight)
				curYi=gmHeight-1; 
				
				curX=float(curXi);
				curY=float(curYi);
				speed=0.0f;
				return;
			} 
			
			int relief=GetGlobalMapRelief(oldXi,oldYi);
			int steps=((((((curXi-oldXi)>0)?(curXi-oldXi):-(curXi-oldXi)))>((((curYi-oldYi)>0)?(curYi-oldYi):-(curYi-oldYi))))?((((curXi-oldXi)>0)?(curXi-oldXi):-(curXi-oldXi))):((((curYi-oldYi)>0)?(curYi-oldYi):-(curYi-oldYi))));
			int newXi=oldXi;
			int newYi=oldYi;
			if(steps>0)
			{
				float xx=float(oldXi);
				float yy=float(oldYi);
				float oxx=float(curXi-oldXi)/float(steps);
				float oyy=float(curYi-oldYi)/float(steps);
				
				for(int i=0;i<steps;i++)
				{
					xx+=oxx;
					yy+=oyy;
					int xxi=int(xx>=0.0f?xx+0.5f:xx-0.5f);
					int yyi=int(yy>=0.0f?yy+0.5f:yy-0.5f);
					
					uint relief_=GetGlobalMapRelief(xxi,yyi);
					if(movementType==(0)&&relief!=0&&relief_==0)
					break;
					if(movementType==(2)&&relief_!=0)
					break;
					
					newXi=xxi;
					newYi=yyi;
				}
			}
			
			if(newXi!=curXi||newYi!=curYi)
			{
				
				curX=float(newXi);
				curY=float(newYi);
				speed=0.0f;
				return;
			} 
			
			int oldZoneX=oldXi/__GlobalMapZoneLength;
			int oldZoneY=oldYi/__GlobalMapZoneLength;
			int curZoneX=curXi/__GlobalMapZoneLength;
			int curZoneY=curYi/__GlobalMapZoneLength; 
			
			if(oldZoneX!=curZoneX||oldZoneY!=curZoneY)
			{
				Critter@[]@group=cr.GetGlobalGroup();
				ScanZone(group,curZoneX,curZoneY);
			} 
			
			float curDist=(sqrt((((curX)-(toX))*((curX)-(toX)))+(((curY)-(toY))*((curY)-(toY)))));
			if(curDist<=0.01f||curDist>lastDist)
			{
				curX=toX;
				curY=toY;
				speed=0.0f;
				return;
			}
		} 
		
		if((@car!=null))
		{
			int fuel=car.Charge;
			int deterioration=car.Deterioration;
			
			if(fuel<=0||deterioration>=int(car.Proto.Car_MaxDeterioration))
			{
				uint str=(fuel<=0?(10255):(10256));
				cr.SayMsg((11),(3),str);
				speed=0.0f;
				return;
			} 
			
			fuel-=car.Proto.Car_FuelConsumption*__GlobalMapMoveTime/500;
			deterioration+=car.Proto.Car_DeteriorationRate*__GlobalMapMoveTime/500;
			if(fuel<0)
			fuel=0;
			if(deterioration>int(car.Proto.Car_MaxDeterioration))
			deterioration=int(car.Proto.Car_MaxDeterioration);
			
			if(fuel!=int(car.Charge)||deterioration!=int(car.Deterioration))
			{
				car.Charge=fuel;
				car.Deterioration=deterioration;
				car.Update();
			}
		}
		
		if(++cr.GlobalMapMoveCounter%(__EncounterTime/__GlobalMapMoveTime)==0)
		{
			Critter@[]@group=cr.GetGlobalGroup(); 
			
			Critter@leader=group[0];
			if(int(group.length())>leader.Stat[(3)]+leader.Perk[(399)])
			{
				leader.SayMsg((11),(3),(10258));
				speed=0.0f;
				return;
			} 
			
			if(GetVisibleLocations(curXi,curYi,0,cr,null)==0)
			FindEncounter(group,car,curXi,curYi,encounterDescriptor,waitForAnswer,false);
		}
	}
	else if(processType==(1))
	{
		
		if(movementType==(2)&&GetGlobalMapRelief(curXi,curYi)==0)
		{
			
			bool landFounded=false;
			const int maxx=__GlobalMapWidth*__GlobalMapZoneLength;
			const int maxy=__GlobalMapHeight*__GlobalMapZoneLength;
			for(int ox=-1;ox<=1;ox++)
			{
				for(int oy=-1;oy<=1;oy++)
				{
					int xx=curXi+ox;
					int yy=curYi+oy;
					if(xx>=0&&xx<maxx&&yy>=0&&yy<maxy&&GetGlobalMapRelief(xx,yy)!=0)
					{
						FindEncounter(cr.GetGlobalGroup(),car,xx,yy,encounterDescriptor,waitForAnswer,true);
						ox=oy=2;
						landFounded=true;
					}
				}
			}
			
			if(!landFounded)
			FindEncounter(cr.GetGlobalGroup(),car,curXi,curYi,encounterDescriptor,waitForAnswer,true);
		}
		else
		{
			FindEncounter(cr.GetGlobalGroup(),car,curXi,curYi,encounterDescriptor,waitForAnswer,true);
		}
	}
	else if(processType==(4))
	{
		Critter@[]@group=cr.GetGlobalGroup(); 
		
		Critter@leader=group[0];
		if(int(group.length())>leader.Stat[(3)]+leader.Perk[(399)])
		{
			leader.SayMsg((11),(3),(10258));
			if((@car!=null))
			CheckForLocationWithoutParking(cr,car,curX,curY);
			return;
		} 
		
		speed=(2.4f);
		if(cr.GetAccess()>=(1))
		speed*=20.0f;
		
		if((@car!=null))
		{
			
			uint strNum=0;
			if(group.length()>car.Proto.Car_CrittersCapacity)
			strNum=(10257);
			else if(car.Charge==0)
			strNum=(10255);
			else if(car.Deterioration>=car.Proto.Car_MaxDeterioration)
			strNum=(10256);
			if(strNum!=0)
			{
				leader.SayMsg((11),(3),strNum);
				speed=0.0f;
				CheckForLocationWithoutParking(cr,car,curX,curY);
				return;
			}
			
			speed=car.Proto.Car_Speed*(2.4f)/20.0f;  
			
			if(car.Proto.Car_MovementType==(2))
			{
				if(GetGlobalMapRelief(curXi,curYi)!=0)
				{
					const int maxx=__GlobalMapWidth*__GlobalMapZoneLength;
					const int maxy=__GlobalMapHeight*__GlobalMapZoneLength;
					const int[]ox={-1,0,1,0};
					const int[]oy={0,-1,0,1};
					for(int i=1,ii=__GlobalMapZoneLength;i<=ii;i++)
					{
						for(int j=0;j<4;j++)
						{
							int xx=curXi+ox[j]*i;
							int yy=curYi+oy[j]*i;
							if(xx>=0&&xx<maxx&&yy>=0&&yy<maxy&&GetGlobalMapRelief(xx,yy)==0)
							{
								curX=float(xx);
								curY=float(yy);
								
								j=4;
								i=ii;
							}
						}
					}
				}
			}
		}
		else
		{
			
			int speedDiv=100-cr.Perk[(344)]*25;
			if(speedDiv<=0)
			speedDiv=1;
			speed=speed*100.0f/float(speedDiv);
		}
	}
	else if(processType==(6))
	{ 
		
		if(curX==toX&&curY==toY)
		{  
			
		}
	}
	else if(processType==(7))
	{
		if(GetGlobalMapRelief(curXi,curYi)==0)
		{
			
			Critter@[]@group=cr.GetGlobalGroup();
			group[0].SayMsg((11),(3),(10259));
			return;
		}
		
		cr.LeaveGlobalGroup();
	}
}   

void global_invite(Critter&leader,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir)
{
	
	if(encounterDescriptor==uint(-1))
	{
		Location@[]locations;
		if(GetLocations(leader.WorldX,leader.WorldY,0,locations)!=0)
		{
			Location@loc=locations[0];
			Map@map=loc.GetMapByIndex(0);
			if((@map!=null)&&map.GetEntireCoords(0,0,hexX,hexY))
			{
				mapId=map.Id;
				dir=0xFF;
			}
		}
		return;
	} 
	
	InviteToEncounter(leader.GetGlobalGroup(),car,encounterDescriptor,combatMode,mapId,hexX,hexY,dir);
}

void ScanZone(Critter@[]&group,int zx,int zy)
{
	uint[]locIds1,locIds2;
	bool locIds2Founded=false;
	
	GetZoneLocationIds(zx,zy,1,locIds1);
	
	for(uint i=0;i<group.length();i++)
	{
		Critter@cr=group[i];
		if(!cr.IsPlayer())
		continue;
		
		int lookLen=cr.PerkBase[(346)]!=0?2:1;
		
		if(lookLen==2&&!locIds2Founded)
		{
			GetZoneLocationIds(zx,zy,2,locIds2);
			locIds2Founded=true;
		} 
		
		int mapw=__GlobalMapWidth;
		int maph=__GlobalMapHeight;
		for(int x=-lookLen;x<=lookLen;x++)
		{
			for(int y=-lookLen;y<=lookLen;y++)
			{
				int zx_=zx+x;
				int zy_=zy+y;
				if(zx_>=0&&zx_<mapw&&zy_>=0&&zy_<maph)
				{
					int fog=(zx==zx_&&zy==zy_?(3):(1));
					if(cr.GetFog(zx_,zy_)<fog)
					cr.SetFog(zx_,zy_,fog);
				}
			}
		} 
		
		uint[]@locIds=lookLen==1?locIds1:locIds2;
		for(uint j=0;j<locIds.length();j++)
		{
			uint locId=locIds[j];
			if(!cr.IsKnownLoc(true,locId))
			{
				Location@loc=GetLocation(locId);
				if((@loc!=null))
				cr.SetKnownLoc(true,locId);
			}
		}
	}
}

void CheckForLocationWithoutParking(Critter&cr,Item&car,float&curX,float&curY)
{
	Location@[]locations;
	if(GetVisibleLocations(int(curX),int(curY),0,cr,locations)!=0)
	{
		Location@loc=locations[0];
		Map@map=loc.GetMapByIndex(0);
		
		bool placeFounded=false;
		Entire[]entires;
		ParseEntires(map,entires,car.Proto.Car_Entrance);
		for(uint i=0;i<entires.length();i++)
		{
			if(map.CheckPlaceForItem(entires[i].HexX,entires[i].HexY,car.GetProtoId()))
			{
				placeFounded=true;
				break;
			}
		}
		
		if(!placeFounded)
		{
			curX=loc.WorldX+int(loc.Radius)*(Random(0,1)==0?int(1):int(-1));
			curY=loc.WorldY+int(loc.Radius)*(Random(0,1)==0?int(1):int(-1));
		}
	}
}
