

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import void CombatAttack(Critter&cr,Critter&target,ProtoItem&weapon,uint8 weaponMode,ProtoItem@ammo)from"combat";
import uint EraseAttackPlane(Critter&npc,Critter&target)from"npc_planes";
import uint8 GetDir(Critter&cr0,Critter&cr1)from"merc";
import bool GetFreeHex(Map&map,uint radius,uint16&hx,uint16&hy)from"caravan";
import int GetDeteriorationProcent(Item&item)from"repair";
import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs";
import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";                                                                                                                                

class CommonPattern
{
	
	bool _MsgReact(Critter&sender,Critter&reciever,uint msg)
	{
		uint dist=GetCrittersDistantion(sender,reciever);
		if(dist==0)
		return false;
		if(sender.Id==reciever.Id)
		return false;
		
		switch(msg)
		{
			case(156):
			return(dist<=(12));
			case(157):
			return true;
			default:
			break;
		}
		return false;
	}  
	
	void _TryUseStim(Critter&cr)
	{
		if(!cr.IsLife())
		return;
		if(cr.Stat[(72)]*100>cr.Stat[(7)]*50)
		return;
		
		if(cr.CountItem((144))>0||cr.CountItem((40))>0)
		{
			Item@item=cr.GetItem((cr.CountItem((144))>0?(144):(40)),-1);
			UseDrugOn(cr,cr,item);
			cr.Animate(0,(28),null,true,true);
			return;
		}
	} 
	
	void _ShowCritter(Critter&cr,Critter&showCrit)
	{
		if(!cr.IsCurPlane((1))&&showCrit.IsPlayer())
		{
			NpcPlane@[]planes;
			uint count=cr.GetPlanes(planes);
			if(count>0)
			{
				uint critId=showCrit.Id;
				for(uint i=0;i<count;i++)
				{
					if(planes[i].Attack_TargId==critId)
					return;
				}
			}
			AttackPlayer(cr,showCrit);
		}
	} 
	
	bool _Attacked(Critter&cr,Critter&attacker)
	{
		_TryUseStim(cr);
		cr.SendMessage((356),0,(2));
		return false;
	} 
	
	void _Dead(Critter&cr,Critter@killer)
	{
		if(!cr.IsDead())
		return;
		Item@[]items;
		uint iCount=cr.GetItems(-1,items);
		if(iCount>0)
		{
			for(uint i=0;i<iCount;i++)
			{
				Item@item=items[i];
				if(!(@item!=null))
				continue;
				
				SetDeterioration(item,Random(50,90));
				
				if(item.GetType()==(4))
				{
					do{if(item.GetCount()>(uint(item.GetCount()-Random(1,30)))) item.SetCount(item.GetCount()-(uint(item.GetCount()-Random(1,30))));else DeleteItem(item);}while(false);
				}
			}
		}
	} 
	
	int _PlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		if(plane.Type==(1))
		{
			Critter@target=GetCritter(plane.Attack_TargId);
			if((@target!=null)&&target.Stat[(106)]==cr.Stat[(106)])
			{
				EraseAttackPlane(cr,target);
				EraseAttackPlane(target,cr);
				return(2);
			}
		}
		return(0);
	}
	
	void AttackPlayer(Critter&cr,Critter&player)
	{
		AttackPlayer(cr,0,player);
	}
	
	void AttackPlayer(Critter&cr,uint priority,Critter&player)
	{
		if(!player.IsPlayer())
		return;
		AddAttackPlane(cr,priority,player);
	}
	
	void SetEvents(Critter&cr)
	{}
}  

bool _GetLimits(uint[]arr,uint&min,uint&max)
{
	if(arr.length()==0)
	return false;
	min=arr[0];
	max=arr[0];
	for(uint i=0;i<arr.length();i++)
	{
		min=(min<arr[i]?min:arr[i]);
		max=(max>arr[i]?max:arr[i]);
	}
	
	return true;
}

bool _GetFirstMinIndex(uint[]arr,uint&minIndex)
{
	uint min=0;
	uint max=0;
	if(!_GetLimits(arr,min,max))
	return false;
	
	for(uint i=0;i<arr.length();i++)
	{
		if(arr[i]==min)
		minIndex=i;
	}
	return false;
}

bool _GetRandomMaxIndex(uint[]arr,uint&maxIndex)
{
	uint min=0;
	uint max=0;
	if(!_GetLimits(arr,min,max))
	return false;
	uint[]maxes;
	for(uint i=0;i<arr.length();i++)
	{
		if(arr[i]==max)
		{
			maxes.insertLast(i);
		}
	}
	maxIndex=maxes[Random(0,maxes.length()-1)];
	return true;
}

void _CritterInit(Critter&cr,bool firstTime)
{
	pattern.SetEvents(cr);
}

void DL(string s)
{
	
}          

const int[]TeamsTable=
{  
	
	(5),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(5),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(1),(0),(0),(3),(0),(0),(0),(0),(4),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(3),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(2),(2),(0),(0),(0),(0),(4),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(6),(4),(0),(0),(0),(0),(5),(0),(0),(4),(0),(4),(1),(0),(0),(0),(0),(0),(0),(4),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(1),(1),(0),(0),(0),(5),(0),(0),(0),(0),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(4),(1),(0),(0),(0),(5),(0),(0),(0),(0),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(5),(5),(1),(1),(0),(0),(5),(1),(1),(4),(4),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(4),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(4),(0),(0),(0),(0),(5),(0),(0),(0),(0),(0),(4),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(4),(4),(0),(0),(0),(0),(1),(0),(0),(0),(0),(1),(5),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(4),(0),(0),(0),(0),(5),(1),(0),(0),(0),(1),(4),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(3),(4),(0),(0),(0),(0),(5),(0),(0),(4),(0),(1),(4),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(3),(1),(1),(0),(0),(0),(5),(0),(0),(0),(0),(5),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(1),(1),(1),(0),(0),(0),(1),(1),(1),(1),(1),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(3),(4),(4),(0),(0),(0),(5),(0),(0),(0),(0),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(3),(1),(1),(0),(0),(0),(5),(0),(0),(0),(0),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(1),(4),(4),(0),(0),(0),(5),(0),(0),(0),(0),(0),(4),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(4),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(3),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(6),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(3),(3),(5),(5),(1),(1),(0),(1),(0),(0),(0),(1),(1),(1),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),(0),
	(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(0),(1),
	
};                                  

const int[]medicStats_=
{
	
	90,120,70,100,10,20,10,120,20,50,
	100,130,100,150,20,30,12,140,30,50,
	120,150,130,180,30,40,14,160,40,50,
	140,250,170,220,40,50,16,180,40,55,
	200,300,200,300,50,80,20,200,50,65
};                

class MedicPattern:CommonPattern
{
	void _Dead(Critter&cr,Critter@killer)
	{
		CommonPattern::_Dead(cr,killer);
		
		if(cr.CountItem((144))>0)
		{
			do{if(cr.GetItem((144),-1).GetCount()>(cr.CountItem((144)))) cr.GetItem((144),-1).SetCount(cr.GetItem((144),-1).GetCount()-(cr.CountItem((144))));else DeleteItem(cr.GetItem((144),-1));}while(false);
		}
		if(cr.CountItem((40))>0)
		{
			do{if(cr.GetItem((40),-1).GetCount()>(cr.CountItem((40)))) cr.GetItem((40),-1).SetCount(cr.GetItem((40),-1).GetCount()-(cr.CountItem((40))));else DeleteItem(cr.GetItem((40),-1));}while(false);
		}
	}
	
	void _Message(Critter&medic,Critter&fromCr,int message,int value)
	{ 
		
		if((TeamsTable[(((fromCr.Stat[(106)])<51?(fromCr.Stat[(106)]):0)*51+((medic.Stat[(106)])<51?(medic.Stat[(106)]):0))])==(1))
		{
			return;
		}
		
		if(!(@medic.GetMap()!=null)||!(@fromCr.GetMap()!=null))
		return;
		
		switch(message)
		{
			case(356):
			DL("healing needed");
			MoveForHealTeamMate(medic,fromCr);
			break;
			default:
			break;
		}
	}
	
	int _PlaneEnd(Critter&medic,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		DL("medic plane end");
		
		if(plane.Identifier==(124)&&reason==(30))
		{
			Critter@teammate=GetCritter(plane.IdentifierExt);
			if((@teammate!=null))
			{
				uint dist=GetCrittersDistantion(medic,teammate);
				if(dist<2)
				{
					HealTeammate(medic,teammate);
				}
				else
				{
					
					AddMiscPlane(teammate,(82),__FullSecond+60,null);
					MoveForHealTeamMate(medic,teammate);
				}
			}
		}
		
		return(0);
	}
	
	bool _Attacked(Critter&cr,Critter&attacker)
	{
		_TryUseStim(cr);
		cr.SendMessage((356),0,(2));
		return false;
	}
	
	void SetEvents(Critter&cr)
	{
		cr.ModeBase[(517)]=1;
		cr.SetEvent((18),"_MedicMessage");
		cr.SetEvent((36),"_MedicPlaneEnd");
		cr.SetEvent((16),"_MedicAttacked");
		cr.SetEvent((35),"_MedicPlaneBegin");
		cr.SetEvent((2),"_MedicDead");
	} 
	
	bool CheckTeamMateNeedHeal(Critter&medic,Critter&teammate)
	{
		if(teammate.IsDead())
		return false;  
		
		if(medic.GetPlanes((124),teammate.Id,null)>0)
		return false;
		
		return((100*teammate.Stat[(72)]<teammate.Stat[(7)]*50));
	}
	
	void MoveForHealTeamMate(Critter&medic,Critter&teammate)
	{
		
		if(teammate.IsDead())
		return;
		if(!CheckTeamMateNeedHeal(medic,teammate))
		return; 
		
		AddWalkPlane(medic,(80),(124),teammate.Id,teammate.HexX,teammate.HexY,GetDir(medic,teammate),(medic.IsCurPlane((1))?false:true),1);
	}
	
	void HealTeammate(Critter&medic,Critter&teammate)
	{
		uint stims=medic.CountItem((144));
		
		bool needHeal=((100*teammate.Stat[(72)]<teammate.Stat[(7)]*50));
		bool needDoctor=false;
		
		for(uint i=(__DamageBegin);i<=(__DamageEnd);i++)
		{
			if(teammate.Damage[i]>0)
			{
				needDoctor=true;
				break;
			}
		}
		
		bool useStim=(stims>0?true:false);
		bool canDoctor=(medic.Timeout[(231)]>0?false:true);
		bool canHeal=(useStim?true:(medic.Timeout[(230)]>0));
		
		if(needDoctor&&canDoctor)
		{   
			
		}
		
		if(canHeal&&needHeal)
		{
			if(stims>0)
			{
				Item@stim=medic.GetItem((144),-1);
				if((@stim!=null))
				{
					DL("Принудительно лечим стимпаками");
					
					medic.SetDir(GetDir(medic,teammate));
					medic.Animate(0,(28),null,true,true);
					UseDrugOn(medic,teammate,stim);
					do{if(stim.GetCount()>(1)) stim.SetCount(stim.GetCount()-(1));else DeleteItem(stim);}while(false);
					return;
				}
			}
		}
	}
	
} 

MedicPattern pattern; 

void _MedicDead(Critter&cr,Critter@killer)
{
	pattern._Dead(cr,killer);
}

int _MedicPlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return pattern._PlaneBegin(cr,plane,reason,someCr,someItem);
}

void _MedicMessage(Critter&medic,Critter&fromCr,int message,int value)
{
	pattern._Message(medic,fromCr,message,value);
}

bool _MedicAttacked(Critter&cr,Critter&attacker)
{
	return pattern._Attacked(cr,attacker);
}

int _MedicPlaneEnd(Critter&medic,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return pattern._PlaneEnd(medic,plane,reason,someCr,someItem);
}

void SetMedicStats(Critter&cr,uint8 lvl)
{
	lvl=(((lvl)>((5)-1))?((5)-1):(((lvl)<(0))?(0):(lvl)));
	if(lvl<1)
	return;
	cr.StatBase[(7)]=(medicStats_[(((lvl<(5))?lvl:0)*10)+7]);
	cr.StatBase[(72)]=cr.Stat[(7)];
	cr.StatBase[(77)]=24;
	cr.StatBase[(8)]=(medicStats_[(((lvl<(5))?lvl:0)*10)+6]);
	cr.StatBase[(14)]=(medicStats_[(((lvl<(5))?lvl:0)*10)+4]);
	for(int i=(23);i<=(31);i++)
	{
		if(i!=(28))
		{
			cr.StatBase[i]=(Random(medicStats_[(((lvl<(5))?lvl:0)*10)+8],medicStats_[(((lvl<(5))?lvl:0)*10)+9]));
		}
	}
	
	cr.SkillBase[(206)]=(Random(medicStats_[(((lvl<(5))?lvl:0)*10)+2],medicStats_[(((lvl<(5))?lvl:0)*10)+3]));
	cr.SkillBase[(207)]=(Random(medicStats_[(((lvl<(5))?lvl:0)*10)+2],medicStats_[(((lvl<(5))?lvl:0)*10)+3]));
	cr.SkillBase[(200)]=(Random(medicStats_[(((lvl<(5))?lvl:0)*10)],medicStats_[(((lvl<(5))?lvl:0)*10)+1]));
	cr.SkillBase[(202)]=(Random(medicStats_[(((lvl<(5))?lvl:0)*10)],medicStats_[(((lvl<(5))?lvl:0)*10)+1]));
	
	cr.TraitBase[(557)]=1;
	
	cr.PerkBase[(306)]=1;
	cr.PerkBase[(398)]=1;
	cr.PerkBase[(305)]=1;
}

void _MedicInit(Critter&cr,bool firstTime)
{
	_CritterInit(cr,firstTime);
} 

void testMedic(Critter&cr,int lvl,int team,int bag)
{
	int[]params={(107),bag,(106),team};
	int[]items={(144),20,(0)};
	Critter@npc=cr.GetMap().AddNpc(222,cr.HexX-3,cr.HexY-3,0,params,items,"pattern_medic@init");
	SetMedicStats(npc,lvl);
}  

