

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}                                                          

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes"; 

class PassAccept
{
	uint PlayerId;
	uint PassType;
	uint CancelTime;
	uint GatesId;
}

class GatesControl
{
	uint GatesId;
	uint NpcRoleOuters;
	uint NpcRoleInners;
	uint NpcRoleHelpers;
	uint GatesNumber;
	uint[]badList;
	bool badListLoaded;
	PassAccept[]goodList;
	bool goodListLoaded;
	
	GatesControl()
	{
		this.badListLoaded=false;
		this.goodListLoaded=false;
	}
	
	Map@GatesMap()
	{
		Item@gates=GetItem(this.GatesId);
		uint mapId=gates.MapId;
		if(mapId==0)
		return null;
		return GetMap(mapId);
	}
	
	Item@Gates()
	{
		return GetItem(this.GatesId);
	}
	
	uint GetGuards(uint8 role,int findType,Critter@[]&guards)
	{
		int npcRole=0;
		switch(role)
		{
			case(1):
			npcRole=this.NpcRoleOuters;
			break;
			case(2):
			npcRole=this.NpcRoleInners;
			break;
			case(3):
			default:
			npcRole=this.NpcRoleHelpers;
		}
		if(npcRole==0)
		return 0;
		uint guardsNum=0;
		Map@map=this.GatesMap();
		if((@map!=null))
		{
			guardsNum=map.GetNpcCount(npcRole,findType);
			;
			if(guardsNum>0)
			{
				for(uint i=0;i<guardsNum;i++)
				{
					Critter@guard=map.GetNpc(npcRole,findType,i);
					if((@guard!=null))
					{
						guards.insertLast(@guard);
					}
				}
			}
		}
		return guards.length();
	}
	
	Critter@GetClosestGuard(uint8 role,int findType,Critter&player)
	{
		Critter@closestGuard;
		uint distance=666;
		uint curD=distance;
		Critter@[]guards;
		if(GetGuards(role,findType,guards)>0)
		{
			for(uint i=0,l=guards.length();i<l;i++)
			{
				curD=GetCrittersDistantion(player,guards[i]);
				if(curD<distance)
				{
					distance=curD;
					@closestGuard=guards[i];
				}
			}
		}
		return closestGuard;
	}
	
	int GetPlayerGatesDisposition(Critter&player)
	{
		Item@gates=this.Gates();
		if(!(@gates!=null))
		return(4);
		if(player.HexX==gates.HexX&&gates.HexY==player.HexY)
		return(2);
		Map@map=this.GatesMap();
		if(!(@map!=null))
		return(4);
		Entire[]entires;
		if(ParseEntires(map,entires,(75))>0)
		{
			for(uint i=0,l=entires.length();i<l;i++)
			{
				if(player.HexX==entires[i].HexX&&entires[i].HexY==player.HexY)
				{
					return(1);
				}
			}
		}
		if(ParseEntires(map,entires,(74))>0)
		{
			for(uint i=0,l=entires.length();i<l;i++)
			{
				if(player.HexX==entires[i].HexX&&entires[i].HexY==player.HexY)
				{
					return(0);
				}
			}
		}
		return(3);
	}
	
	bool CheckPlayerIsBad(Critter&player)
	{
		if(!this.badListLoaded)
		{
			this.GetBadList();
		}
		for(uint i=0,l=this.badList.length();i<l;i++)
		{
			if(player.Id==this.badList[i])
			{
				return true;
			}
		}
		return false;
	}
	
	void SetPlayerIsBad(Critter&player)
	{
		if(CheckPlayerIsBad(player))
		return;
		this.badList.insertLast(player.Id);
		SaveBadList();
	}
	
	void SetPlayerIsNotBad(Critter&player)
	{
		if(!CheckPlayerIsBad(player))
		return;
		for(uint i=0,l=this.badList.length();i<l;i++)
		{
			if(player.Id==this.badList[i])
			{
				this.badList.removeAt(i);
				break;
			}
		}
		SaveBadList();
	}
	
	void SaveBadList()
	{
		if(IsAnyData(("GATES_"+this.GatesId+"_BAD_LIST")))
		{
			EraseAnyData(("GATES_"+this.GatesId+"_BAD_LIST"));
		}
		SetAnyData(("GATES_"+this.GatesId+"_BAD_LIST"),this.badList);
	}
	
	uint GetBadList()
	{
		this.badList.resize(0);
		if(this.GatesId<1)
		return 0;
		if(!IsAnyData(("GATES_"+this.GatesId+"_BAD_LIST")))
		return 0;
		GetAnyData(("GATES_"+this.GatesId+"_BAD_LIST"),this.badList);
		this.badListLoaded=(this.badList.length()>0);
		return this.badList.length();
	}
	
	void AttackPlayer(Critter&player,uint8 role)
	{
		Critter@[]guards;
		if(this.GetGuards(role,(0x01)|(0x20),guards)>0)
		{
			for(uint i=0,l=guards.length();i<l;i++)
			{
				AddAttackPlane(guards[i],0,player);
			}
		}
	}
	
	bool CheckPlayerIsGood(Critter&player,uint passType)
	{
		if(!this.goodListLoaded)
		this.GetGoodList();
		;
		for(uint i=0,l=this.goodList.length();i<l;i++)
		{
			;
			if(this.goodList[i].PlayerId==player.Id&&this.goodList[i].PassType==passType)
			{
				return true;
			}
		}
		return false;
	}
	
	void SetPlayerIsGood(Critter&player,uint passType,uint minuteExpire)
	{
		if(CheckPlayerIsGood(player,passType))
		return;
		PassAccept@pass=PassAccept();
		pass.PlayerId=player.Id;
		pass.PassType=passType;
		pass.CancelTime=minuteExpire;
		pass.GatesId=this.GatesId;
		if(pass.CancelTime*60>__FullSecond)
		{
			this.goodList.insertLast(pass);
			SaveGoodList();
		}
	}
	
	void GetGoodList()
	{
		if(!IsAnyData(("GATES_"+this.GatesId+"_GOOD_LIST")))
		return;
		uint[]data;
		if(!GetAnyData(("GATES_"+this.GatesId+"_GOOD_LIST"),data))
		return;
		if(data.length()==0)
		return;
		uint goodPlayers=data[0];
		uint idx=1;
		for(uint i=0;i<goodPlayers;i++)
		{
			if(data.length()<=idx+3)
			break;
			PassAccept@pass=PassAccept();
			pass.PlayerId=data[idx];
			pass.PassType=data[idx+1];
			pass.CancelTime=data[idx+2];
			pass.GatesId=data[idx+3];
			idx+=4;
			if(pass.CancelTime*60>__FullSecond)
			{
				this.goodList.insertLast(pass);
			}
		}
		this.goodListLoaded=true;
		this.SaveGoodList();
	}
	
	void SaveGoodList()
	{
		if(!this.goodListLoaded)
		this.GetGoodList();
		uint goodPlayers=this.goodList.length();
		if(goodPlayers==0)
		{
			if(IsAnyData(("GATES_"+this.GatesId+"_GOOD_LIST")))
			EraseAnyData(("GATES_"+this.GatesId+"_GOOD_LIST"));
			return;
		}
		uint[]data={goodPlayers};
		for(uint i=0;i<goodPlayers;i++)
		{
			PassAccept@pass=this.goodList[i];
			if(!(@pass!=null)||pass.CancelTime<__FullSecond)
			{
				if(data.length()>0)
				data.removeLast();
				continue;
			}
			data.insertLast(pass.PlayerId);
			data.insertLast(pass.PassType);
			data.insertLast(pass.CancelTime);
			data.insertLast(pass.GatesId);
		}
		if(IsAnyData(("GATES_"+this.GatesId+"_GOOD_LIST")))
		EraseAnyData(("GATES_"+this.GatesId+"_GOOD_LIST"));
		SetAnyData(("GATES_"+this.GatesId+"_GOOD_LIST"),data);
	}
}  

GatesControl@GatesControlFromItem(Item&item)
{
	GatesControl@gc=GatesControl();
	gc.GatesId=item.Id;
	gc.NpcRoleOuters=item.Val0;
	gc.NpcRoleInners=item.Val1;
	gc.NpcRoleHelpers=item.Val2;
	gc.GatesNumber=item.Val3;
	return gc;
}

GatesControl@FindGatesControl(Map&map,int number)
{
	Item@[]gates;
	if(map.GetItemsByType((9),gates)==0)
	return null;
	for(uint i=0,l=gates.length();i<l;i++)
	{
		if(gates[i].Val3==number)
		return GatesControlFromItem(gates[i]);
	}
	return null;
}  

void _GatesInit(Item&gates,bool firstTime)
{
	gates.SetEvent((4),"_GatesSkill");
	gates.SetEvent((7),"_GatesWalk");
}

bool _GatesSkill(Item&gates,Critter&player,int skill)
{
	GatesControl@gc=GatesControlFromItem(gates);
	if(!(@gc!=null)||!player.IsPlayer())
	{
		
		if(gates.Val5==0)
		gates.Val5=CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_CloseGates",gates.Id,true);
		
		return false;
	}
	uint pos=gc.GetPlayerGatesDisposition(player);
	if(pos==(4)||pos==(3))
	return true;
	uint8 guardRole=(1);
	if(pos==(1))
	guardRole=(2);
	
	Critter@guard=gc.GetClosestGuard(guardRole,(0x01)|(0x20),player);
	if(!(@guard!=null))
	{
		if(gates.Val5==0)
		gates.Val5=CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_CloseGates",gates.Id,true);
		return false;
	}
	string lex="$pname"+GetPlayerName(player.Id)+"$sex"+(player.Stat[(71)]==(0)?"":"а");
	if(gc.CheckPlayerIsBad(player))
	{
		gc.AttackPlayer(player,guardRole);
		guard.SayMsg((4),(0),(5401),lex);
		gc.SetPlayerIsNotBad(player);
	}
	else
	{
		guard.SayMsg((4),(0),(5400),lex);
		gc.SetPlayerIsBad(player);
	}
	return true;
}

void _GatesWalk(Item&gates,Critter&player,bool entered,uint8 dir)
{
	if(!player.IsPlayer())
	return;
	GatesControl@gc=GatesControlFromItem(gates);
	if(!(@gc!=null))
	return;
	
	if(!gc.CheckPlayerIsGood(player,(1))&&!gc.CheckPlayerIsGood(player,(2)))
	{
		Critter@guard=gc.GetClosestGuard((3),(0x01)|(0x20),player);
		if((@guard!=null))
		{
			guard.SayMsg((3),(0),(5402));
		}
		gc.AttackPlayer(player,(3));
	}
}   

bool d_CheckPlayerIsGood(Critter&player,Critter@npc,int gateNumber,int passType)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return false;
	GatesControl@gc=FindGatesControl(map,gateNumber);
	;
	if((@gc!=null))
	{
		;
		return gc.CheckPlayerIsGood(player,passType);
	}
	return false;
}

void r_SetPlayerAccess(Critter&player,Critter@npc,int gateNumber,int passType,int time)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	GatesControl@gc=FindGatesControl(map,gateNumber);
	if((@gc!=null))
	{
		gc.SetPlayerIsGood(player,passType,__FullSecond+time*60);
	}
}

void r_OpenGates(Critter&player,Critter@npc,int gateNumber,int time)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	GatesControl@gc=FindGatesControl(map,gateNumber);
	if((@gc!=null))
	{
		Item@gates=gc.Gates();
		if(!(@gates!=null))
		return;
		if(gates.Val5!=0)
		return;
		gates.Val5=CreateTimeEvent(__FullSecond+time*60,"e_CloseGates",gc.GatesId,true);
		if(gates.Val5!=0)
		{
			gates.LockerOpen();
		}
	}
}

uint e_CloseGates(uint[]@values)
{
	
	Item@gates=GetItem(values[0]);
	if((@gates!=null))
	{
		gates.Val5=0;
		Map@map=GetMap(gates.MapId);
		if(!(@map!=null))
		return 0;
		uint16 hX=gates.HexX;
		uint16 hY=gates.HexY;
		Critter@cr=map.GetCritter(hX,hY);
		if((@cr!=null))
		{
			if(GetNearEntire(map,(74),hX,hY))
			{
				cr.TransitToMap(map.Id,hX,hY,GetDirection(hX,hY,gates.HexX,gates.HexY));
			}
		}
		gates.LockerClose();
	}
	return 0;
}
