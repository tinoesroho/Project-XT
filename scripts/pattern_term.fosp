                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import void CombatAttack(Critter&cr,Critter&target,ProtoItem&weapon,uint8 weaponMode,ProtoItem@ammo)from"combat";
import uint EraseAttackPlane(Critter&npc,Critter&target)from"npc_planes";
import uint8 GetDir(Critter&cr0,Critter&cr1)from"merc";
import bool GetFreeHex(Map&map,uint radius,uint16&hx,uint16&hy)from"caravan";
import int GetDeteriorationProcent(Item&item)from"repair";
import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs";
import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";                                                                                                                                

class CommonPattern
{
	
	bool _MsgReact(Critter&sender,Critter&reciever,uint msg)
	{
		uint dist=GetCrittersDistantion(sender,reciever);
		if(dist==0)
		return false;
		if(sender.Id==reciever.Id)
		return false;
		
		switch(msg)
		{
			case(156):
			return(dist<=(12));
			case(157):
			return true;
			default:
			break;
		}
		return false;
	}  
	
	void _TryUseStim(Critter&cr)
	{
		if(!cr.IsLife())
		return;
		if(cr.Stat[(72)]*100>cr.Stat[(7)]*50)
		return;
		
		if(cr.CountItem((144))>0||cr.CountItem((40))>0)
		{
			Item@item=cr.GetItem((cr.CountItem((144))>0?(144):(40)),-1);
			UseDrugOn(cr,cr,item);
			cr.Animate(0,(28),null,true,true);
			return;
		}
	} 
	
	void _ShowCritter(Critter&cr,Critter&showCrit)
	{
		if(!cr.IsCurPlane((1))&&showCrit.IsPlayer())
		{
			NpcPlane@[]planes;
			uint count=cr.GetPlanes(planes);
			if(count>0)
			{
				uint critId=showCrit.Id;
				for(uint i=0;i<count;i++)
				{
					if(planes[i].Attack_TargId==critId)
					return;
				}
			}
			AttackPlayer(cr,showCrit);
		}
	} 
	
	bool _Attacked(Critter&cr,Critter&attacker)
	{
		_TryUseStim(cr);
		cr.SendMessage((356),0,(2));
		return false;
	} 
	
	void _Dead(Critter&cr,Critter@killer)
	{
		if(!cr.IsDead())
		return;
		Item@[]items;
		uint iCount=cr.GetItems(-1,items);
		if(iCount>0)
		{
			for(uint i=0;i<iCount;i++)
			{
				Item@item=items[i];
				if(!(@item!=null))
				continue;
				
				SetDeterioration(item,Random(50,90));
				
				if(item.GetType()==(4))
				{
					do{if(item.GetCount()>(uint(item.GetCount()-Random(1,30)))) item.SetCount(item.GetCount()-(uint(item.GetCount()-Random(1,30))));else DeleteItem(item);}while(false);
				}
			}
		}
	} 
	
	int _PlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		if(plane.Type==(1))
		{
			Critter@target=GetCritter(plane.Attack_TargId);
			if((@target!=null)&&target.Stat[(106)]==cr.Stat[(106)])
			{
				EraseAttackPlane(cr,target);
				EraseAttackPlane(target,cr);
				return(2);
			}
		}
		return(0);
	}
	
	void AttackPlayer(Critter&cr,Critter&player)
	{
		AttackPlayer(cr,0,player);
	}
	
	void AttackPlayer(Critter&cr,uint priority,Critter&player)
	{
		if(!player.IsPlayer())
		return;
		AddAttackPlane(cr,priority,player);
	}
	
	void SetEvents(Critter&cr)
	{}
}  

bool _GetLimits(uint[]arr,uint&min,uint&max)
{
	if(arr.length()==0)
	return false;
	min=arr[0];
	max=arr[0];
	for(uint i=0;i<arr.length();i++)
	{
		min=(min<arr[i]?min:arr[i]);
		max=(max>arr[i]?max:arr[i]);
	}
	
	return true;
}

bool _GetFirstMinIndex(uint[]arr,uint&minIndex)
{
	uint min=0;
	uint max=0;
	if(!_GetLimits(arr,min,max))
	return false;
	
	for(uint i=0;i<arr.length();i++)
	{
		if(arr[i]==min)
		minIndex=i;
	}
	return false;
}

bool _GetRandomMaxIndex(uint[]arr,uint&maxIndex)
{
	uint min=0;
	uint max=0;
	if(!_GetLimits(arr,min,max))
	return false;
	uint[]maxes;
	for(uint i=0;i<arr.length();i++)
	{
		if(arr[i]==max)
		{
			maxes.insertLast(i);
		}
	}
	maxIndex=maxes[Random(0,maxes.length()-1)];
	return true;
}

void _CritterInit(Critter&cr,bool firstTime)
{
	pattern.SetEvents(cr);
}

void DL(string s)
{
	
}                          

const int[]termStats_=
{
	
	140,190,140,160,8,8,8,300,35,40,
	150,200,160,220,9,8,8,400,60,55,
	180,220,200,230,9,9,10,500,40,60,
	220,260,230,260,10,9,12,570,60,80,
	230,300,250,300,10,10,16,650,70,90
};                

class TermPattern:CommonPattern
{
	int _PlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		if(plane.Type==(1))
		{
			Critter@target=GetCritter(plane.Attack_TargId);
			if((@target!=null))
			{
				if(target.Stat[(106)]==cr.Stat[(106)])
				return(2);
			}
		}
		return(0);
	}
	
	void _Message(Critter&term,Critter&fromCr,int message,int value)
	{
		if(message==(156))
		{
			if(term.IsCurPlane((1)))
			return;
			if(term.Stat[(106)]!=fromCr.Stat[(106)])
			return;
			if(_MsgReact(term,fromCr,message))
			return;
			
			Critter@target=GetCritter(value);
			if((@target!=null))
			{
				this.AttackPlayer(term,target);
			}
		}
	}
	
	int _PlaneRun(Critter&cr,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2)
	{
		if(reason==(51))
		{
			
			Critter@target=GetCritter(plane.Attack_TargId);
			if((@target!=null))
			{
				_SelectRightWeapon(cr,target);
			}
		}
		return(0);
	}
	
	bool _Attack(Critter&term,Critter&target)
	{
		
		_SelectRightWeapon(term,target);
		return false;
	}
	
	void _Idle(Critter&term)
	{
		
		Critter@[]players;
		if(term.GetCritters(false,(0x01)|(0x10),players)>0)
		{
			for(uint i=0,l=players.length();i<l;i++)
			{
				DL("added attackplane");
				this.AttackPlayer(term,players[i]);
				return;
			}
		}
		
		TryCatchSneakers(term);
	}
	
	int _PlaneEnd(Critter&sniper,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		
		return(0);
	}
	
	void SetEvents(Critter&cr)
	{
		
		cr.SetEvent((16),"_TermAttacked");
		cr.SetEvent((36),"_TermPlaneEnd");
		cr.SetEvent((0),"_TermIdle");
		cr.SetEvent((37),"_TermPlaneRun");
		cr.SetEvent((18),"_TermMessage");
		cr.SetEvent((35),"_TermPlaneBegin");
		cr.SetEvent((4),"_TermShowCritter");
		cr.SetEvent((2),"_TermDead");
		
	} 
	
	bool _SelectRightWeapon(Critter&cr,Critter&target)
	{
		
		uint dist=GetCrittersDistantion(cr,target); 
		
		bool takeFlamer=false;
		bool takeMinigun=false;
		bool takeLauncher=false; 
		
		if(dist<=(5))
		takeFlamer=true;
		if((5)<dist&&dist<=(30))
		takeMinigun=true;
		if((30)<dist)
		takeLauncher=true;
		
		Item@handItem=cr.GetItem(0,(1));
		
		Item@weapon;
		
		if(takeFlamer)
		{
			uint[]flamerPids={(11),(400)};
			@weapon=GetCritterWeapon(cr,flamerPids);
		}
		if(takeMinigun)
		{
			uint[]mingunPids={(12),(389),(395),(350),(355),(387)};
			@weapon=GetCritterWeapon(cr,mingunPids);
		}
		
		if(takeLauncher)
		{
			uint[]launcherPids={(13)};
			@weapon=GetCritterWeapon(cr,launcherPids);
		}
		if(!(@weapon!=null))
		return false;
		if((@handItem!=null))
		{
			if(weapon.Id==handItem.Id)
			{
				return false;
			}
			
		}
		cr.StatBase[(110)]=weapon.Id;  
		
		return true;
		
	}
}  

TermPattern pattern;  

void SetTermStats(Critter&cr,uint8 lvl)
{
	if(lvl<1)
	return;
	cr.StatBase[(1)]=8;
	cr.StatBase[(0)]=(termStats_[(((lvl<(5))?lvl:0)*10)+4]);
	cr.StatBase[(2)]=(termStats_[(((lvl<(5))?lvl:0)*10)+5]);
	cr.StatBase[(77)]=24;
	
	cr.StatBase[(7)]=(termStats_[(((lvl<(5))?lvl:0)*10)+7]);
	cr.StatBase[(8)]=(termStats_[(((lvl<(5))?lvl:0)*10)+6]);
	cr.StatBase[(72)]=cr.Stat[(7)];
	
	for(int i=(23);i<=(31);i++)
	{
		if(i!=(28))
		{
			cr.StatBase[i]=(Random(termStats_[(((lvl<(5))?lvl:0)*10)+8],termStats_[(((lvl<(5))?lvl:0)*10)+9]));
		}
	} 
	
	cr.TraitBase[(557)]=1;
	
	if(lvl>2)
	cr.PerkBase[(306)]=1;
	if(lvl>2)
	cr.PerkBase[(420)]=1;
	cr.PerkBase[(402)]=1;
	if(lvl>2)
	cr.PerkBase[(398)]=1;
	
	cr.SkillBase[(201)]=(Random(termStats_[(((lvl<(5))?lvl:0)*10)],termStats_[(((lvl<(5))?lvl:0)*10)+1]));
	cr.SkillBase[(205)]=(Random(termStats_[(((lvl<(5))?lvl:0)*10)+2],termStats_[(((lvl<(5))?lvl:0)*10)+3]));
}

void _TermInit(Critter&cr,bool firstTime)
{
	_CritterInit(cr,firstTime);
}

bool _TermAttacked(Critter&sniper,Critter&attacker)
{
	return pattern._Attacked(sniper,attacker);
}

void _TermShowCritter(Critter&cr,Critter&showCrit)
{
	pattern._ShowCritter(cr,showCrit);
}

void _TermDead(Critter&cr,Critter@killer)
{
	pattern._Dead(cr,killer);
}

int _TermPlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return pattern._PlaneBegin(cr,plane,reason,someCr,someItem);
}

void _TermMessage(Critter&term,Critter&fromCr,int message,int value)
{
	pattern._Message(term,fromCr,message,value);
}

int _TermPlaneRun(Critter&cr,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2)
{
	return pattern._PlaneRun(cr,plane,reason,result0,result1,result2);
}

bool _TermAttack(Critter&term,Critter&target)
{
	return pattern._Attack(term,target);
}

void _TermIdle(Critter&term)
{
	pattern._Idle(term);
}

int _TermPlaneEnd(Critter&term,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return pattern._PlaneEnd(term,plane,reason,someCr,someItem);
} 

Item@GetCritterWeapon(Critter&cr,uint[]weapPids)
{
	Item@handItem=cr.GetItem(0,(1));
	if((@handItem!=null))
	{
		for(uint i=0;i<weapPids.length();i++)
		{
			if(handItem.GetProtoId()==weapPids[i])
			{
				return handItem;
			}
		}
	}
	for(uint i=0;i<weapPids.length();i++)
	{
		if(cr.CountItem(weapPids[i])>0)
		{
			Item@weapon=cr.GetItem(weapPids[i],-1);
			if(!(@weapon!=null))
			continue;
			
			if(GetDeteriorationProcent(weapon)<100)
			{
				return weapon;
			}
		}
	}
	return null;
} 

void TryCatchSneakers(Critter&term)
{
	
	Map@map=term.GetMap();
	if(!(@map!=null))
	return;
	
	Critter@[]players;
	
	if(map.GetCrittersHex(term.HexX,term.HexY,(25),(0x01)|(0x10),players)>0)
	{
		
		for(uint i=0;i<players.length();i++)
		{
			Critter@player=players[i];
			if(player.Mode[(510)]!=1)
			continue; 
			
			if(!(@player!=null))
			continue;
			
			term.SetDir(GetDirection(term.HexX,term.HexY,player.HexX,player.HexY));
			term.Animate(0,(53),null,true,true);
			map.RunFlyEffect(4024,term,player,term.HexX,term.HexY,player.HexX,player.HexY);
			CreateTimeEvent(__FullSecond+60,"e_UnsneakPlayer",player.Id,false);
			
			return;
		}
	}
}

uint e_UnsneakPlayer(uint[]@values)
{
	Critter@player=GetCritter(values[0]);
	if((@player!=null))
	{
		if(player.ModeBase[(510)]==0)
		return 0;
		player.ModeBase[(510)]=0;
		Map@map=player.GetMap();
		
		if((@map!=null))
		{
			if(!(@map.GetItem(player.HexX,player.HexY,(205))!=null))
			{
				Item@flare=map.AddItem(player.HexX,player.HexY,(205),1);
				if(!(@flare!=null))
				return 0;
				flare.LightColor=5;
				flare.LightDistance=5;
				flare.LightIntensity=100;
				(flare.Flags=(flare.Flags)|((0x00000200)));
				player.TimeoutBase[(243)]=(__FullSecond+(((((34-player.Stat[(12)])>(3))?(34-player.Stat[(12)]):(3)))*__TimeMultiplier));
				CreateTimeEvent(__FullSecond+10*60,"e_DeleteFlare",flare.Id,false);
			}
		}
	}
	return 0;
}

uint e_DeleteFlare(uint[]@values)
{
	Item@flare=GetItem(values[0]);
	if((@flare!=null))
	{
		DeleteItem(flare);
	}
	
	return 0;
}  

void testTerm(Critter&cr,int lvl,int team,int bag)
{
	int[]params={(107),bag,(106),team,(517),1};
	int[]items={(400),1,(0),(395),1,(0),(13),1,(0)};
	Critter@npc=cr.GetMap().AddNpc(222,cr.HexX-5,cr.HexY-5,0,params,items,"pattern_term@_CritterInit");
	
	SetTermStats(npc,lvl);
	pattern.SetEvents(npc);
}  

