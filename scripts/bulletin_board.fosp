

shared class Serializator
{
	uint8[]Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
	
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer(uint size)
	{
		if(size<=BufSize)
		return;
		if(BufSize==0)
		BufSize=1;
		while(size>BufSize)
		BufSize*=2;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		
		bool result=SetAnyData(name,Array,DataSize);    
		
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		
		if(not GetAnyData(name,Array))
		return false;    
		
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator&SetCurPos(uint pos)
	{
		GrowBuffer(pos);
		CurPos=pos;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Fill(uint8 value,uint length)
	{
		GrowBuffer(CurPos+length);
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string&value)
	{
		uint len=value.rawLength();
		GrowBuffer(CurPos+len+1);
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Set(const Critter&cr)
	{
		GrowBuffer(CurPos+4);
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const Item&item)
	{
		GrowBuffer(CurPos+4);
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator&Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator&Get(int64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(bool[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(string[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	} 
	
	Serializator&Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator&Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
};        

class BBMessage
{
	uint Idx;
	uint MapId;
	uint WriterId;
	uint ReaderId;
	uint WriteTime;
	string Message;
}

class BBMessenger
{
	BBMessenger()
	{
		this.MsgCount=0;
	}
	uint MsgCount;
	BBMessage[]Messages;
	
	void ClearExpiredMessages()
	{
		for(uint i=0;i<this.MsgCount;i++)
		{
			if((this.Messages[i].ReaderId==0?this.Messages[i].WriteTime+(20*7*24*60*60)<__FullSecond:this.Messages[i].WriteTime+(80*7*24*60*60)<__FullSecond))
			{
				this.Messages.removeAt(i);
				this.MsgCount=this.Messages.length();
				i--;
			}
		}
		
	}
	
	void AddMessage(uint mapId,uint writer,uint reader,uint when,string message)
	{
		BBMessage msg;
		msg.Idx=this.Messages.length();
		msg.MapId=mapId;
		msg.WriterId=writer;
		msg.ReaderId=reader;
		msg.WriteTime=(when==0?__FullSecond:when);
		msg.Message=message;
		this.Messages.insertLast(msg);
		this.MsgCount=this.Messages.length();
	}
	
	void ContinueMessage(uint mapId,uint writer,uint reader,string message)
	{
		BBMessage msg;
		for(uint i=0;i<this.MsgCount;i++)
		{
			if(this.Messages[i].MapId==mapId&&this.Messages[i].WriterId==writer&&this.Messages[i].ReaderId==reader)
			{
				this.Messages[i].Message+=message;
				return;
			}
		}
	}
	
	void Save()
	{
		ClearExpiredMessages();
		uint[]maps;
		uint[]writers;
		uint[]readers;
		uint[]writeTimes;
		string[]messages;
		if(IsAnyData(("BBM")))
		EraseAnyData(("BBM"));
		this.MsgCount=this.Messages.length();
		;
		for(uint i=0;i<this.MsgCount;i++)
		{
			maps.insertLast(this.Messages[i].MapId);
			writers.insertLast(this.Messages[i].WriterId);
			readers.insertLast(this.Messages[i].ReaderId);
			writeTimes.insertLast(this.Messages[i].WriteTime);
			messages.insertLast(this.Messages[i].Message);
		}
		Serializator save;
		save.Set(this.MsgCount);
		save.Set(maps);
		save.Set(writers);
		save.Set(readers);
		save.Set(writeTimes);
		save.Set(messages);
		save.Save(("BBM"));
	}
	
	void Load()
	{
		Serializator load;
		if(!load.Load(("BBM")))
		return;
		uint[]maps;
		uint[]writers;
		uint[]readers;
		uint[]writeTimes;
		string[]messages;
		load.Get(this.MsgCount);
		load.Get(maps);
		load.Get(writers);
		load.Get(readers);
		load.Get(writeTimes);
		load.Get(messages);
		;
		this.Messages.resize(0);
		for(uint i=0;i<maps.length();i++)
		{
			AddMessage(maps[i],writers[i],readers[i],writeTimes[i],messages[i]);
		}
		this.MsgCount=this.Messages.length();
		ClearExpiredMessages();
	}
	
	BBMessage@GetMessage(uint idx)
	{
		if(idx<this.MsgCount)
		return this.Messages[idx];
		return null;
	}
	
	BBMessage[]GetPrivateMessages(uint mapId,uint readerId)
	{
		BBMessage[]messages;
		for(uint i=0;i<this.MsgCount;i++)
		{
			if(this.Messages[i].MapId==mapId&&this.Messages[i].ReaderId==readerId)
			messages.insertLast(this.Messages[i]);
		}
		return messages;
	}
	
	BBMessage@GetSelfMessage(uint mapId,uint writerId)
	{
		for(uint i=0;i<this.MsgCount;i++)
		{
			if(this.Messages[i].MapId==mapId&&this.Messages[i].WriterId==writerId)
			return this.Messages[i];
		}
		return null;
	}
	
	void RemoveSelfMessages(uint mapId,uint writerId)
	{
		BBMessage@msg=GetSelfMessage(mapId,writerId);
		if((@msg!=null))
		{
			this.Messages.removeAt(msg.Idx);
		}
		this.MsgCount=this.Messages.length();
		this.Reindex();
	}
	
	void Reindex()
	{
		for(uint i=0;i<this.MsgCount;i++)
		this.Messages[i].Idx=i;
	}
	
	BBMessage@GetRandomMessage(uint mapId)
	{
		BBMessage@msg;
		uint counter=0;
		while(counter<20&&this.Messages.length()>0)
		{
			counter++;
			@msg=this.Messages[Random(0,this.Messages.length()-1)];
			if(msg.ReaderId==0)
			return msg;
		}
		return null;
	} 
	
	BBMessage[]GetPublicMessages(uint mapId,uint readFrom,uint count)
	{
		uint[]msgIds;
		BBMessage[]messages;
		for(uint i=0;i<this.MsgCount;i++)
		{
			if(this.Messages[i].ReaderId==0)
			msgIds.insertLast(this.Messages[i].Idx);
		}
		for(uint i=readFrom;i<readFrom+count&&i<msgIds.length();i++)
		{
			messages.insertLast(this.Messages[msgIds[i]]);
		}
		return messages;
	}
	
	uint CountPublicMessages(uint mapId)
	{
		uint count=0;
		for(uint i=0;i<this.MsgCount;i++)
		if(this.Messages[i].MapId==mapId&&this.Messages[i].ReaderId==0)
		count++;
		return count;
	}
}

BBMessenger Messenger;

void StartMessenger()
{
	Messenger.Load();
}

void SaveMessengerData()
{
	Messenger.Save();
} 

bool d_IsSelfMsg(Critter&cr,Critter@npc)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		return(@Messenger.GetSelfMessage(map.Id,cr.Id)!=null);
	}
	return false;
}

bool d_NotSelfMsg(Critter&cr,Critter@npc)
{
	return!d_IsSelfMsg(cr,npc);
}

bool d_IsPrivateMsg(Critter&cr,Critter@npc)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		return(Messenger.GetPrivateMessages(map.Id,cr.Id).length()>0);
	}
	return false;
}

bool d_NotPrivateMsg(Critter&cr,Critter@npc)
{
	return!d_IsPrivateMsg(cr,npc);
}

bool d_IsPrivateMsg(Critter&cr,Critter@npc,int numMsg,int msgPerPage)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		GameVar@page=GetLocalVar((3235),cr.Id);
		if((@page!=null))
		{
			return Messenger.GetPrivateMessages(map.Id,cr.Id).length()>uint(page*msgPerPage+numMsg);
		}
	}
	return false;
}

void dlg_PrivateMsg5(Critter&cr,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	GameVar@page=GetLocalVar((3235),cr.Id);
	uint msgPerPage=5;
	if((@page!=null))
	{
		lexems="";
		Map@map=cr.GetMap();
		BBMessage[]messages=Messenger.GetPrivateMessages(map.Id,cr.Id);
		uint msg=1;
		for(uint i=msgPerPage*page.GetValue();i<messages.length();i++)
		{
			lexems+="$msg"+msg+""+GetPlayerName(messages[i].WriterId);
			msg++;
		}
	}
}

void r_SetPrivateMsg(Critter&cr,Critter@npc,int numMsg,int msgPerPage)
{
	GameVar@page=GetLocalVar((3235),cr.Id);
	GameVar@msg=GetLocalVar((3236),cr.Id);
	if((@msg!=null)&&(@page!=null))
	{
		msg=Messenger.GetPrivateMessages(cr.GetMap().Id,cr.Id)[msgPerPage*page.GetValue()+numMsg].Idx;
	}
}

void dlg_GetMsg(Critter&cr,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	GameVar@msg=GetLocalVar((3236),cr.Id);
	if((@msg!=null))
	{
		BBMessage@m=Messenger.GetMessage(msg.GetValue());
		if((@m!=null))
		lexems="$fromWho"+GetPlayerName(m.WriterId)+"$msg"+m.Message;
	}
} 

bool d_IsPublicMsg(Critter&cr,Critter@npc)
{
	return Messenger.CountPublicMessages(cr.GetMap().Id)>0;
}

bool d_NotPublicMsg(Critter&cr,Critter@npc)
{
	return!d_IsPublicMsg(cr,npc);
}

bool d_IsPublicMsg(Critter&cr,Critter@npc,int numMsg,int msgPerPage)
{
	GameVar@page=GetLocalVar((3235),cr.Id);
	GameVar@msg=GetLocalVar((3236),cr.Id);
	if((@msg!=null)&&(@page!=null))
	{
		return(Messenger.GetPublicMessages(cr.GetMap().Id,page.GetValue()*msgPerPage,msgPerPage+numMsg).length()>uint(numMsg));
	}
	return false;
}

void r_SetPublicMsg(Critter&cr,Critter@npc,int numMsg,int msgPerPage)
{
	GameVar@page=GetLocalVar((3235),cr.Id);
	GameVar@msg=GetLocalVar((3236),cr.Id);
	if((@msg!=null)&&(@page!=null))
	{
		BBMessage[]messages=Messenger.GetPublicMessages(cr.GetMap().Id,page.GetValue()*msgPerPage,msgPerPage+numMsg);
		if(messages.length()>uint(numMsg))
		{
			msg=messages[numMsg].Idx;
		}
	}
}

uint r_SetRandomMsg(Critter&cr,Critter@npc)
{
	BBMessage@msg=Messenger.GetRandomMessage(cr.GetMap().Id);
	if((@msg!=null))
	{
		GameVar@m=GetLocalVar((3236),cr.Id);
		m=msg.Idx;
		return 5;
	}
	return 8;
}

void dlg_PublicMsg5(Critter&cr,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	GameVar@page=GetLocalVar((3235),cr.Id);
	uint msgPerPage=5;
	if((@page!=null))
	{
		lexems="";
		Map@map=cr.GetMap();
		BBMessage[]messages=Messenger.GetPublicMessages(map.Id,page.GetValue()*5,5);
		uint msg=1;
		for(uint i=0;i<messages.length();i++)
		{
			lexems+="$msg"+msg+""+GetPlayerName(messages[i].WriterId);
			msg++;
		}
	}
}                  

import bool AddWalkPlane(Critter&npc,uint entire,uint cut,bool run)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";

uint dlg_GetReaderId(Critter&player,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()>0))
	return 0;
	uint playerId=GetPlayerId(lexems);
	if(playerId==0)
	return(34);
	GameVar@readerId=GetLocalVar((3234),npc.Id);
	if(!(@readerId!=null))
	return(34);
	readerId=playerId;
	return(35);
}

void r_MoveAldo(Critter&player,Critter@npc)
{
	if(!(@npc!=null))
	return;
	GameVar@aldoId=GetLocalVar((3233),npc.GetMap().Id);
	GameVar@status=GetLocalVar((3231),npc.Id);
	GameVar@playerId=GetLocalVar((3232),npc.Id);
	if(!(@status!=null)||!(@aldoId!=null))
	{
		return;
	}
	status=1;
	if(!AddWalkPlane(npc,(31),0,false))
	{
		npc.SayMsg((2),(1),(1000000000+(npc.Stat[(104)])*100000+((1))));
		status=0;
		return;
	}
	aldoId=npc.Id;
	playerId=player.Id;
	status=1;
	npc.SetEvent((36),"_AldoPlaneEnd");
	if(npc.GetTimeEvents((26),null,null,null)==0)
	npc.AddTimeEvent("cte_ClearVars",((10)*__TimeMultiplier*60),(26));
}

int _AldoPlaneEnd(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	GameVar@status=GetLocalVar((3231),cr.Id);
	if((@status!=null)&&status==1&&plane.Type==(2)&&reason==(30))
	{
		status=2;
		cr.SayMsg((2),(1),(1000000000+(cr.Stat[(104)])*100000+((2))));
		AddTextListener((1),("Начали"),cr.GetMap().GetProtoId(),"listen_FirstMessage");
		AddMiscPlane(cr,0,__FullSecond+((2)*__TimeMultiplier*60),"bulletin_board@plane_AldoFinished");
		if(cr.GetTimeEvents((26),null,null,null)==0)
		cr.AddTimeEvent("cte_ClearVars",((10)*__TimeMultiplier*60),(26));
		cr.SetEvent((36),"");
		return(2);
	}
	return(0);
}

void listen_Next(Critter&player,string&text)
{
	Map@map=player.GetMap();
	if((@map!=null))
	{
		GameVar@aldoId=GetLocalVar((3233),map.Id);
		if((@aldoId!=null))
		{
			Critter@cr=GetCritter(aldoId.GetValue());
			if((@cr!=null)&&(text.length()<("Далее").length()?false:substring(text,0,("Далее").length())==("Далее")))
			{
				GameVar@count=GetUnicumVar((3237),player.Id,cr.Id);
				if(!(@count!=null)||count.GetValue()>=3)
				{
					ClearTempVariables(cr);
					cr.SayMsg((2),(1),(1000000000+(cr.Stat[(104)])*100000+(6)));
					uint16 hx=cr.HexX,hy=cr.HexY;
					uint mapId=0;
					uint8 dir=0;
					cr.GetHomePos(mapId,hx,hy,dir);
					AddWalkPlane(cr,0,hx,hy,dir,false,0);
					return;
				}
				else
				count=count.GetValue()+1;
				GameVar@writerId=GetLocalVar((3232),cr.Id);
				GameVar@readerId=GetLocalVar((3234),cr.Id);
				if((@writerId!=null)&&(@readerId!=null)&&writerId==player.Id)
				{
					Messenger.ContinueMessage(map.Id,writerId.GetValue(),readerId.GetValue(),"\n"+(substring(text,5,text.length()-1))); 
					
					cr.SayMsg((2),(1),(1000000000+(cr.Stat[(104)])*100000+(5)));
				}
			}
		}
	}
}

void listen_End(Critter&player,string&text)
{
	Map@map=player.GetMap();
	if((@map!=null))
	{
		GameVar@aldoId=GetLocalVar((3233),map.Id);
		if((@aldoId!=null))
		{
			Critter@cr=GetCritter(aldoId.GetValue());
			if((@cr!=null)&&(text.length()<("Хватит").length()?false:substring(text,0,("Хватит").length())==("Хватит")))
			{
				ClearTempVariables(cr);
				cr.AddTimeEvent("cte_SayMsgSaved",__TimeMultiplier*2,(27));
			}
		}
	}
}

void listen_FirstMessage(Critter&player,string&text)
{
	Map@map=player.GetMap();
	if((@map!=null))
	{
		GameVar@aldoId=GetLocalVar((3233),map.Id);
		if((@aldoId!=null))
		{
			Critter@cr=GetCritter(aldoId.GetValue());
			if((@cr!=null)&&(text.length()<("Начали").length()?false:substring(text,0,("Начали").length())==("Начали")))
			{
				GameVar@writerId=GetLocalVar((3232),cr.Id);
				GameVar@readerId=GetLocalVar((3234),cr.Id);
				if((@writerId!=null)&&(@readerId!=null)&&writerId==player.Id)
				{
					Messenger.RemoveSelfMessages(map.Id,player.Id);
					Messenger.AddMessage(map.Id,writerId.GetValue(),readerId.GetValue(),0,(substring(text,6,text.length()-1)));
					
					cr.AddTimeEvent("cte_SayMsgFirstSaved",__TimeMultiplier*2,(27));
				}
			}
		}
	}
}

void plane_AldoFinished(Critter&cr)
{
	ClearTempVariables(cr);
	cr.DropPlanes();
}

uint cte_SayMsgFirstSaved(Critter&cr,int identifier,uint&rate)
{
	cr.SayMsg((1),(1),(1000000000+(cr.Stat[(104)])*100000+((4))));
	uint proto=cr.GetMap().GetProtoId();
	AddTextListener((1),("Далее"),proto,"listen_Next");
	AddTextListener((1),("Хватит"),proto,"listen_End");
	EraseTextListener((1),("Начали"),proto);
	return 0;
}

uint cte_SayMsgSaved(Critter&cr,int identifier,uint&rate)
{
	uint proto=cr.GetMap().GetProtoId();
	EraseTextListener((1),("Далее"),proto);
	EraseTextListener((1),("Хватит"),proto);
	cr.SayMsg((2),(1),(1000000000+(cr.Stat[(104)])*100000+((3))));
	uint16 hx=cr.HexX,hy=cr.HexY;
	uint mapId=0;
	uint8 dir=0;
	cr.GetHomePos(mapId,hx,hy,dir);
	AddWalkPlane(cr,0,hx,hy,dir,false,0);
	return 0;
}

uint cte_ClearVars(Critter&cr,int identifier,uint&rate)
{
	ClearTempVariables(cr);
	return 0;
}
void ClearTempVariables(Critter&cr)
{
	GameVar@status=GetLocalVar((3231),cr.Id);
	if((@status!=null)&&status>0)
	status=0;
	GameVar@playerId=GetLocalVar((3232),cr.Id);
	if((@playerId!=null))
	playerId=0;
	GameVar@readerId=GetLocalVar((3234),cr.Id);
	readerId=0;
	EraseTextListener((1),("Начали"),cr.GetMap().GetProtoId());
	EraseTextListener((1),("Далее"),cr.GetMap().GetProtoId());
	EraseTextListener((1),("Хватит"),cr.GetMap().GetProtoId());
	if(cr.GetTimeEvents((26),null,null,null)!=0)
	cr.EraseTimeEvents((26));
	cr.DropPlanes();
} 

void drop_planes(Critter&cr,int crId,int,int)
{
	Critter@npc=GetCritter(crId);
	if((@npc!=null))
	{
		npc.DropPlanes();
		return;
	}
	cr.Say((11),"cr invalid");
}

void add_public_msg(Critter&cr,int numMsg,int readerId,int writerId)
{
	if(!(@cr.GetMap()!=null))
	return;
	uint mapId=cr.GetMap().Id;
	for(int i=0;i<numMsg;i++)
	{
		Messenger.AddMessage(mapId,(writerId==0?cr.Id:writerId),readerId,0,"message #"+i);
	}
}

void save(Critter&cr,int,int,int)
{
	Messenger.Save();
}

void load(Critter&cr,int,int,int)
{
	Messenger.Load();
}

void GetMsg(Critter&cr,int id,int,int)
{
	cr.Say((11),"Idx"+Messenger.Messages[id].Idx+" "+Messenger.Messages[id].Message);
}
