

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}

import void _SniperDead(Critter&cr,Critter@killer)from"pattern_sniper";
import void SetSniperStats(Critter&cr,uint8 lvl)from"pattern_sniper";
import void _SniperInit(Critter&cr,bool firstTime)from"pattern_sniper";

void _KillerInit(Critter&cr,bool firstTime)
{
	_SniperInit(cr,firstTime);
	if(firstTime)
	{
		cr.AddItem((143),1);
		cr.AddItem((17),1);
		cr.AddItem((144),Random(1,2));
		cr.AddItem((34),Random(30,50));
	}
	cr.StatBase[(104)]=(456);
	cr.StatBase[(84)]=-1;
	cr.StatBase[(106)]=(21);
	SetSniperStats(cr,0);
	cr.SetEvent((2),"_KillerDead");
	cr.SetEvent((26),"_KillerSmthDead");
}

void _KillerDead(Critter&cr,Critter@killer)
{
	_SniperDead(cr,killer);
	Map@map=cr.GetMap();
	if((@map!=null))
	map.SetTextMsg(cr.HexX,cr.HexY,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0)&0xFF)<<8)|((0xC8)&0xFF)))),(0),(7100));
}

void _KillerSmthDead(Critter&cr,Critter&fromCr,Critter@killer)
{
	if((@killer!=null)&&killer.Id==cr.Id)
	{
		GameVar@v=GetLocalVar((8840),fromCr.Id);
		if((@v!=null)&&v.GetValue()>0)
		cr.SayMsg((1),(0),(7101));
	}
}             

uint[]prisonerDialogs={(427),(437),(419)};

import bool IsMerc(Critter&merc)from"merc";
import Critter@GetMaster(Critter&merc)from"merc";
import void CancelMerc(Critter&merc)from"merc";
import void FlushScreen(Critter&cr,bool fadeOut,uint timeMs)from"effects";

Critter@GetPrisoner(Location&loc,uint dialog)
{
	Critter@[]critters;
	Map@map;
	Critter@cr;
	for(uint i=0,l=loc.GetMapCount();i<l;i++)
	{
		@map=loc.GetMapByIndex(i);
		if((@map!=null))
		{
			for(uint j=0,k=map.GetNpcCount((1701),(0x01)|(0x20));j<k;j++)
			{
				@cr=map.GetNpc((1701),(0x01)|(0x20),j);
				if((@cr!=null)&&cr.Stat[(104)]==int(dialog)&&!IsMerc(cr))
				return cr;
			}
		}
	}
	return null;
}

uint r_TrySelectPrisoner(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return(46);
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return(46);
	GameVar@crId=GetLocalVar((8842),player.Id);
	if(!(@crId!=null))
	return(46);
	crId=0;
	Critter@cr;
	int tries=10;
	while(tries>0 and!(@cr!=null)&&prisonerDialogs.length()>0)
	{
		@cr=GetPrisoner(loc,prisonerDialogs[Random(0,prisonerDialogs.length()-1)]);
		tries--;
	}
	if((@cr!=null))
	{
		crId=cr.Id;
		return(23);
	}
	return(46);
} 

void dlg_PrisonerName(Critter&player,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	lexems="$nameИзбранный";
	GameVar@crId=GetLocalVar((8842),player.Id);
	if(!(@crId!=null)||crId==0)
	return;
	Critter@prisoner=GetCritter(crId.GetValue());
	if(!(@prisoner!=null))
	return;
	lexems="$name@msg DLG "+(100000+(prisoner.Stat[(104)])*1000+100)+"@";
	prisoner.SetEvent((39),"_PrisonerTalk");
}

bool _PrisonerTalk(Critter&cr,Critter&player,bool attach,uint talkCount)
{
	GameVar@f=GetUnicumVar((2026),player.Id,cr.Id);
	if(!(@f!=null))
	return true; 
	
	if(attach)
	{
		GameVar@crId=GetLocalVar((8842),player.Id);
		if((@cr!=null)&&crId==cr.Id)
		{
			if(f==0)
			f=1;
			else
			return true; 
			
			RunDialog(player,cr,(457),false);
			cr.MercBase[(809)]=1;
			return false;
		}
	}
	else
	{
		if(f==1)
		f=0;
	}
	return true;
} 

void t_Arest(Critter&cr,Scenery&trigger,bool entered,uint8 dir)
{
	if(cr.IsNpc()&&IsMerc(cr)&&!entered)
	{
		Critter@player=GetMaster(cr);
		if(!(@player!=null))
		return;
		GameVar@crId=GetLocalVar((8842),player.Id);
		GameVar@qVar=GetLocalVar((8843),player.Id);
		if(!(@crId!=null)||!(@qVar!=null))
		return;
		if(cr.Id==uint(crId.GetValue())&&qVar.GetValue()==3&&IsCritterInDeadZone(player,cr.GetMap(),0,(164),(167)))
		{
			player.Wait(0);
			cr.DropPlanes();
			cr.Wait(0);
			player.SayMsg((1),(1),(1000000000+((457))*100000+((2))));
			FlushScreen(player,false,2000);
			qVar=4;
			CancelMerc(cr);
			cr.TransitToMap(cr.GetMap().Id,(168));
			uint[]values={cr.Id};
			CreateTimeEvent(__FullSecond+__TimeMultiplier*1,"e_PrisonerTalk",values,false);
			
		}
	}
}

uint e_PrisonerTalk(uint[]@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	cr.SayMsg((1),(1),(1000000000+((457))*100000+((1))));
	return 0;
}                

import void SetDeleteItem(Item&item,uint delHours)from"item";

void r_AddDocs(Critter&player,Critter@npc)
{
	Item@item=player.AddItem((600),1);
	if((@item!=null))
	item.SetScript("_LynDocsInit");
} 

void _LynDocsInit(Item&item,bool firstTime)
{
	item.SetEvent((4),"_LynDocsPutCont");
	if(firstTime)
	SetDeleteItem(item,24*3);
}

bool _LynDocsPutCont(Item&item,Critter&cr,int skill)
{
	GameVar@qVar=GetLocalVar((8845),cr.Id);
	Map@map=cr.GetMap();
	Critter@npc=map.GetNpc((35),(0x03)|(0x20),0);
	
	if(!(@qVar!=null)||!(@map!=null)||map.GetProtoId()!=(16)||cr.IsNpc())
	return false;
	if(skill==(-2))
	{
		if((qVar==1||qVar==3)&&IsCritterInDeadZone(cr,map,0,(172),(175)))
		{
			if(cr.Mode[(510)]==1&&cr.Skill[(208)]>50)
			{
				cr.StatBase[(76)]+=2000;
				qVar=2;
				return false;
			}
			if((@npc!=null)&&npc.IsLife()&&IsCritterInDeadZone(npc,map,0,(172),(175)))
			{
				npc.SayMsg((3),(0),(5920),"$pname"+GetPlayerName(cr.Id));
				qVar=3;
				return true;
			}
			else
			{
				cr.StatBase[(76)]+=2000;
				qVar=2;
				return false;
			}
		}
	}
	if(skill==(-3)||skill==(-4))
	{
		if(qVar==4)
		{
			uint[]values={cr.Id};
			uint guards=map.GetNpcCount((1702),(0x01)|(0x20));
			for(uint i=0;i<guards;i++)
			{
				Critter@guard=map.GetNpc((1702),(0x01)|(0x20),i);
				if((@guard!=null)&&IsCritterInDeadZone(guard,map,0,(172),(175)))
				values.insertLast(guard.Id);
			}
			if(values.length()>1)
			{
				if((@npc!=null)||npc.IsLife())
				values.insertFirst(npc.Id);
				CreateTimeEvent(__FullSecond+__TimeMultiplier*3,"e_Answer",values,true);
				cr.SayMsg((11),(0),(5922));
			}
			else
			{
				cr.SayMsg((11),(0),(5921));
				return true;
			}
		}
	}
	return false;
}

uint e_Answer(uint[]@values)
{
	if(values.length()>2)
	{
		Critter@mcClure=GetCritter(values[0]);
		for(uint i=2,l=values.length();i<l;i++)
		{
			Critter@guard=GetCritter(values[i]);
			if((@guard!=null))
			guard.SayMsg((1),(0),(5923));
		}
		if((@mcClure!=null))
		mcClure.SayMsg((1),(0),(5924));
		Critter@player=GetCritter(values[1]);
		if((@player!=null))
		{
			GameVar@qVar=GetLocalVar((8845),player.Id);
			if((@qVar!=null)&&qVar==4)
			{
				qVar=5;
				player.StatBase[(76)]+=2500;
			}
		}
	}
	return 0;
}

void r_AddGuards(Critter&cr,Critter@npc)
{
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return;
	Critter@guard;
	Entire[]entires;
	if(ParseEntires(map,entires,(170))==0)
	return;
	int[]params=
	{
		(104),(458),
		(105),(18),
		(107),(65),
		(106),(5),
		(89),(1702),
		(77),20
	};
	for(uint i=0,l=entires.length();i<l;i++)
	{
		@guard=map.AddNpc((506),entires[i].HexX,entires[i].HexY,3,params,null,null);
		if((@guard!=null))
		guard.AddTimeEvent("cte_DeleteGuard",60*60*24,(176));
	}
}

uint cte_DeleteGuard(Critter&cr,int identifier,uint&stage)
{
	DeleteNpc(cr);
	return 0;
} 

void r_MoveInto(Critter&cr,Critter@npc)
{
	Map@map=cr.GetMap();
	Critter@guard;
	if(!(@map!=null))
	return;
	uint guards=map.GetNpcCount((1702),(0x01)|(0x20));
	Entire[]entires;
	ParseEntires(map,entires,(171));
	for(uint i=0,l=entires.length();i<guards&&i<l;i++)
	{
		@guard=map.GetNpc((1702),(0x01)|(0x20),i);
		if((@guard!=null))
		guard.SetHomePos(entires[i].HexX,entires[i].HexY,0);
	}
}
