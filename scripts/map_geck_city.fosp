

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}                                                                

import uint8 GetNetState(uint locId,uint netNum)from"energy_barier";
import bool s_Terminal(Critter&player,Scenery&terminal,int skill,Item@item,int netNum,int hackBonus,int hitBonus)from"energy_barier";
import void _TraderInit(Critter&trader,bool firstTime)from"trader";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes"; 

void r_GiveGeck(Critter&cr,Critter@npc)
{
	Item@geck=cr.AddItem((366),1);
	if((@geck!=null))
	{
		geck.SetScript("_GeckInit");
	}
}

void _GeckInit(Item&geck,bool firstTime)
{
	(geck.Flags=(geck.Flags)|((0x10000000)));
	geck.SetEvent((2),"_GeckUse");
}

bool _GeckUse(Item&item,Critter&cr,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if((@onItem!=null)||(@onCritter!=null)||(@onScenery!=null))
	return false;
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return false;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return false;
	if(!loc.AutoGarbage)
	return false;
	uint locPid=loc.GetProtoId();
	if(locPid<(101)||locPid>(112))
	{
		cr.SayMsg((11),(0),(5500));
		return true;
	}
	CreateCity(cr,item);
	return true;
}

void CreateCity(Critter&player,Item&geck)
{
	DeleteItem(geck);
	Critter@[]grp;
	Critter@leader=player.GetFollowLeader();
	if(!(@leader!=null))
	@leader=player;
	grp.insertLast(@leader);
	leader.GetFollowGroup((0x01),grp);
	uint locId=CreateLocation(((45)),player.WorldX,player.WorldY,grp);
	if(locId==0)
	return;
	Location@loc=GetLocation(locId);
	if(!(@loc!=null))
	return;
	loc.AutoGarbage=false;
	loc.Visible=true;
	loc.Radius=6;
	uint[]acceptedPlayers;
	for(uint i=0,l=grp.length();i<l;i++)
	{
		Critter@cr=grp[i];
		if(!(@cr!=null))
		continue;
		if(!cr.IsPlayer())
		continue;
		GameVar@geckCitizen=GetLocalVar(((7501)),cr.Id);
		if(geckCitizen>0)
		continue;
		geckCitizen=loc.Id;
		acceptedPlayers.insertLast(cr.Id);
		leader.SayMsg((11),(0),(5503),"$pname"+GetPlayerName(cr.Id));
		cr.SayMsg((11),(0),(5504));
		cr.StatBase[(76)]+=(25000);
		cr.SayMsg((11),(0),3480,"$exp"+(25000));
	}
	uint[]chief={player.Id};
	player.SayMsg((11),(0),(5505));
	player.AddItem((564),1);
	SetAnyData(("GeckCity"+locId+"_leader"),chief);
	SetAnyData(("GeckCity"+locId+"_members"),acceptedPlayers);
	leader.TransitToGlobal(grp);
} 

bool IsPlayerCitizen(Critter@cr)
{
	if(!(@cr!=null))
	return false;
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return false;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return false;
	return IsPlayerCitizen(cr,loc);
}

bool IsPlayerCitizen(Critter@cr,Location@loc)
{
	if(!(@cr!=null)||!(@loc!=null))
	return false;
	string key=("GeckCity"+loc.Id+"_members");
	if(!IsAnyData(key))
	return false;
	uint[]acceptedPlayers;
	if(!GetAnyData(key,acceptedPlayers))
	return false;
	for(uint i=0,l=acceptedPlayers.length();i<l;i++)
	{
		if(cr.Id==acceptedPlayers[i])
		return true;
	}
	return false;
}  

bool IsPlayerLeader(Critter@cr)
{
	if(!(@cr!=null))
	return false;
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return false;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return false;
	string key=("GeckCity"+loc.Id+"_leader");
	if(!IsAnyData(key))
	return false;
	uint[]chief;
	if(!GetAnyData(key,chief))
	return false;
	return chief[0]==cr.Id;
} 

bool AddCitizen(Critter&leader,Critter&player)
{
	if(!(@leader!=null))
	return false;
	Map@map=leader.GetMap();
	if(!(@map!=null))
	return false;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return false;
	string key=("GeckCity"+loc.Id+"_members");
	if(!IsAnyData(key))
	return false;
	uint[]acceptedPlayers;
	if(!GetAnyData(key,acceptedPlayers))
	return false;
	for(uint i=0,l=acceptedPlayers.length();i<l;i++)
	{
		if(player.Id==acceptedPlayers[i])
		return true;
	}
	GameVar@cityMember=GetLocalVar(((7501)),player.Id);
	if(!(@cityMember!=null))
	return false;
	cityMember=loc.Id;
	acceptedPlayers.insertLast(player.Id);
	EraseAnyData(key);
	SetAnyData(key,acceptedPlayers);
	return true;
} 

bool RemoveCitizen(Critter&leader,Critter&player)
{
	if(!(@leader!=null))
	return false;
	Map@map=leader.GetMap();
	if(!(@map!=null))
	return false;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return false;
	string key=("GeckCity"+loc.Id+"_members");
	if(!IsAnyData(key))
	return false;
	uint[]acceptedPlayers;
	if(!GetAnyData(key,acceptedPlayers))
	return false;
	for(uint i=0,l=acceptedPlayers.length();i<l;i++)
	{
		if(player.Id==acceptedPlayers[i])
		{
			acceptedPlayers.removeAt(i);
			EraseAnyData(key);
			SetAnyData(key,acceptedPlayers);
			GameVar@cityMember=GetLocalVar(((7501)),player.Id);
			if(!(@cityMember!=null))
			return true;
			if(cityMember.GetValue()!=0)
			cityMember=0;
			return true;
		}
	}
	return false;
} 

void ClearCitizens(Critter&leader)
{
	if(!(@leader!=null))
	return;
	Map@map=leader.GetMap();
	if(!(@map!=null))
	return;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return;
	string key=("GeckCity"+loc.Id+"_members");
	if(!IsAnyData(key))
	return;
	uint[]acceptedPlayers;
	acceptedPlayers.insertLast(leader.Id);
	EraseAnyData(key);
	SetAnyData(key,acceptedPlayers);
}

bool d_IsPlayerLeader(Critter&player,Critter@none)
{
	return IsPlayerLeader(player);
}

uint dlg_RemoveCitizen(Critter&player,Critter@npc,string@playerName)
{
	if(!((@playerName!=null)&&playerName.length()>0))
	return 0;
	Critter@cr=GetPlayer(playerName);
	if((@cr!=null))
	{
		if(cr.Id==player.Id)
		{
			return(10);
		}
		if(RemoveCitizen(player,cr))
		{
			cr.SayMsg((11),(0),(5508),"$leadername"+GetPlayerName(player.Id));
			return(8);
		}
		else
		{
			return(9);
		}
	}
	return(10);
}

uint dlg_AddCitizen(Critter&player,Critter@npc,string@playerName)
{
	if(!((@playerName!=null)&&playerName.length()>0))
	return 0;
	Critter@cr=GetPlayer(playerName);
	if((@cr!=null))
	{
		if(cr.Id==player.Id)
		{
			return(10);
		}
		if(AddCitizen(player,cr))
		{
			cr.SayMsg((11),(0),(5507),"$leadername"+GetPlayerName(player.Id));
			return(7);
		}
		else
		{
			return(9);
		}
	}
	return(10);
}

void r_ClearCitizens(Critter&player,Critter@none)
{
	ClearCitizens(player);
}  

bool s_UseDoorComputer(Critter&player,Scenery&scenery,int skill,Item@item)
{
	if((@item!=null)||skill!=(-1))
	return true;
	return RunDialog(player,uint16(((4213))),scenery.HexX,scenery.HexY,false);
}

bool d_IsCitizen(Critter&player,Critter@npc)
{
	return IsPlayerCitizen(player);
}

bool d_NotCitizen(Critter&player,Critter@npc)
{
	return!d_IsCitizen(player,npc);
}

void _DoorInit(Item&door,bool firstTime)
{
	Map@map=GetMap(door.MapId);
	if((@map!=null))
	{
		Location@loc=map.GetLocation();
		if((@loc!=null))
		{
			string key=("GeckCity"+map.Id+"_door");
			uint[]data={door.Id};
			SetAnyData(key,data);
		}
	}
	door.SetEvent((4),"_DoorSkill");
}

bool _DoorSkill(Item&door,Critter&cr,int skill)
{
	if((((door.LockerCondition)&((0x01)))!=0))
	return false;
	cr.SayMsg((11),(0),(5506));
	return true;
}

void r_OpenDoor(Critter&player,Critter@none)
{
	Item@door=GetGeckDoor(player.GetMap());
	if(!(@door!=null))
	return;
	door.LockerOpen();
	CreateTimeEvent((__FullSecond+(60*20)),"item@e_AutoCloseDoor",door.Id,true);
}

void r_CloseDoor(Critter&player,Critter@none)
{
	Item@door=GetGeckDoor(player.GetMap());
	if(!(@door!=null))
	return;
	door.LockerClose();
}

Item@GetGeckDoor(Map@map)
{
	if(!(@map!=null))
	return null;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return null;
	string key=("GeckCity"+map.Id+"_door");
	if(!IsAnyData(key))
	return null;
	uint[]data;
	if(!GetAnyData(key,data))
	return null;
	return GetItem(data[0]);
}   

Location@GetGeckLocation(Critter@player)
{
	if(!(@player!=null))
	return null;
	GameVar@location=GetLocalVar(((7501)),player.Id);
	if(!(@location!=null))
	return null;
	if(location==0)
	return null;
	return(GetLocation(location.GetValue()));
}    

bool d_CanHireNpc(Critter&player,Critter@npc,int npcPid,int maxNum,int homeEntire)
{
	if(maxNum<1)
	return false;
	Location@loc=GetGeckLocation(player);
	if(!(@loc!=null))
	return false; 
	
	Map@map=loc.GetMapByIndex(0);
	if(!(@map!=null))
	return false;
	uint count=map.GetCritters(uint16(npcPid),(0x0F),null);
	if(count>=uint(maxNum))
	return false;
	return(map.CountEntire(uint8(homeEntire))>count);
}

bool d_CanNotHireNpc(Critter&player,Critter@npc,int npcPid,int maxNum,int homeEntire)
{
	return(!d_CanHireNpc(player,npc,npcPid,maxNum,homeEntire));
}

bool d_CanHireNpc(Critter&player,Critter@npc,int maxNum,int homeEntire)
{
	if(!(@npc!=null))
	return false;
	int npcPid=npc.GetProtoId();
	return d_CanHireNpc(player,npc,npcPid,maxNum,homeEntire);
}

bool d_CanNotHireNpc(Critter&player,Critter@npc,int maxNum,int homeEntire)
{
	return(!d_CanHireNpc(player,npc,maxNum,homeEntire));
}  

bool d_HomeFound(Critter&player,Critter@npc,int homeEntire)
{
	if(!(@npc!=null))
	return false;
	Location@loc=GetGeckLocation(player);
	if(!(@loc!=null))
	return false;
	Map@map=loc.GetMapByIndex(0);
	if(!(@map!=null))
	return false;
	Map@npc_map=npc.GetMap();
	if(!(@npc_map!=null))
	return false;
	if(map.Id!=npc_map.Id)
	return false;
	Entire[]entires;
	uint count=ParseEntires(map,entires,homeEntire);
	if(count==0)
	return false;
	for(uint i=0,l=entires.length();i<l;i++)
	{
		if(GetDistantion(npc.HexX,npc.HexY,entires[i].HexX,entires[i].HexY)<=(10))
		return true;
	}
	return false;
}

bool d_NotHomeFound(Critter&player,Critter@npc,int homeEntire)
{
	return(!d_HomeFound(player,npc,homeEntire));
}  

void r_SetNewHome(Critter&player,Critter@npc,int homeEntire)
{
	if(!(@npc!=null))
	return;
	Map@map=npc.GetMap();
	if(!(@map!=null))
	return;
	Entire[]entires;
	uint count=ParseEntires(map,entires,homeEntire);
	if(count==0)
	return;
	for(uint i=0,l=entires.length();i<l;i++)
	{
		if(GetDistantion(npc.HexX,npc.HexY,entires[i].HexX,entires[i].HexY)<=(10))
		{
			npc.SetHomePos(entires[i].HexX,entires[i].HexY,GetDirection(entires[i].HexX,entires[i].HexY,npc.HexX,npc.HexY));
			return;
		}
	}
} 

void _MapInit(Map&map,bool firstTime)
{
	map.SetEvent((6),"_GeckMapInCritter");
	map.SetEvent((1),"_GeckMapLoop1");
	map.SetLoopTime(0,(65000));
}

void _GeckMapLoop1(Map&map)
{
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return;
	if(GetNetState(loc.Id,(1))==(0))
	{
		uint charges=(map.GetData((0)));
		if(charges>0)
		{
			charges--;
			(map.SetData((0),charges));
		}
		else
		{
			uint[]values={(1),loc.Id};
			CreateTimeEvent(__FullSecond,"energy_barier@e_DisableForceField",values,false);
		}
	}
}

bool entrance_Geck(Location&geck,Critter@[]&critters,uint8 entrance)
{
	if(entrance==(1))
	{
		for(int k=0,l=critters.length();k<l;k++)
		{
			Critter@cr=critters[k];
			if((@cr!=null)&&!IsPlayerCitizen(cr,geck))
			{
				return false;
			}
		}
	}
	return true;
}   

void _GeckMapInCritter(Map&map,Critter&cr)
{
	if(cr.IsPlayer()&&cr.IsNpc())
	{
		if(IsPlayerCitizen(cr))
		{
			
			uint16 hx=0;
			uint16 hy=0;
			uint16 distDefault=0;
			uint16 distCitizen=0;
			if(GetEntireFreeHex(map,(0),hx,hy))
			distDefault=GetDistantion(cr.HexX,cr.HexY,hx,hy);
			if(GetEntireFreeHex(map,(2),hx,hy))
			distCitizen=GetDistantion(cr.HexX,cr.HexY,hx,hy);
			if(distDefault>distCitizen)
			return;
			if(GetEntireFreeHex(map,(17),hx,hy))
			{
				cr.TransitToHex(hx,hy,Random(0,5));
				TryMoveCar(cr,map);
			}
		}
	}
} 

void TryMoveCar(Critter&cr,Map&map)
{
	Item@[]items;
	if(cr.GetItemsByType((7),items)==666)
	{
		for(int k=0,l=items.length();k<l;k++)
		{
			Item@key=items[k];
			Entire[]entires;
			ParseEntires(map,entires,(243));
			ParseEntires(map,entires,(245));
			for(int i=0,j=entires.length();i<j;i++)
			{
				Item@car=map.GetCar(entires[i].HexX,entires[i].HexY);
				if((@car!=null)&&car.LockerId==key.LockerId)
				{
					entires.resize(0);
					ParseEntires(map,entires,(100));
					for(uint m=0,n=entires.length();m<n;m++)
					{
						Entire@ent=entires[m];
						if(map.CheckPlaceForItem(ent.HexX,ent.HexY,car.GetProtoId()))
						{
							MoveItem(car,1,map,ent.HexX,ent.HexY);
							return;
						}
					}
				}
			}
		}
	}
} 

bool d_HasGeneratorCharges(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return false;
	return((map.GetData((0)))>0);
}

bool d_NoGeneratoreCharges(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return false;
	return((map.GetData((0)))<1);
}

bool s_TerminalOuter(Critter&player,Scenery&terminal,int skill,Item@item,int netNum,int hackBonus,int hitBonus)
{
	Map@map=player.GetMap();
	if((@map!=null)&&(uint(map.GetData((1))))>__FullSecond)
	{
		player.SayMsg((11),(0),(5510));
		return true;
	}
	return s_Terminal(player,terminal,skill,item,netNum,hackBonus,hitBonus);
}

bool d_IsTerminalBroken(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return false;
	return((uint(map.GetData((1))))>__FullSecond);
}

bool d_NotTerminalBroken(Critter&player,Critter@npc)
{
	return!d_IsTerminalBroken(player,npc);
} 

void r_BrakeTerminal(Critter&player,Critter@npc)
{
	if(!(@npc!=null))
	return;
	Map@map=npc.GetMap();
	uint16 hx=0;
	uint16 hy=0;
	if(!(@map!=null)||!GetEntireFreeHex(map,(20),hx,hy))
	return;
	if(map.GetPathLength(npc,hx,hy,1)>0)
	{
		if(AddWalkPlane(npc,0,hx,hy,0,true,1))
		{
			AddMiscPlane(npc,0,20,"map_geck_city@plane_Brake");
		}
	}
}

void plane_Brake(Critter&npc)
{
	npc.SayMsg((1),(0),(5511));
	Map@map=npc.GetMap();
	if((@map!=null))
	{
		(map.SetData((1),__FullSecond+((16)*__TimeMultiplier*3600)));
	}
} 

bool s_UseGenerator(Critter&cr,Scenery&scen,int skill,Item@item)
{
	if(!(@item!=null))
	return false;
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return false;
	uint itemPid=item.GetProtoId();
	uint charges=0;
	uint itemCount=(((item.GetCount())>((100)))?((100)):(((item.GetCount())<(0))?(0):(item.GetCount())));
	switch(itemPid)
	{
		case(38):
		charges=(1)*itemCount;
		break;
		case(39):
		charges=(10)*itemCount;
		break;
		default:
		break;
	}
	if(charges==0)
	return false;
	charges=(map.GetData((0)))+charges;
	(map.SetData((0),charges));
	cr.SayMsg((11),(0),(5509),"$charges"+charges+"$time"+(uint(charges*((65000)/1000)/3600)));
	do{if(item.GetCount()>(itemCount)) item.SetCount(item.GetCount()-(itemCount));else DeleteItem(item);}while(false);
	return true;
}

bool d_BarrierOn(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return false;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return false;
	return(GetNetState(loc.Id,(1))==(0));
}

bool d_BarrierOff(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return false;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return false;
	uint8 state=GetNetState(loc.Id,(1));
	return(state==(1)||state==(3));
}

void r_SwitchBarrierMode(Critter&player,Critter@npc,int mode)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	return;
	uint[]values={(1),loc.Id};
	CreateTimeEvent(__FullSecond,(mode==(0)?"energy_barier@e_EnableForceField":"energy_barier@e_DisableForceField"),values,false);
} 

void _GeckTraderInit(Critter&cr,bool firstTime)
{
	_TraderInit(cr,firstTime);
	cr.SetEvent((38),"_GeckTraderBarter");
}

bool _GeckTraderBarter(Critter&cr,Critter&player,bool attach,uint barterCount)
{
	
	if(cr.Stat[(90)]==0)
	cr.StatBase[(90)]=cr.Skill[(215)];
	if(attach&&barterCount<2&&IsPlayerCitizen(player))
	{
		cr.SkillBase[(215)]=(10);
	}
	else
	{
		cr.SkillBase[(215)]=cr.Stat[(90)];
	}
	return true;
}

bool d_ItemExist(Critter&player,Critter@npc,int pidItem)
{
	Location@loc=GetGeckLocation(player);
	if(!(@loc!=null))
	return false;
	Item@[]items;
	for(uint i=0,l=loc.GetMapCount();i<l;i++)
	{
		Map@map=loc.GetMapByIndex(i);
		if((@map!=null))
		map.GetItems(pidItem,items);
		if(items.length()>0)
		return true;
	}
	return false;
}

bool d_NotItemExist(Critter&player,Critter@npc,int pidItem)
{
	return!d_ItemExist(player,npc,pidItem);
}

void r_AddReplicator(Critter&player,Critter@npc)
{
	Location@loc=GetGeckLocation(player);
	if(!(@loc!=null))
	return;
	
	uint16 x;
	uint16 y;
	for(uint i=0,l=loc.GetMapCount();i<l;i++)
	{
		Map@map=loc.GetMapByIndex(i);
		if((@map!=null))
		{
			Entire@entire=GetEntire(map,(30),0);
			if((@entire!=null)&&!(@map.GetItem(entire.HexX,entire.HexY,(613))!=null))
			{
				map.AddItem(entire.HexX,entire.HexY,(613),1);
				return;
			}
		}
	}
}

void r_SetGeckReplication(Critter&player,Critter@npc)
{
	Location@loc=GetGeckLocation(player);
	if(!(@loc!=null))
	return;
	for(uint i=0,l=loc.GetMapCount();i<l;i++)
	{
		Map@map=loc.GetMapByIndex(i);
		if((@map!=null)&&!loc.AutoGarbage)
		{
			Entire@entire=GetEntire(map,(31),0);
			if((@entire!=null))
			{
				player.StatBase[(131)]=map.Id;
				player.StatBase[(132)]=(31);
				return;
			}
		}
	}
	
}

void AddGeck(Critter&cr,int,int,int)
{
	Item@geck=cr.AddItem((366),1);
	if((@geck!=null))
	{
		geck.SetScript("_GeckInit");
	}
}
