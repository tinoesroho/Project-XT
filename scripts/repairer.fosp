

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}  

import int GetDeteriorationProcent(Item&item)from"repair";                  

const uint16[]SpecialArmours={(524),(3),(232),(348),(349)};
const uint16[]SpecialWeapons=
{
	(120),(270),(393),(371),(372),
	(427),(489),(498),
	(290),(291),(518),(520),(530),
	(531),(421),(390)
};

bool CanRepair(Item@item,Critter@npc)
{
	if(!(@item!=null)||!(@npc!=null))
	return false;
	uint8 type=item.GetType();
	uint16 pid=item.GetProtoId();
	GameVar@canRepair;
	switch(type)
	{
		case(1):
		@canRepair=GetLocalVar((Present(pid,SpecialArmours)?((2204)):((2203))),npc.Id);
		if((@canRepair!=null)&&canRepair==1)
		return true;
		break;
		case(3):
		@canRepair=GetLocalVar((Present(pid,SpecialWeapons)?((2202)):((2201))),npc.Id);
		if((@canRepair!=null)&&canRepair==1)
		return true;
		break;
		default:
		return false;
	}
	return false;
}

void TakeItemToRepair(Critter@player,Critter@npc,Item@item)
{
	if(!(@player!=null)||!(@npc!=null)||!(@item!=null))
	return;
	
	GameVar@timeRepair=GetUnicumVar(((2205)),player.Id,npc.Id);
	GameVar@pidRepair=GetUnicumVar(((2206)),player.Id,npc.Id);
	if(!(@timeRepair!=null)||!(@pidRepair!=null))
	return;
	timeRepair=__FullSecond+(int((npc.Skill[(213)]*(-1*((3*60*60))/300)+((3*60*60)))*(GetDeteriorationProcent(item)/99)));
	pidRepair=item.GetProtoId();
	
	DeleteItem(item);
}

bool SomeItemWasRepaired(Critter@player,Critter@npc)
{
	if(!(@player!=null)||!(@npc!=null))
	return false;
	GameVar@timeRepair=GetUnicumVar(((2205)),player.Id,npc.Id);
	GameVar@pidRepair=GetUnicumVar(((2206)),player.Id,npc.Id);
	if(!(@timeRepair!=null)||!(@pidRepair!=null)||pidRepair.GetValue()==0)
	return false;
	return(__FullSecond>=uint(timeRepair.GetValue()));
}

bool HasSomeItemToRepair(Critter@player,Critter@npc)
{
	if(!(@player!=null)||!(@npc!=null))
	return false;
	GameVar@pidRepair=GetUnicumVar(((2206)),player.Id,npc.Id);
	return((@pidRepair!=null)&&pidRepair>0);
}

void GetItemFromRepair(Critter@player,Critter@npc)
{
	if(!(@player!=null)||!(@npc!=null))
	return;
	GameVar@pidRepair=GetUnicumVar(((2206)),player.Id,npc.Id);
	if(!(@pidRepair!=null)||(pidRepair==0))
	return;
	Item@item=player.AddItem(pidRepair.GetValue(),1);
	if((@item!=null)&&item.GetType()==(3))
	{
		item.AmmoCount=0;
		item.Update();
	}
	pidRepair=0;
}

uint GetRepairCost(Critter@player,Critter@npc,Item@item)
{
	if(!(@player!=null)||!(@npc!=null)||!(@item!=null))
	return 0;
	
	return uint((((((0.95*(item.Cost==0?item.Proto.Cost:item.Cost)*npc.Skill[(215)]*GetDeteriorationProcent(item)/(player.Skill[(215)]*99))>(0.95*(item.Cost==0?item.Proto.Cost:item.Cost)))?(0.95*(item.Cost==0?item.Proto.Cost:item.Cost)):(((0.95*(item.Cost==0?item.Proto.Cost:item.Cost)*npc.Skill[(215)]*GetDeteriorationProcent(item)/(player.Skill[(215)]*99))<(0.05*(item.Cost==0?item.Proto.Cost:item.Cost)))?(0.05*(item.Cost==0?item.Proto.Cost:item.Cost)):(0.95*(item.Cost==0?item.Proto.Cost:item.Cost)*npc.Skill[(215)]*GetDeteriorationProcent(item)/(player.Skill[(215)]*99)))))));
}   

bool d_IsItemInHand(Critter&player,Critter@npc)
{
	return((@player.GetItem(0,(1))!=null));
}

bool d_CanRepair(Critter&player,Critter@npc)
{
	Item@item=player.GetItem(0,(1));
	if(!(@item!=null))
	return false;
	return CanRepair(item,npc);
}

bool d_CanNotRepair(Critter&player,Critter@npc)
{
	return(!d_CanRepair(player,npc));
}

bool d_HasEnoughMoney(Critter&player,Critter@npc)
{
	Item@item=player.GetItem(0,(1));
	if(!(@item!=null)||!CanRepair(item,npc))
	return false;
	return(GetRepairCost(player,npc,item)<=player.CountItem((41)));
}

bool d_HasNotEnoughMoney(Critter&player,Critter@npc)
{
	return(!d_HasEnoughMoney(player,npc));
}

bool d_ItemWasRepaired(Critter&player,Critter@npc)
{
	return SomeItemWasRepaired(player,npc);
}

bool d_NoItemWasRepaired(Critter&player,Critter@npc)
{
	return(!d_ItemWasRepaired(player,npc));
}

bool d_SomeItemIsRepairing(Critter&player,Critter@npc)
{
	return HasSomeItemToRepair(player,npc);
}

bool d_NoItemIsRepairing(Critter&player,Critter@npc)
{
	return(!d_SomeItemIsRepairing(player,npc));
}   

void dlg_CallItemBefore(Critter&player,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	lexems="$item_name _";
	Item@item=player.GetItem(0,(1));
	if(!(@item!=null))
	return;
	lexems="$item_name@msg ITEM "+(item.GetProtoId()*100)+"@$price"+GetRepairCost(player,npc,item);
} 

void dlg_CallItemAfter(Critter&player,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	lexems="$item_name _";
	GameVar@pidRepair=GetUnicumVar(((2206)),player.Id,npc.Id);
	if(!(@pidRepair!=null)||pidRepair.GetValue()==0)
	return;
	
	lexems="$item_name@msg ITEM "+(pidRepair.GetValue()*100)+"@";
}   

void dlg_GetRepairTime(Critter&player,Critter@npc,string@lexems)
{
	if(!((@lexems!=null)&&lexems.length()==0))
	return;
	GameVar@timeRepair=GetUnicumVar(((2205)),player.Id,npc.Id);
	if(!(@timeRepair!=null)||timeRepair.GetValue()==0)
	return;
	uint16 year=0;
	uint16 month=0;
	uint16 dayOfWeek=0;
	uint16 day=0;
	uint16 hour=0;
	uint16 minute=0;
	uint16 second=0;
	GetGameTime(timeRepair.GetValue(),year,month,dayOfWeek,day,hour,minute,second);
	lexems="$time"+(month>9?(""+month):("0"+month))+"."+year+" "+(hour>9?(""+hour):("0"+hour))+":"+(minute>9?(""+minute):("0"+minute));
}   

void r_TakeForRepair(Critter&player,Critter@npc,int free)
{
	Item@item=player.GetItem(0,(1));
	if(!(@item!=null))
	return;
	if(free==0)
	{
		uint money=GetRepairCost(player,npc,item);
		do{if(player.GetItem((41),-1).GetCount()>(money)) player.GetItem((41),-1).SetCount(player.GetItem((41),-1).GetCount()-(money));else DeleteItem(player.GetItem((41),-1));}while(false);
	}
	TakeItemToRepair(player,npc,item);
} 

void r_TakeItemFromRepair(Critter&player,Critter@npc)
{
	GetItemFromRepair(player,npc);
}
