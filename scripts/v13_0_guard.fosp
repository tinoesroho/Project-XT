

const uint16[]Pids_AllWeapon={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332),(11),(400),(13),(12),(389),(395),(350),(355),(387),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486),(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116),(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSmallGuns={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponPistols={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394)};
const uint16[]Pids_WeaponRifles={(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392)};
const uint16[]Pids_WeaponShotguns={(94),(385),(242),(268),(354)};
const uint16[]Pids_WeaponPistolMachineGun={(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponBigGuns={(11),(400),(13),(12),(389),(395),(350),(355),(387)};
const uint16[]Pids_WeaponEnergo={(16),(402),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397)};
const uint16[]Pids_WeaponLaser={(16),(402),(118),(401),(28),(120)};
const uint16[]Pids_WeaponPlasma={(24),(406),(15),(233)};
const uint16[]Pids_WeaponPulse={(396),(397)};
const uint16[]Pids_WeaponThrowing={(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponGrenade={(159),(25),(26),(27)};
const uint16[]Pids_WeaponThrowingOther={(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponMelee={(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116)};
const uint16[]Pids_WeaponCutting={(4),(236),(517),(383),(319),(522)};
const uint16[]Pids_WeaponPricking={(7),(280),(320)};
const uint16[]Pids_WeaponShock={(5),(20),(384),(6),(386),(115)};
const uint16[]Pids_WeaponElectric={(160),(399),(116)};
const uint16[]Pids_WeaponUnarmed={(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSpecial={(270),(393),(371),(372),(427),(489),(498),(290),(291),(518),(520),(530),(531),(421),(390)};

const uint16[]Pids_AllArmor={(74),(1),(379),(265),(2),(380),(240),(17),(381),(239),(3),(232),(348),(349),(113),(524)};
const uint16[]Pids_ArmorLight={(74),(1),(379),(265)};
const uint16[]Pids_ArmorMedium={(2),(380),(240),(17),(381),(239)};
const uint16[]Pids_ArmorHeavy={(3),(232),(348),(349)};
const uint16[]Pids_ArmorRobes={(113)};
const uint16[]Pids_ArmorSpecial={(524)};

const uint16[]Pids_AllAmmo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358),(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_Ammo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358)};
const uint16[]Pids_AmmoOther={(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_AmmoSpecial={(274)};

const uint16[]Pids_AllDrugs={(40),(48),(49),(109),(144),(260),(273),(525),(106),(124),(125),(310),(311),(469),(53),(87),(110),(259),(71),(81),(103),(378),(424)};
const uint16[]Pids_DrugsPreparations={(40),(48),(49),(109),(144),(260),(273),(525)};
const uint16[]Pids_DrugsAlcohol={(106),(124),(125),(310),(311),(469)};
const uint16[]Pids_Drugs={(53),(87),(110),(259)};
const uint16[]Pids_DrugsOther={(71),(81),(103),(378)};
const uint16[]Pids_DrugsSpecial={(334),(473),(480),(481),(482),(424)};

const uint16[]Pids_MiscExplosions={(51),(85),(544)};
const uint16[]Pids_MiscActiveExplosions={(206),(209),(545),(222)};
const uint16[]Pids_MiscPartsBasic={(98),(92),(127),(271),(272),(276),(277),(278),(284),(285),(286),(318),(416),(542),(532),(534),(475),(535),(536),(537),(538),(50),(449),(539),(541)};
const uint16[]Pids_MiscPartsSelfSpecial={(89),(222),(229),(307),(419),(454),(364),(422),(479),(488)};
const uint16[]Pids_MiscPartsSpecial={(55),(253),(254),(258),(269),(356),(377)};
const uint16[]Pids_MiscPartsBody={(114),(251),(281),(282),(321),(322),(323),(324),(429),(484),(485),(507)};
const uint16[]Pids_MiscAllTools={(75),(77),(84),(308),(410),(411),(412),(47),(91),(408),(409),(428),(440),(289),(297),(543)};
const uint16[]Pids_MiscToolsTech={(75),(77),(84),(308),(410),(411),(412)};
const uint16[]Pids_MiscToolsMediacal={(47),(91),(408),(409),(428),(440)};
const uint16[]Pids_MiscToolsOther={(289),(297),(543)};
const uint16[]Pids_MiscToolsSpecial={(52),(54),(59)};
const uint16[]Pids_MiscOther={(101),(117),(126),(226),(227),(262),(295),(314),(315),(316),(317),(325),(326),(436),(437)};              

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}                                                                                                                                                                                                                                                                                           

bool IsMined(Critter&sapper,Item&item,Critter&miner,int minerMinSkill,uint16[]BadPid)
{
	
	if(!(@miner!=null))
	return false;
	if(!(@sapper!=null))
	return false;
	
	if(!miner.IsSeenBy(sapper))
	return false;
	
	if((miner.StatBase[(5)]+miner.StatBase[(6)]+Random(1,10))/3<7||miner.Skill[(211)]<minerMinSkill)
	{
		for(uint i=0;i<BadPid.length();i++)
		{
			if(item.GetProtoId()==BadPid[i])
			{
				return true;
			}
		}
	}
	return false;
	
}           

bool SearchWeapon(Item@item,uint[]@itemsAllowed)
{
	
	if((@item!=null))
	{
		if((item.GetType()==(3))&&(itemsAllowed.length()>0))
		{
			for(uint i=0;i<itemsAllowed.length();i++)
			{
				if(item.GetProtoId()==itemsAllowed[i])
				{
					return false;
				}
			}
			return true;
		}
		else if((item.GetType()==(3))&&(itemsAllowed.length()<=0))
		{
			return true;
		}
		return false;
	}
	return false;
	
}  

bool SearchWeapon(Item@item)
{
	
	uint[]itemsAllowed;
	return SearchWeapon(item,itemsAllowed);
	
}  

bool EquipmentInspection(Critter&player,uint[]&itemsForbidden)
{
	
	if(player.IsNotValid)
	return false;
	if(!player.IsPlayer())
	return false;
	
	Item@[]items;
	player.GetItems(-1,items);
	return SearchedForbidden(items,itemsForbidden);
	
}  

bool EquipmentInspection(Critter&player,uint16[]&itemsForbidden)
{
	
	return EquipmentInspection(player,itemsForbidden);
	
}  

bool SearchedForbidden(Item@[]items,uint[]@itemsForbidden)
{ 
	
	for(uint it=0;it<items.length();it++)
	{
		for(uint itf=0;itf<itemsForbidden.length();itf++)
		{
			if(!items[it].IsNotValid)
			{
				if(items[it].GetProtoId()==itemsForbidden[itf])
				return true;
			}
		}
	}
	return false;
	
}    

int GetQuestStage(Critter&player)
{
	
	if(player.IsNotValid)
	return-1;
	if(!player.IsPlayer())
	return-1;
	GameVar@quest=GetLocalVar((4900),player.Id);
	if((@quest!=null))
	{
		return quest.GetValue();
	}
	return-1;
	
}  

void SetGroupQuestStage(Critter&player,int[]fromStages,int toStage)
{
	
	Critter@[]group;
	Critter@leader=GetCritter(GetLeaderId(player));
	group.insertLast(@leader);
	leader.GetFollowGroup((0x0F),group);
	Log("Set quest");
	for(uint i=0;i<group.length();i++)
	{
		for(uint s=0;s<fromStages.length();s++)
		{
			if(fromStages[s]>=0&&GetQuestStage(group[i])==fromStages[s])
			{
				SetQuestStage(group[i],toStage);
				Log("Set quest for "+group[i].Id+" to stage "+toStage+" from "+GetQuestStage(group[i]));
			}
			else if(fromStages[s]==-1)
			{
				SetQuestStage(group[i],toStage);
			}
		}
	}
	
}  

bool SetQuestStage(Critter&player,int stage)
{
	
	if(!(@player!=null))
	return false;
	if(!player.IsPlayer())
	return false;
	GameVar@quest=GetLocalVar((4900),player.Id);
	if((@quest!=null)&&quest.GetValue()!=stage)
	{
		quest=stage;
		return true;
	}
	return false;
	
}  

uint GetLeaderId(Critter&player)
{
	
	Critter@leader;
	if((@player.GetFollowLeader()!=null))
	{
		@leader=player.GetFollowLeader();
	}
	else
	{
		@leader=player;
	}
	if((@leader!=null))
	{
		return(leader.Id);
	}
	else
	{
		return(0);
	}
	
}                                    

import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import uint GetPlayerMercs(Critter&player,Critter@[]&mercs)from"merc";
import void CancelMerc(Critter&merc)from"merc"; 

uint[]player_warned;
uint[]player_ban;
uint[]player_done;

uint QuestAllowTime=0; 

void _GuardInit(Critter&guard,bool firstTime)
{
	
	guard.ModeBase[(533)]=1;
	guard.SetEvent((0),"e_GuardIdle");
	guard.SetEvent((8),"e_GuardHide");
	guard.SetEvent((32),"e_GuardMined");
	
}  

void e_GuardIdle(Critter&guard)
{ 
	
	Critter@[]players;
	guard.GetCritters(false,(0x10)|(0x03),players);
	if(players.length()>0)
	{
		for(uint i=0;i<players.length();i++)
		{
			
			if(players[i].IsPlayer()&&players[i].IsSeenBy(guard)&&players[i].StatBase[(72)]>0)
			{
				
				if(FindInArray(player_ban,players[i].Id)>=0)
				{
					if(SearchWeapon(players[i].GetItem(0,(1))))
					{
						
						guard.SendMessage((301),players[i].Id,(0));
						guard.SayMsg((4),(1),(1000000000+(guard.Stat[(104)])*100000+(1)));
						
					}
					else
					{
						player_ban.removeAt(uint(FindInArray(player_ban,players[i].Id)));
						guard.SayMsg((2),(1),(1000000000+(guard.Stat[(104)])*100000+(3)));
					}
				}
				
				if(FindInArray(player_warned,players[i].Id)>=0&&FindInArray(player_ban,players[i].Id)<0)
				{
					if(SearchWeapon(players[i].GetItem(0,(1))))
					{
						guard.SayMsg((4),(1),(1000000000+(guard.Stat[(104)])*100000+(2)));
						player_ban.insertLast(players[i].Id);
					}
					else
					{
						player_warned.removeAt(uint(FindInArray(player_warned,players[i].Id)));
						guard.SayMsg((2),(1),(1000000000+(guard.Stat[(104)])*100000+(3)));
					}
				}
				else if(FindInArray(player_warned,players[i].Id)<0&&FindInArray(player_ban,players[i].Id)<0)
				{
					if(SearchWeapon(players[i].GetItem(0,(1))))
					{
						player_warned.insertLast(players[i].Id);
						guard.SayMsg((2),(1),(1000000000+(guard.Stat[(104)])*100000+(2)));
					}
				}
				
			}
			
		}
	}
	return;
	
}  

void e_GuardHide(Critter&npc,Critter&player)
{
	
	if(not player.IsPlayer())
	return;
	player_ban.removeAt(uint(FindInArray(player_ban,player.Id)));
	player_warned.removeAt(uint(FindInArray(player_warned,player.Id)));
	return;
	
}  

void e_GuardMined(Critter&guard,Critter&dropper,Item&item)
{ 
	
	if(!(@dropper!=null))
	return;
	if(!dropper.IsPlayer())
	return;
	if(!dropper.IsLife())
	return;
	
	if(IsMined(guard,item,dropper,guard.StatBase[(1)]*20,Pids_MiscActiveExplosions))
	{
		
		guard.SendMessage((303),dropper.Id,(0));
		guard.SayMsg((4),(1),(1000000000+(guard.Stat[(104)])*100000+(1)));
	}
	return;
	
}     

void t_Frontier(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	
	if(!player.IsPlayer())
	return;
	if(!entered)
	return;
	if(HaveAccess(player))
	return;
	
	Critter@guard=player.GetMap().GetNpc((2),(0x01)|(0x20),0);
	if(!(@guard!=null))
	return;
	
	if(!guard.IsLife())
	return;
	
	if(player.ModeBase[(510)]>0||!player.IsSeenBy(guard))
	{
		
		if(player.Skill[(208)]/3>=Random(60,100)-player.Stat[(6)])
		{
			
			AllowAccess(player);
			return;
		}
		else
		{
			
			player.Wait(0);
			RunDialog(player,guard,true);
			return;
		}
	}
	else
	{
		
		player.Wait(0);
		RunDialog(player,guard,true);
		return;
	}
	
}  

void t_Entrance(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	
	if(!player.IsPlayer())
	return;
	if(!entered)
	return;
	if(dir==2||dir==3)
	return;
	
	Critter@guard=player.GetMap().GetNpc((2),(0x01)|(0x20),0);
	if(!(@guard!=null))
	return; 
	
	if(!guard.IsLife())
	return;
	
	if(!HaveAccess(player))
	{
		guard.SendMessage((303),player.Id,(0));
		guard.SayMsg((4),(1),(1000000000+(guard.Stat[(104)])*100000+(1)));
	}
	return;
	
}                      

void r_AllowAccess(Critter&player,Critter@npc)
{
	
	AllowAccess(player);
	return;
	
}  

uint r_GuardDialog(Critter&player,Critter@npc)
{             
	
	if(player.ModeBase[(510)]==1)
	{
		
		return 100;
	}
	else if(SearchWeapon(player.GetItem(0,(1))))
	{
		return 101;
	}
	return 2;
	
}  

void r_StartQuest(Critter&player,Critter@npc)
{
	
	player.AddItem((127),1);
	Item@Collar=player.AddItem((123),1);
	if(!(@Collar!=null))
	return;
	Collar.SetScript("q_item_v13_collar@_CollarInit");
	Collar.Update();
	int[]ChangeStages={0,3,5};
	SetGroupQuestStage(player,ChangeStages,1);
	
	QuestAllowTime=uint(__FullSecond+(60*60*24*(0.5)));
	
}  

void r_QuestDone(Critter&player,Critter@npc)
{
	
	Critter@[]group;
	Critter@leader=GetCritter(GetLeaderId(player));
	group.insertLast(@leader);
	leader.GetFollowGroup((0x0F),group);
	
	for(uint i=0;i<group.length();i++)
	{
		
		if(group[i].IsPlayer())
		{
			
			if(GetQuestStage(group[i])==2)
			{
				Critter@[]mercs;
				if(GetPlayerMercs(group[i],mercs)>0)
				{
					for(uint n=0;n<group.length();n++)
					{
						if(mercs[n].StatBase[(89)]==1001)
						{
							
							CancelMerc(mercs[n]);
							group[i].StatBase[(76)]+=8000;       
							
							uint16 x=0,y=0;
							if(player.GetMap().GetEntireCoords(250,0,x,y))
							{
								
								AddWalkPlane(mercs[n],10,x,y,0,false,0);
								AddMiscPlane(mercs[n],5,0,"q_npc_v13_dclaw@DclawFinish");
							}
							else
							{}
							
							SetQuestStage(group[i],4);
							
						}
					}
				}
			}
			
		}
	}
	return;
	
}                       

bool d_GroupCheck(Critter&player,Critter@npc)
{
	
	return GroupCheck(player);
	
}  

bool d_GroupNotCheck(Critter&player,Critter@npc)
{
	
	if(GroupCheck(player))
	{
		return false;
	}
	else
	{
		return true;
	}
	
}  

bool d_CollarLost(Critter&player,Critter@npc)
{
	
	if(GetQuestStage(player)==3)
	{
		return true;
	}
	return false;
	
}   

bool d_QuestCheck(Critter&player,Critter@npc)
{ 
	
	if(QuestAllowTime>__FullSecond)
	return false;
	
	Critter@[]group;
	Critter@leader=GetCritter(GetLeaderId(player));
	group.insertLast(@leader);
	leader.GetFollowGroup((0x0F),group);
	uint QuestDone=0;
	for(uint i=0;i<group.length();i++)
	{
		
		if(!group[i].IsNpc())
		{
			
			if(GetQuestStage(group[i])!=0)
			QuestDone+=1;
		}
	}
	if(QuestDone<=group.length()/2)
	{
		return true;
	}
	return false;
	
}  

bool d_ArmorCheck(Critter&player,Critter@npc)
{
	
	Item@[]PlayerArmor;
	if(player.GetItems((3),PlayerArmor)<=0)
	return false;
	if(PlayerArmor.length()==1)
	{
		if(!(@PlayerArmor[0]!=null))
		return false;
		if(PlayerArmor[0].GetProtoId()==(348)||PlayerArmor[0].GetProtoId()==(349))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	return false;
	
}  

bool d_QuestDone(Critter&player,Critter@npc)
{
	
	Critter@[]group;
	Critter@leader=GetCritter(GetLeaderId(player));
	group.insertLast(@leader);
	leader.GetFollowGroup((0x0F),group);
	for(uint i=0;i<group.length();i++)
	{
		
		if(group[i].IsPlayer())
		{
			if(GetQuestStage(group[i])==2)
			{
				Critter@[]mercs;
				if(GetPlayerMercs(group[i],mercs)>0)
				{
					for(uint n=0;n<group.length();n++)
					{
						if(mercs[n].StatBase[(89)]==1001)
						return true;
					}
				}
			}
		}
	}
	return false;
	
}     

bool GroupCheck(Critter&player)
{
	
	uint minPlayers=2;
	int groupLvl=0; 
	
	Critter@[]group;
	Critter@leader=GetCritter(GetLeaderId(player));
	group.insertLast(@leader);
	leader.GetFollowGroup((0x0F),group); 
	
	if(group.length()<minPlayers)
	{
		return false;
	} 
	
	for(uint i=0;i<group.length();i++)
	{
		
		if(!group[i].IsNpc())
		{
			groupLvl+=group[i].Stat[(77)];
		}
		
	} 
	
	if(groupLvl<20)
	{
		return false;
	} 
	
	return true;
	
}  

void AllowAccess(Critter&player)
{
	
	if(!HaveAccess(player))
	{
		player_done.insertLast(player.Id);
	}
	return;
	
}  

void DenyAccess(Critter&player)
{
	
	if(!HaveAccess(player))
	{
		player_done.removeAt(uint(GetAccessId(player)));
	}
	return;
	
}  

bool HaveAccess(Critter&player)
{
	
	if(GetAccessId(player)>=0)
	{
		return true;
	}
	return false;
	
}  

int GetAccessId(Critter&player)
{
	
	if(!(@player!=null))
	return-1;
	for(uint i=0;i<player_done.length();i++)
	{
		if(player_done[i]==player.Id)
		{
			return i;
		}
	}
	return-1;
	
}
