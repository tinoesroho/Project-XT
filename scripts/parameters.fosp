

import void PerkUp(Critter&cr,uint perk)from"perks";
import void PerkDown(Critter&cr,uint perk)from"perks";  

void changedParam_Hp(Critter&cr,uint,int oldValue)
{
	int curHp=cr.StatBase[(72)];
	if(curHp<=0&&cr.IsLife())
	cr.StatBase[(72)]=1;
	if(curHp<__DeadHitPoints&&not cr.IsDead())
	cr.StatBase[(72)]=__DeadHitPoints+1;
	if(curHp>cr.Stat[(7)])
	cr.StatBase[(72)]=cr.Stat[(7)];
}

void changedParam_Experience(Critter&cr,uint,int oldValue)
{
	int exp=cr.StatBase[(76)]-oldValue;
	if(exp>0)
	{
		uint level=cr.Stat[(77)];
		if(level>=__LevelCap&&not __LevelCapAddExperience)
		return;
		
		exp+=exp*(cr.Perk[(351)]*5)/100;
		cr.StatBase[(76)]=oldValue+exp;
		
		if(level>=__LevelCap)
		return;
		
		int perkUp=(cr.Trait[(564)]!=0?4:3);
		while(true)
		{
			if(cr.StatBase[(76)]>=NextLevelNeedExp(cr))
			{
				level++;
				cr.StatBase[(77)]++;
				
				cr.StatBase[(78)]+=5+cr.StatBase[(4)]*2;
				if(cr.Trait[(564)]!=0)
				cr.StatBase[(78)]+=5;
				
				cr.StatBase[(78)]+=cr.Perk[(319)]*2;
				if(cr.StatBase[(78)]>99)
				cr.StatBase[(78)]=99;
				if(__MaxLifeLevelSoftCap==0||uint(cr.Stat[(77)])<=__MaxLifeLevelSoftCap)
				cr.StatBase[(7)]+=2+cr.StatBase[(2)]/2+cr.Perk[(329)]*4;
				
				if((level%perkUp)==0)
				{
					cr.StatBase[(79)]=1;
				}
			}
			else
			break;
		}
	}
}

void changedParam_Perks(Critter&cr,uint perk,int oldValue)
{
	int curValue=cr.Param[perk];
	if(curValue>oldValue)
	for(uint i=0,j=curValue-oldValue;i<j;i++)
	PerkUp(cr,perk);
	else if(curValue<oldValue)
	for(uint i=0,j=oldValue-curValue;i<j;i++)
	PerkDown(cr,perk);
}

void changedParam_Hide(Critter&cr,uint,int oldValue)
{
	cr.RefreshVisible();
}

void changedParam_FastShot(Critter&cr,uint,int oldValue)
{
	cr.ModeBase[(538)]=(cr.Trait[(557)]!=0?1:0);
}

int NextLevelNeedExp(Critter&cr)
{
	int level=cr.Stat[(77)];
	return(((level)%2)!=0?(level)*((level)/2+1):(level)*(level)/2+(level)/2)*1000;
}

int getParamDialog_Intellect(Critter@master,Critter@slave,uint index)
{
	if((@master!=null))
	return master.Stat[(4)]+2*master.Perk[(350)];
	return 0;
}

int getParamDialog_Reputation(Critter@master,Critter@slave,uint index)
{
	if((@master!=null))
	{
		if(master.ReputationBase[index]==int(0x80000000))
		master.ReputationBase[index]=0;
		return master.ReputationBase[index];
	}
	return 0;
}                                                                    

void CritterGenerate(Critter&cr)    

{
	if(cr.ParamBase[(77)]<=0)
	cr.ParamBase[(77)]=1;
	
	if(cr.ParamBase[(552)]!=0)
	cr.ParamBase[(5)]+=1;
	if(cr.ParamBase[(551)]!=0)
	cr.ParamBase[(0)]+=2;
	if(cr.ParamBase[(560)]!=0)
	{
		cr.ParamBase[(206)]+=15;
		cr.ParamBase[(207)]+=15;
		cr.ParamBase[(214)]+=15;
		cr.ParamBase[(215)]+=15;
		cr.ParamBase[(200)]-=10;
		cr.ParamBase[(201)]-=10;
		cr.ParamBase[(202)]-=10;
		cr.ParamBase[(203)]-=10;
		cr.ParamBase[(204)]-=10;
		cr.ParamBase[(205)]-=10;
	}     
	
	cr.ParamBase[(200)]+=5+4*cr.ParamBase[(5)];
	cr.ParamBase[(201)]+=0+2*cr.ParamBase[(5)];
	cr.ParamBase[(202)]+=0+2*cr.ParamBase[(5)];
	cr.ParamBase[(203)]+=30+2*(cr.ParamBase[(5)]+cr.ParamBase[(0)]);
	cr.ParamBase[(204)]+=20+2*(cr.ParamBase[(5)]+cr.ParamBase[(0)]);
	cr.ParamBase[(205)]+=0+4*cr.ParamBase[(5)];
	cr.ParamBase[(206)]+=0+2*(cr.ParamBase[(1)]+cr.ParamBase[(4)]);
	cr.ParamBase[(207)]+=5+cr.ParamBase[(1)]+cr.ParamBase[(4)];
	cr.ParamBase[(208)]+=5+3*cr.ParamBase[(5)];
	cr.ParamBase[(209)]+=10+cr.ParamBase[(1)]+cr.ParamBase[(5)];
	cr.ParamBase[(210)]+=0+3*cr.ParamBase[(5)];
	cr.ParamBase[(211)]+=10+cr.ParamBase[(1)]+cr.ParamBase[(5)];
	cr.ParamBase[(212)]+=0+4*cr.ParamBase[(4)];
	cr.ParamBase[(213)]+=0+3*cr.ParamBase[(4)];
	cr.ParamBase[(214)]+=0+5*cr.ParamBase[(3)];
	cr.ParamBase[(215)]+=0+4*cr.ParamBase[(3)];
	cr.ParamBase[(216)]+=0+5*cr.ParamBase[(6)];
	cr.ParamBase[(217)]+=0+2*(cr.ParamBase[(2)]+cr.ParamBase[(4)]);
	
	if(cr.ParamBase[(226)]!=0)
	cr.ParamBase[cr.ParamBase[(226)]]+=20;
	if(cr.ParamBase[(227)]!=0)
	cr.ParamBase[cr.ParamBase[(227)]]+=20;
	if(cr.ParamBase[(228)]!=0)
	cr.ParamBase[cr.ParamBase[(228)]]+=20;
	
	if(cr.ParamBase[(550)]!=0)
	{
		cr.ParamBase[(30)]-=cr.ParamBase[(2)]*2;
		cr.ParamBase[(31)]-=cr.ParamBase[(2)]*5;
		cr.ParamBase[(13)]+=2;
	}
	if(cr.ParamBase[(551)]!=0)
	cr.ParamBase[(8)]-=2;
	if(cr.ParamBase[(555)]!=0)
	{
		cr.ParamBase[(9)]-=cr.ParamBase[(5)];
		cr.ParamBase[(12)]+=5;
	}
	if(cr.ParamBase[(556)]!=0)
	cr.ParamBase[(10)]+=4;
	if(cr.ParamBase[(554)]!=0)
	cr.ParamBase[(14)]+=10;
	if(cr.ParamBase[(556)]!=0)
	cr.ParamBase[(15)]-=30;
	if(cr.ParamBase[(557)]!=0)
	cr.ParamBase[(538)]=1;              
	
	cr.ParamBase[(7)]+=15;
	cr.ParamBase[(8)]+=5;
	cr.ParamBase[(72)]=cr.ParamBase[(7)];
	cr.ParamBase[(75)]=cr.ParamBase[(8)]*100;
}                                   

void NpcProcessLevel(Critter&npc)
{
	for(int i=0,j=npc.Stat[(77)];i<j;i++)
	{ 
		
	}
} 

uint CheckPlayerName(const string&name)
{
	
	if(name.length()<__MinNameLength||name.length()>__MaxNameLength)
	return(1009); 
	
	string allLetters=__ValidNameLettersCommon+__ValidNameLettersCulture1+__ValidNameLettersCulture2;
	for(uint i=0,j=name.length();i<j;i++)
	if(findFirst(allLetters,name[i])==-1)
	return(1036); 
	
	if(name[0]==" "||name[-1]==" ")
	return(1032);
	for(int i=0,j=name.length()-1;i<j;i++)
	if(name[i]==" "&&name[i+1]==" ")
	return(1033); 
	
	uint letters1=0;
	uint letters2=0;
	for(int i=0,j=name.length()-1;i<j;i++)
	{
		if(findFirst(__ValidNameLettersCulture1,name[i])!=-1)
		letters1++;
		else if(findFirst(__ValidNameLettersCulture2,name[i])!=-1)
		letters2++;
	}
	if(letters1>0&&letters2>0)
	return(1030); 
	
	if((letters1+letters2)*100/name.length()<70)
	return(1031); 
	
	return 0;
}            

int getParam_Strength(Critter&cr,uint)
{
	int val=cr.ParamBase[(0)]+cr.ParamBase[(32)];
	if(cr.ParamBase[(380)]!=0&&getParam_Timeout(cr,(238))!=0&&
	cr.ParamBase[(72)]<=(cr.ParamBase[(7)]+cr.ParamBase[(0)]+cr.ParamBase[(2)]*2)/2)
	val++;
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}

int getParam_Perception(Critter&cr,uint)
{
	int val=(cr.ParamBase[(502)]!=0?1:cr.ParamBase[(1)]+cr.ParamBase[(33)]);
	if(cr.ParamBase[(565)]!=0)
	val+=GetNightPersonBonus();
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}

int getParam_Endurance(Critter&cr,uint)
{
	int val=cr.ParamBase[(2)]+cr.ParamBase[(34)];
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}

int getParam_Charisma(Critter&cr,uint)
{
	int val=cr.ParamBase[(3)]+cr.ParamBase[(35)];
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}

int getParam_Intellegence(Critter&cr,uint)
{
	int val=cr.ParamBase[(4)]+cr.ParamBase[(36)];
	if(cr.ParamBase[(565)]!=0)
	val+=GetNightPersonBonus();
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}

int getParam_Agility(Critter&cr,uint)
{
	int val=cr.ParamBase[(5)]+cr.ParamBase[(37)];
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}

int getParam_Luck(Critter&cr,uint)
{
	int val=cr.ParamBase[(6)]+cr.ParamBase[(38)];
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}

int getParam_Hp(Critter&cr,uint)
{
	return cr.ParamBase[(72)];
}

int getParam_MaxLife(Critter&cr,uint)
{
	int val=cr.ParamBase[(7)]+cr.ParamBase[(39)]+cr.ParamBase[(0)]+cr.ParamBase[(2)]*2;
	return(((val)>(9999))?(9999):(((val)<(1))?(1):(val)));
}

int getParam_MaxAp(Critter&cr,uint)
{
	int val=cr.ParamBase[(8)]+cr.ParamBase[(40)]+getParam_Agility(cr,0)/2;
	return(((val)>(9999))?(9999):(((val)<(1))?(1):(val)));
}

int getParam_Ap(Critter&cr,uint)
{
	int val=cr.ParamBase[(75)];
	val/=(100);
	return(((val)>(9999))?(9999):(((val)<(-9999))?(-9999):(val)));
}

int getParam_MaxMoveAp(Critter&cr,uint)
{
	int val=cr.ParamBase[(87)];
	return(((val)>(9999))?(9999):(((val)<(0))?(0):(val)));
}

int getParam_MoveAp(Critter&cr,uint)
{
	int val=cr.ParamBase[(88)];
	return(((val)>(9999))?(9999):(((val)<(0))?(0):(val)));
}

int getParam_MaxWeight(Critter&cr,uint)
{
	int val=(((cr.ParamBase[(11)]+cr.ParamBase[(43)])>(0))?(cr.ParamBase[(11)]+cr.ParamBase[(43)]):(0));
	val+=((25+getParam_Strength(cr,0)*(25-cr.ParamBase[(552)]*10))*453);
	return(((val)>(2000000000))?(2000000000):(((val)<(0))?(0):(val)));
}

int getParam_Sequence(Critter&cr,uint)
{
	int val=cr.ParamBase[(12)]+cr.ParamBase[(44)]+getParam_Perception(cr,0)*2;
	return(((val)>(9999))?(9999):(((val)<(0))?(0):(val)));
}

int getParam_MeleeDmg(Critter&cr,uint)
{
	int strength=getParam_Strength(cr,0);
	int val=cr.ParamBase[(10)]+cr.ParamBase[(42)]+(strength>6?strength-5:1);
	return(((val)>(9999))?(9999):(((val)<(1))?(1):(val)));
}

int getParam_HealingRate(Critter&cr,uint)
{
	int e=getParam_Endurance(cr,0);
	int val=cr.ParamBase[(13)]+cr.ParamBase[(45)]+(((1)>(e/3))?(1):(e/3));
	return(((val)>(9999))?(9999):(((val)<(0))?(0):(val)));
}

int getParam_CriticalChance(Critter&cr,uint)
{
	int val=cr.ParamBase[(14)]+cr.ParamBase[(46)]+getParam_Luck(cr,0);
	return(((val)>(100))?(100):(((val)<(0))?(0):(val)));
}

int getParam_MaxCritical(Critter&cr,uint)
{
	int val=cr.ParamBase[(15)]+cr.ParamBase[(47)];
	return(((val)>(100))?(100):(((val)<(-100))?(-100):(val)));
}

int getParam_Ac(Critter&cr,uint)
{
	int val=cr.ParamBase[(9)]+cr.ParamBase[(41)]+getParam_Agility(cr,0)+cr.ParamBase[(86)];
	Item@armor=cr.GetItem(0,(3));
	if((@armor!=null)&&armor.GetType()==(1))
	val+=armor.Proto.Armor_AC*(100-GetDeteriorationProc(armor))/100;
	return(((val)>(90))?(90):(((val)<(0))?(0):(val)));
}

int getParam_DamageResistance(Critter&cr,uint index)
{
	int dmgType=index-(23)+1;
	int val=0;
	int drVal=0;
	uint8 mode=0;
	ProtoItem@protoArmor=cr.GetSlotProto((3),mode);
	switch(dmgType)
	{
		case(1):
		val=cr.ParamBase[(23)]+cr.ParamBase[(55)];
		drVal=protoArmor.Armor_DRNormal;
		break;
		case(2):
		val=cr.ParamBase[(24)]+cr.ParamBase[(56)];
		drVal=protoArmor.Armor_DRLaser;
		break;
		case(3):
		val=cr.ParamBase[(25)]+cr.ParamBase[(57)];
		drVal=protoArmor.Armor_DRFire;
		break;
		case(4):
		val=cr.ParamBase[(26)]+cr.ParamBase[(58)];
		drVal=protoArmor.Armor_DRPlasma;
		break;
		case(5):
		val=cr.ParamBase[(27)]+cr.ParamBase[(59)];
		drVal=protoArmor.Armor_DRElectr;
		break;
		case(6):
		val=cr.ParamBase[(28)]+cr.ParamBase[(60)];
		drVal=protoArmor.Armor_DREmp;
		break;
		case(7):
		val=cr.ParamBase[(29)]+cr.ParamBase[(61)];
		drVal=protoArmor.Armor_DRExplode;
		break;
		case(0):
		default:
		break;
	}
	
	Item@armor=cr.GetItem(0,(3));
	if((@armor!=null)&&armor.GetType()==(1))
	val+=drVal*(100-GetDeteriorationProc(armor))/100;
	
	if(dmgType==(6))
	return(((val)>(999))?(999):(((val)<(0))?(0):(val)));
	return(((val)>(90))?(90):(((val)<(0))?(0):(val)));
}

int getParam_DamageThreshold(Critter&cr,uint index)
{
	int dmgType=index-(16)+1;
	int val=0;
	int dtVal=0;
	uint8 mode=0;
	ProtoItem@protoArmor=cr.GetSlotProto((3),mode);
	switch(dmgType)
	{
		case(1):
		val=cr.ParamBase[(16)]+cr.ParamBase[(48)];
		dtVal=protoArmor.Armor_DTNormal;
		break;
		case(2):
		val=cr.ParamBase[(17)]+cr.ParamBase[(49)];
		dtVal=protoArmor.Armor_DTLaser;
		break;
		case(3):
		val=cr.ParamBase[(18)]+cr.ParamBase[(50)];
		dtVal=protoArmor.Armor_DTFire;
		break;
		case(4):
		val=cr.ParamBase[(19)]+cr.ParamBase[(51)];
		dtVal=protoArmor.Armor_DTPlasma;
		break;
		case(5):
		val=cr.ParamBase[(20)]+cr.ParamBase[(52)];
		dtVal=protoArmor.Armor_DTElectr;
		break;
		case(6):
		val=cr.ParamBase[(21)]+cr.ParamBase[(53)];
		dtVal=protoArmor.Armor_DTEmp;
		break;
		case(7):
		val=cr.ParamBase[(22)]+cr.ParamBase[(54)];
		dtVal=protoArmor.Armor_DTExplode;
		break;
		case(0):
		default:
		break;
	}
	
	Item@armor=cr.GetItem(0,(3));
	if((@armor!=null)&&armor.GetType()==(1))
	val+=dtVal*(100-GetDeteriorationProc(armor))/100;
	
	return(((val)>(999))?(999):(((val)<(0))?(0):(val)));
}

int getParam_RadiationResist(Critter&cr,uint)
{
	int val=cr.ParamBase[(30)]+cr.ParamBase[(62)]+getParam_Endurance(cr,0)*2;
	return(((val)>(95))?(95):(((val)<(0))?(0):(val)));
}

int getParam_PoisonResist(Critter&cr,uint)
{
	int val=cr.ParamBase[(31)]+cr.ParamBase[(63)]+getParam_Endurance(cr,0)*5;
	return(((val)>(95))?(95):(((val)<(0))?(0):(val)));
}

int getParam_Timeout(Critter&cr,uint index)
{
	return uint(cr.ParamBase[index])>__FullSecond?uint(cr.ParamBase[index])-__FullSecond:0;
}

int getParam_Reputation(Critter&cr,uint index)
{
	
	if(uint(cr.ParamBase[index])==0x80000000)
	cr.ParamBase[index]=0;    
	
	return cr.ParamBase[index];
}

void changedParam_Reputation(Critter&cr,uint index,int oldValue)
{
	
	if(uint(oldValue)==0x80000000)
	{
		uint64 value=uint64(cr.ParamBase[index])-uint64(oldValue);
		cr.ParamBase[index]+=uint(value);
	}
	
}  

bool Critter_IsInjured(Critter&cr)
{
	return Critter_IsDmgArm(cr)||Critter_IsDmgLeg(cr)||Critter_IsDmgEye(cr);
}

bool Critter_IsDmgEye(Critter&cr)
{
	return cr.ParamBase[(502)]!=0;
}

bool Critter_IsDmgLeg(Critter&cr)
{
	return cr.ParamBase[(505)]!=0||cr.ParamBase[(506)]!=0;
}

bool Critter_IsDmgTwoLeg(Critter&cr)
{
	return cr.ParamBase[(505)]!=0&&cr.ParamBase[(506)]!=0;
}

bool Critter_IsDmgArm(Critter&cr)
{
	return cr.ParamBase[(503)]!=0||cr.ParamBase[(504)]!=0;
}

bool Critter_IsDmgTwoArm(Critter&cr)
{
	return cr.ParamBase[(503)]!=0&&cr.ParamBase[(504)]!=0;
}

bool Critter_IsAddicted(Critter&cr)
{
	for(uint i=(__AddictionBegin);i<=(__AddictionEnd);i++)
	if(cr.ParamBase[i]!=0)
	return true;
	return false;
}

bool Critter_IsOverweight(Critter&cr)
{
	return int(cr.ItemsWeight())>getParam_MaxWeight(cr,0);
}

bool ProtoItem_Weapon_IsHtHAttack(ProtoItem&proto,uint8 mode)
{
	uint8 use=mode&0xF;
	if(proto.Type!=(3)||((proto.Weapon_ActiveUses>>use)&1)==0)
	return false;
	int skill=((use)==0?proto.Weapon_Skill_0:((use)==1?proto.Weapon_Skill_1:((use)==2?proto.Weapon_Skill_2:0)));
	return skill==(203)||skill==(204);
}

bool ProtoItem_Weapon_IsGunAttack(ProtoItem&proto,uint8 mode)
{
	uint8 use=mode&0xF;
	if(proto.Type!=(3)||((proto.Weapon_ActiveUses>>use)&1)==0)
	return false;
	int skill=((use)==0?proto.Weapon_Skill_0:((use)==1?proto.Weapon_Skill_1:((use)==2?proto.Weapon_Skill_2:0)));
	return skill==(200)||skill==(201)||skill==(202);
}

bool ProtoItem_Weapon_IsRangedAttack(ProtoItem&proto,uint8 mode)
{
	uint8 use=mode&0xF;
	if(proto.Type!=(3)||((proto.Weapon_ActiveUses>>use)&1)==0)
	return false;
	int skill=((use)==0?proto.Weapon_Skill_0:((use)==1?proto.Weapon_Skill_1:((use)==2?proto.Weapon_Skill_2:0)));
	return skill==(200)||skill==(201)||skill==(202)||skill==(205);
}  

uint GetProtoItemUseApCost(Critter&cr,ProtoItem&proto,uint8 mode)
{
	uint8 use=mode&0xF;
	uint8 aim=mode>>4;
	int apCost=1;
	
	if(use==(4))
	{
		if(((getParam_Timeout(cr,(238)))>10000000))
		apCost=__TbApCostUseItem;
		else
		apCost=__RtApCostUseItem;
	}
	else if(use==(3))
	{
		if(((getParam_Timeout(cr,(238)))>10000000))
		apCost=__TbApCostReloadWeapon;
		else
		apCost=__RtApCostReloadWeapon;
		
		if(proto.Type==(3)&&proto.Weapon_Perk==(6))
		apCost--;
	}
	else if(use>=(0)&&use<=(2)&&proto.Type==(3))
	{
		int skill=((use)==0?proto.Weapon_Skill_0:((use)==1?proto.Weapon_Skill_1:((use)==2?proto.Weapon_Skill_2:0)));
		bool hthAttack=ProtoItem_Weapon_IsHtHAttack(proto,use);
		bool rangedAttack=ProtoItem_Weapon_IsRangedAttack(proto,use);
		
		apCost=((use)==0?proto.Weapon_ApCost_0:((use)==1?proto.Weapon_ApCost_1:((use)==2?proto.Weapon_ApCost_2:0)));
		if(aim!=0)
		apCost+=GetAimApCost(aim);
		if(hthAttack&&cr.ParamBase[(302)]!=0)
		apCost--;
		if(rangedAttack&&cr.ParamBase[(306)]!=0)
		apCost--;
		if(cr.ParamBase[(557)]!=0&&!hthAttack)
		apCost--;
	}
	
	if(apCost<1)
	apCost=1;
	return apCost;
}

uint GetItemUseApCost(Critter&cr,Item&item,uint8 mode)
{
	return GetProtoItemUseApCost(cr,item.Proto,mode);
}

uint get_use_ap_cost(Critter&cr,Item&item,uint8 mode)
{
	return GetItemUseApCost(cr,item,mode);
}

uint GetProtoItemAttackDistantion(Critter&cr,ProtoItem&proto,uint8 mode)
{
	if(proto.Type!=(3))
	return 0;
	
	uint8 use=mode&0xF;
	int skill=((use)==0?proto.Weapon_Skill_0:((use)==1?proto.Weapon_Skill_1:((use)==2?proto.Weapon_Skill_2:0)));
	int dist=((use)==0?proto.Weapon_MaxDist_0:((use)==1?proto.Weapon_MaxDist_1:((use)==2?proto.Weapon_MaxDist_2:0)));
	int strength=getParam_Strength(cr,0);
	int heaveHo=cr.ParamBase[(336)];
	if(skill==(205))
	dist=(((dist)<(int(3)*(((int(10))<(strength+2*heaveHo))?(int(10)):(strength+2*heaveHo))))?(dist):(int(3)*(((int(10))<(strength+2*heaveHo))?(int(10)):(strength+2*heaveHo))));
	if(ProtoItem_Weapon_IsHtHAttack(proto,mode)&&cr.ParamBase[(530)]!=0)
	dist++;
	dist+=cr.GetMultihex();
	if(dist<0)
	dist=0;
	return dist;
}

uint GetItemAttackDistantion(Critter&cr,Item&item,uint8 mode)
{
	return GetProtoItemAttackDistantion(cr,item.Proto,mode);
}

uint GetActiveItemAttackDistantion(Critter&cr)
{
	Item@item=cr.GetItem(0,(1));
	if(item is null)
	{
		uint8 mode=0;
		ProtoItem@proto=cr.GetSlotProto((1),mode);
		return GetProtoItemAttackDistantion(cr,proto,mode);
	}
	return GetItemAttackDistantion(cr,item,item.Mode);
}

uint get_attack_distantion(Critter&cr,Item&item,uint8 mode)
{
	return GetItemAttackDistantion(cr,item,mode);
}  

int GetNightPersonBonus()
{
	if(__Hour<6||__Hour>18)
	return 1;
	if(__Hour==6&&__Minute==0)
	return 1;
	if(__Hour==18&&__Minute>0)
	return 1;
	return-1;
}

uint GetAimApCost(int hitLocation)
{
	switch(hitLocation)
	{
		case(4):
		return __ApCostAimTorso;
		case(7):
		return __ApCostAimEyes;
		case(1):
		return __ApCostAimHead;
		case(2):
		case(3):
		return __ApCostAimArms;
		case(8):
		return __ApCostAimGroin;
		case(5):
		case(6):
		return __ApCostAimLegs;
		case(0):
		case(9):
		default:
		break;
	}
	return 0;
}

int GetDeteriorationProc(Item&item)
{
	int val=item.Deterioration*100/(10000);
	return(((val)>(100))?(100):(((val)<(0))?(0):(val)));
}
