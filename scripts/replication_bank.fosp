

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}     

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";                                             

class CBank
{
	Entire[]HideContPos;
	Entire[]ShowContPos;
	Entire[]DoorHexPos;
	Entire[]DoorGuardPos;
	uint PassedTime;
	bool PlayerNotify;
	bool PlayerEntered;
	uint PassedPlayerId;
	uint ThrowOutPlayerId;
	bool DoorGuardSayWarning;
	bool PlayerPassed;
	uint16 DoorPid;
	
	void Init(Map@map)
	{
		PassedTime=0;
		PlayerNotify=false;
		PlayerEntered=false;
		PassedPlayerId=0;
		ThrowOutPlayerId=0;
		DoorGuardSayWarning=false;
		ParseEntires(map,HideContPos,(100));
		ParseEntires(map,ShowContPos,(101));
		ParseEntires(map,DoorGuardPos,(110));
		ParseEntires(map,DoorHexPos,(120));
	}
}

uint[]BanksMapId;
CBank[]Banks;

CBank@GetBank(Critter&cr)
{
	uint16 id=cr.GetMapId();
	if(id==0)
	return null;
	for(uint i=0,j=BanksMapId.length();i<j;i++)
	if(id==BanksMapId[i])
	return@Banks[i];
	return null;
}

void ParseBank(Critter&cr)
{
	Map@map=cr.GetMap();
	if((@map!=null)&&not(@GetBank(cr)!=null))
	{
		BanksMapId.insertLast(map.Id);
		Banks.grow(1);
		Banks.last().Init(map);
	}
}   

void _BankerInit(Critter&banker,bool firstTime)
{
	banker.SetEvent((1),"_BankerFinish");
	banker.SetEvent((0),"_BankerIdle");
	banker.SetEvent((18),"_BankerOnMessage");
	ParseBank(banker);
	banker.StatBase[(89)]=(1);
	banker.ModeBase[(513)]=1;
}

void _BankerFinish(Critter&banker,bool deleted)
{
	CBank@bank=GetBank(banker);
	if((@bank!=null)&&bank.PassedPlayerId!=0)
	TransferItems(banker,bank.PassedPlayerId,true);
}

void _BankerIdle(Critter&banker)
{
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	return; 
	
	if(bank.PassedPlayerId==0)
	return; 
	
	if(not bank.PlayerEntered&&__FullSecond>bank.PassedTime+((15)*__TimeMultiplier))
	{
		banker.SayMsg((2),(0),(1000));
		EndEnter(banker,bank.PassedPlayerId);
	}
	
	else if(bank.PlayerEntered&&not bank.PlayerNotify&&__FullSecond>bank.PassedTime+(((2)*__TimeMultiplier*60))-((20)*__TimeMultiplier))
	{
		banker.SayMsg((1),(0),(1002));
		bank.PlayerNotify=true;
		banker.Wait(5000);
	}
	
	else if(__FullSecond>bank.PassedTime+(((2)*__TimeMultiplier*60)))
	{
		banker.SendMessage((3),bank.PassedPlayerId,(2));
		banker.SayMsg((4),(0),(1003));
		EndEnter(banker,bank.PassedPlayerId);
	}
	
	else
	{
		banker.Wait(5000);
	}
}

void _BankerOnMessage(Critter&banker,Critter&player,int num,int val)
{ 
	
	if(banker.StatBase[(89)]!=(1))
	return;
	
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	return;
	
	if(player.Id!=bank.PassedPlayerId)
	return; 
	
	if(num==(4))
	{
		if(not bank.PlayerEntered)
		return;
		banker.SayMsg((2),(0),(1000));
		EndEnter(banker,bank.PassedPlayerId);
	}
	else if(num==(5))
	{
		bank.PlayerEntered=true;
	}
} 

bool IsCanEnter(Critter&player,Critter&banker)
{
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	return false;
	
	if(bank.PassedPlayerId!=0)
	return false;
	
	banker.StatBase[(90)]=1;
	banker.SendMessage((0),int(player.Id),(2));
	
	return banker.StatBase[(90)]!=0?true:false;
}

uint r_TryEnter(Critter&player,Critter@banker)
{
	
	if(IsCanEnter(banker,player)==false)
	{
		return(5);
	} 
	
	if(player.CountItem((41))<(100))
	{
		return(6);
	} 
	
	if(TransferItems(banker,player.Id,false)==false)
	{
		return(4);
	}
	
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	{
		return(4);
	} 
	
	player.DeleteItem((41),(100));
	bank.PassedPlayerId=player.Id;
	bank.PassedTime=__FullSecond;
	bank.PlayerNotify=false;
	bank.PlayerEntered=false;
	banker.SendMessage((1),int(player.Id),(2));
	
	return 0;
} 

bool d_IsNotEntered(Critter&player,Critter@banker)
{
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	return true;
	return bank.PassedPlayerId!=player.Id;
}

bool d_IsEntered(Critter&player,Critter@banker)
{
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	return false;
	
	return bank.PassedPlayerId==player.Id;
}

void r_EndEnter(Critter&player,Critter@banker)
{
	EndEnter(banker,player.Id);
} 

void EndEnter(Critter&banker,uint playerId)
{
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	return;
	
	bank.PassedPlayerId=0;
	
	TransferItems(banker,playerId,true);
	banker.SendMessage((2),playerId,(2));
} 

bool TransferItems(Critter&banker,uint playerId,bool hide)
{
	CBank@bank=GetBank(banker);
	if(not(@bank!=null))
	return false;
	
	uint num=playerId%10;
	if(num>=bank.ShowContPos.length())
	num=0;
	if(bank.HideContPos.length()==0||bank.ShowContPos.length()==0)
	return false;
	Map@map=banker.GetMap();
	if(not(@map!=null))
	return false;
	Item@contHide=map.GetItem(bank.HideContPos[0].HexX,bank.HideContPos[0].HexY,((128)));
	if(not(@contHide!=null))
	return false;
	Item@contShow=map.GetItem(bank.ShowContPos[num].HexX,bank.ShowContPos[num].HexY,((128)));
	if(not(@contShow!=null))
	return false;  
	
	for(int i=0;i<10;i++)
	{
		Item@contTmp=map.GetItem(bank.ShowContPos[i].HexX,bank.ShowContPos[i].HexY,((128)));
		if((@contTmp!=null))
		contTmp.LockerId=1;
	}
	
	contShow.LockerId=0; 
	
	Item@[]items;
	if(hide)
	{
		contShow.GetItems(0,items);
		MoveItems(items,contHide,playerId);
	}
	else
	{
		contHide.GetItems(playerId,items);
		MoveItems(items,contShow,0);
	}
	return true;
}   

void _GuardInit(Critter&guard,bool firstTime)
{
	guard.SetEvent((0),"_GuardIdle");
	guard.SetEvent((18),"_GuardOnMessage");
	guard.SetEvent((28),"_GuardSmthAttack");
	guard.SetEvent((27),"_GuardSmthStealing");
	guard.SetEvent((30),"_GuardSmthUseItem");
	guard.SetEvent((32),"_GuardSmthDropItem");
	ParseBank(guard);
	guard.StatBase[(89)]=(2);
	guard.StatBase[(22)]=30;
	guard.StatBase[(29)]=60;
	guard.ModeBase[(513)]=1;
	guard.ModeBase[(522)]=1;
	guard.StatBase[(8)]=12;
	guard.StatBase[(101)]=300;
}

void _GuardIdle(Critter&guard)
{
	CBank@bank=GetBank(guard);
	if(not(@bank!=null))
	return;
	bank.ThrowOutPlayerId=0;
} 

void _GuardOnMessage(Critter&guard,Critter&crit,int num,int val)
{
	
	if(guard.StatBase[(89)]!=(2))
	return; 
	
	CBank@bank=GetBank(guard);
	if(not(@bank!=null))
	return;  
	
	if(crit.IsPlayer())
	{
		if(num==(4))
		{
			
			if(bank.PassedPlayerId==crit.Id||bank.ThrowOutPlayerId==crit.Id)
			return;
			if(bank.DoorGuardSayWarning)
			return;
			
			for(uint i=0;i<bank.DoorGuardPos.length();i++)
			{
				if(guard.HexX!=bank.DoorGuardPos[i].HexX||guard.HexY!=bank.DoorGuardPos[i].HexY)
				continue;
				guard.SayMsg((4),(0),(1001));
				bank.DoorGuardSayWarning=true;
				break;
			}
		}
		else if(num==(5))
		{
			
			if(bank.PassedPlayerId==crit.Id||bank.ThrowOutPlayerId==crit.Id)
			return;
			AddAttackPlane(guard,0,crit);
		}
		return;
	}  
	
	if(crit.StatBase[(89)]!=(1))
	return; 
	
	if(num==(0))
	{
		if(!guard.IsNoPlanes())
		crit.StatBase[(90)]=0;
		else if(guard.Cond!=(1))
		crit.StatBase[(90)]=0;
	}
	
	else if(num==(1))
	{}
	
	else if(num==(2))
	{}
	
	else if(num==(3))
	{
		Map@map=guard.GetMap();
		if(not(@map!=null))
		return;
		Critter@player=map.GetCritter(uint(val));
		if((@player!=null))
		{
			AddAttackPlane(guard,0,player);
			bank.ThrowOutPlayerId=uint(val);
		}
	}
}

void _GuardSmthAttack(Critter&guard,Critter&attacker,Critter&target)
{
	if(attacker.IsPlayer())
	AddAttackPlane(guard,0,attacker);
}

void _GuardSmthStealing(Critter&guard,Critter&fromCr,Critter&thief,bool success,Item&item,uint count)
{
	if(thief.IsPlayer()&&guard.IsLife())
	{
		guard.SayMsg((4),(0),(1004));
		AddAttackPlane(guard,0,thief,1);
	}
}

void _GuardSmthDropItem(Critter&npc,Critter&fromCr,Item&item)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(209)||pid==(545)||pid==(206))
		{
			AddAttackPlane(npc,0,fromCr);
		}
	}
}

void _GuardSmthUseItem(Critter&npc,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(85)||pid==(544)||pid==(222)||pid==(51))
		{
			AddAttackPlane(npc,0,fromCr);
		}
	}
}

void t_DangerHex(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(not entered)
	return;
	
	if(!player.IsPlayer())
	return;
	
	CBank@bank=GetBank(player);
	if(not(@bank!=null))
	return; 
	
	bank.DoorGuardSayWarning=false;
	player.SendMessage((4),0,(2));
}

void t_AttackHex(Critter&player,Scenery&trigger,bool entered,uint8 dir)
{
	if(not entered)
	return;
	
	if(!player.IsPlayer())
	return; 
	
	player.SendMessage((5),0,(2));
}   

uint16[]ShowContPos;
uint16[]DoorHexPos;
bool PlayerPassed=false;
uint16 DoorPid=0;

void _KeeperInit(Critter&keeper,bool firstTime)
{
	keeper.SetEvent((0),"_KeeperIdle");
	keeper.SetEvent((18),"_KeeperOnMessage");
	ParseBank(keeper);
	keeper.StatBase[(89)]=(3);
	keeper.ModeBase[(513)]=1;
}

void _KeeperIdle(Critter&keeper)
{
	CBank@bank=GetBank(keeper);
	if(not(@bank!=null))
	return;
	if(bank.PlayerPassed)
	keeper.Wait(10000);
}

void _KeeperOnMessage(Critter&keeper,Critter&banker,int num,int val)
{
	
	if(keeper.StatBase[(89)]!=(3)||banker.StatBase[(89)]!=(1))
	return;
	
	CBank@bank=GetBank(keeper);
	if(not(@bank!=null))
	return; 
	
	if(num==(1))
	{
		uint contNum=uint(val)%10;
		if(contNum>=bank.ShowContPos.length())
		contNum=0;
		if(bank.ShowContPos.length()==0)
		return;
		bank.PlayerPassed=true;
		AddWalkPlane(keeper,0,bank.ShowContPos[contNum].HexX,bank.ShowContPos[contNum].HexY,0xFF,false,1);
		
	}
	
	else if(num==(2)||num==(3))
	{
		bank.PlayerPassed=false;
		keeper.Wait(0);
		Map@map=keeper.GetMap();
		if(not(@map!=null))
		return; 
		
		if(bank.DoorHexPos.length()>0)
		{
			Item@door=map.GetDoor(bank.DoorHexPos[0].HexX,bank.DoorHexPos[0].HexY);
			if((@door!=null)&&((door.LockerCondition&(0x01))!=0))
			AddPickPlane(keeper,0,door,0,false);
		} 
		
		for(uint i=0;i<bank.ShowContPos.length();i++)
		{
			Item@cont=map.GetItem(bank.ShowContPos[i].HexX,bank.ShowContPos[i].HexY,((128)));
			if(not(@cont!=null)||(not((cont.LockerCondition&(0x01))!=0)))
			continue;
			AddPickPlane(keeper,0,cont,0,false);
		}
	}
}

uint dlg_TalkAboutGagPlayer(Critter&player,Critter@npc,string@playerName)
{
	if(!((@playerName!=null)&&playerName.length()>0))
	return 0;
	
	if(!(@npc!=null))
	return 0;
	if(npc.IsDead())
	return 0;
	
	Critter@cr=GetPlayer(playerName);
	if((@cr!=null))
	{
		if(!cr.IsDead())
		{ 
			
			if(npc.IsSee(cr)&&npc.StatBase[(99)]==0&&cr.Id!=player.Id)
			{
				if(AddCheckPlayerPosition(npc,cr))
				{
					return(4);
				}
			}
		}
	}
	
	return(5);
}

bool AddCheckPlayerPosition(Critter&guard,Critter&player)
{
	Map@guardMap=guard.GetMap();
	Map@playerMap=player.GetMap();
	if(!(@guardMap!=null)||!(@playerMap!=null))
	return false;
	if(guardMap.Id!=playerMap.Id)
	return false;
	
	uint[]values={guard.Id,player.Id,player.HexX,player.HexY};
	
	if(CreateTimeEvent(__FullSecond+(((60)*__TimeMultiplier)),"e_WarnGagPlayer",values,false)>0)
	{
		guard.StatBase[(99)]=CreateTimeEvent(__FullSecond+((((60)*__TimeMultiplier))+((10)*__TimeMultiplier)),"e_AttackGagPlayer",values,false);
		return true;
	}
	return false;
}

uint e_WarnGagPlayer(uint[]@values)
{
	Critter@guard=GetCritter(values[0]);
	if((@guard!=null))
	{
		Critter@player=GetCritter(values[1]);
		if((@player!=null))
		{
			if(guard.IsSee(player))
			{
				
				guard.SayMsg((3),(1),(1000000000+(guard.Stat[(104)])*100000+((1))),"$pname "+GetPlayerName(player.Id));
			}
		}
	}
	return 0;
}

uint e_AttackGagPlayer(uint[]@values)
{
	Critter@guard=GetCritter(values[0]);
	if((@guard!=null))
	{
		guard.StatBase[(99)]=0;
		Critter@player=GetCritter(values[1]);
		if((@player!=null))
		{
			if(player.IsPlayer())
			{
				Map@guardMap=guard.GetMap();
				Map@playerMap=player.GetMap();
				if(!(@guardMap!=null)||!(@playerMap!=null))
				return 0;
				if(guardMap.Id!=playerMap.Id)
				return 0;
				
				uint oldX=values[2];
				uint oldY=values[3];
				uint newX=player.HexX;
				uint newY=player.HexY;
				
				if(oldX==newX&&oldY==newY)
				{
					guard.SayMsg((3),(1),(1000000000+(guard.Stat[(104)])*100000+((2))));
					AddAttackPlane(guard,0,player);
					player.SendMessage((5),0,(2));
				}
			}
		}
	}
	
	return 0;
}
