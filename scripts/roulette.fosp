

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";

class RouletteTable
{
	uint MinBet;
	uint MaxBet;
	uint Bet1;
	uint Bet2;
	uint Bet3;
	uint Bet4;
	uint16 OnCheat1;
	uint16 OnCheat2;
	uint16 OnCheat3;
	uint8 CLevel;
	uint StopGameMoney;
	uint16 WaitForGame;
	uint16 GameCurrency;
	
	RouletteTable(uint minBet,uint maxBet,uint bet1,uint bet2,uint bet3,uint bet4,uint16 onCheat1,uint16 onCheat2,uint16 onCheat3,uint8 cLevel,uint stopGameMoney,uint16 waitForGame,uint16 gameCurrency)
	{
		this.MinBet=minBet;
		this.MaxBet=maxBet;
		this.Bet1=bet1;
		this.Bet2=bet2;
		this.Bet3=bet3;
		this.Bet4=bet4;
		this.OnCheat1=onCheat1;
		this.OnCheat2=onCheat2;
		this.OnCheat3=onCheat3;
		this.CLevel=cLevel;
		this.StopGameMoney=stopGameMoney;
		this.WaitForGame=waitForGame;
		this.GameCurrency=gameCurrency;
	}
};
RouletteTable@[]RTables;

class Starter
{
	Starter()
	{
		InitRTables();
	}
};
Starter aStarter;

void InitRTables()
{
	RTables.insertLast(@RouletteTable(20,750,20,100,300,500,1,0,0,1,3000,2,(41)));
	RTables.insertLast(@RouletteTable(30,850,30,200,500,650,0,0,0,3,6000,3,(41)));
}

void RunCheatScript(uint16 funcNum,Critter&player,Critter&croupier)
{
	switch(funcNum)
	{
		case 1:
		_OnCheat1_npc1(player,croupier);
		break;
		default:
		_OnCheatDefault(player,croupier);
		break;
	}
}

void _OnCheat1_npc1(Critter&player,Critter&croupier)
{     
	
}

void _OnCheatDefault(Critter&player,Critter&croupier)
{   
	
}                       

class CBet
{
	uint8 BetType;
	uint BetSize;
	uint8[]BetCoords;
	CBet()
	{
		BetType=0;
		BetSize=0;
		BetCoords.resize(0);
	}
	CBet(int betType,int bet,uint8[]coords)
	{
		BetType=betType;
		BetSize=bet;
		BetCoords=coords;
	}
}                                        

void LoadSettings(uint npcRole,Critter&croupier)
{
	uint SettNum=npcRole-(72600);
	if(SettNum>=RTables.length())
	{
		SettNum=0;
	}
	
	if(RTables.length()>0)
	{
		MinBet[croupier.StatBase[((99))]]=RTables[SettNum].MinBet;
		MaxBet[croupier.StatBase[((99))]]=RTables[SettNum].MaxBet;
		Bet1[croupier.StatBase[((99))]]=RTables[SettNum].Bet1;
		Bet2[croupier.StatBase[((99))]]=RTables[SettNum].Bet2;
		Bet3[croupier.StatBase[((99))]]=RTables[SettNum].Bet3;
		Bet4[croupier.StatBase[((99))]]=RTables[SettNum].Bet4;
		OnCheat1[croupier.StatBase[((99))]]=RTables[SettNum].OnCheat1;
		OnCheat2[croupier.StatBase[((99))]]=RTables[SettNum].OnCheat2;
		OnCheat3[croupier.StatBase[((99))]]=RTables[SettNum].OnCheat3;
		CLevel[croupier.StatBase[((99))]]=RTables[SettNum].CLevel;
		StopGameMoney[croupier.StatBase[((99))]]=RTables[SettNum].StopGameMoney;
		WaitForGame[croupier.StatBase[((99))]]=RTables[SettNum].WaitForGame;
		GameCurrency[croupier.StatBase[((99))]]=RTables[SettNum].GameCurrency;
	}
	else
	{
		Log("\n\n<Roulette> Error: Settings not found!");
	}
}

uint GetNumber()
{
	uint i;
	i=Random(0,37);
	return i;
}

string GetNumberStr(uint8 number)
{
	string res="";
	number++;
	if(number>36)
	{
		if(number==(37))
		{
			res+="@msg dlg "+(1000000000+(((95)))*100000+((1)))+"@";
		}
		else
		{
			res+="@msg dlg "+(1000000000+(((95)))*100000+((2)))+"@";
		}
	}
	else
	{
		res+="@msg dlg "+(1000000000+(((95)))*100000+((5)))+"@"+number+GetColor(number);
	}
	res+="\n@msg dlg "+(1000000000+(((95)))*100000+((6)))+"@";
	return res;
}

string GetColor(int i)
{
	string res="";
	switch(i)
	{
		case 1:
		case 3:
		case 5:
		case 7:
		case 9:
		case 12:
		case 14:
		case 16:
		case 18:
		case 19:
		case 21:
		case 23:
		case 25:
		case 27:
		case 30:
		case 32:
		case 34:
		case 36:
		res+=" @msg dlg "+(1000000000+(((95)))*100000+((3)))+"@";
		break;
		default:
		res+=" @msg dlg "+(1000000000+(((95)))*100000+((4)))+"@";
		break;
	}
	return res;
}

void SaveBetCoords(Critter&croupier,uint coord)
{              
	
}

void EndGame(Critter&croupier)
{
	Bets[croupier.StatBase[((99))]].resize(0);
	CurBetType[croupier.StatBase[((99))]]=0;
	DialogAnswerPageIndex[croupier.StatBase[((99))]]=0;
	DialogAnswerNum[croupier.StatBase[((99))]]=0;
	croupier.StatBase[((96))]=0;
	croupier.StatBase[((97))]=0;
	croupier.StatBase[((98))]=0;
	AllBetSize[croupier.StatBase[((99))]]=0;
}

uint CheckWinCash(Critter&croupier,uint8 num)
{
	uint cash=0;
	for(uint i=0;i<Bets[croupier.StatBase[((99))]].length();i++)
	{
		for(uint m=0;m<Bets[croupier.StatBase[((99))]][i].BetCoords.length();m++)
		{
			if(Bets[croupier.StatBase[((99))]][i].BetCoords[m]==(num+1))
			{
				cash+=Bets[croupier.StatBase[((99))]][i].BetSize*GetMultipier(Bets[croupier.StatBase[((99))]][i].BetType);
				break;
			}
		}
	}
	return cash;
}

uint8 GetMultipier(uint8 betType)
{
	uint8 multipl;
	switch(betType)
	{
		case(0):
		multipl=(36);
		break;
		case(1):
		multipl=(18);
		break;
		case(2):
		multipl=(12);
		break;
		case(3):
		multipl=(9);
		break;
		case(4):
		multipl=(6);
		break;
		case(5):
		case(6):
		multipl=(3);
		break;
		case(7):
		case(8):
		case(9):
		multipl=(2);
		break;
	}
	return multipl;
}

uint8 GetCornerCoord(uint8 index,uint8 coordNum)
{
	uint8 res=((index*3)-1)/2;
	if(coordNum==1)
	{
		return res;
	}
	else
	{
		return res+4;
	}
}

void SetCoords(Critter&croupier,uint8 betType,uint8[]coords)
{
	uint len=Bets[croupier.StatBase[((99))]].length();
	len--;
	switch(betType)
	{
		case(0):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(1);
		Bets[croupier.StatBase[((99))]][len].BetCoords[0]=coords[0];
		break;
		case(1):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(2);
		Bets[croupier.StatBase[((99))]][len].BetCoords[0]=coords[0];
		Bets[croupier.StatBase[((99))]][len].BetCoords[1]=coords[1];
		break;
		case(2):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(3);
		SetStreetCoords(croupier,coords[0],len);
		break;
		case(3):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(4);
		SetCornerCoords(croupier,coords[0],coords[1],len);
		break;
		case(4):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(6);
		SetSixCoords(croupier,coords[0],len);
		break;
		case(5):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(12);
		SetColumnCoords(croupier,coords[0],len);
		break;
		case(6):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(12);
		SetDozenCoords(croupier,coords[0],len);
		break;
		case(7):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(18);
		SetEOCoords(croupier,coords[0],len);
		break;
		case(8):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(18);
		SetRBCoords(croupier,coords[0],len);
		break;
		case(9):
		Bets[croupier.StatBase[((99))]][len].BetCoords.resize(18);
		SetLHCoords(croupier,coords[0],len);
		break;
	}
}

void SetStreetCoords(Critter@croupier,uint8 coord,uint8 len)
{
	Bets[croupier.StatBase[((99))]][len].BetCoords[0]=coord*3;
	Bets[croupier.StatBase[((99))]][len].BetCoords[1]=coord*3-1;
	Bets[croupier.StatBase[((99))]][len].BetCoords[2]=coord*3-2;
}

void SetCornerCoords(Critter@croupier,uint8 coord1,uint8 coord2,uint8 len)
{
	uint8 x1=0,x2=0;
	x1=GetXByNum(coord1);
	x2=GetXByNum(coord2);
	Bets[croupier.StatBase[((99))]][len].BetCoords[0]=coord1;
	Bets[croupier.StatBase[((99))]][len].BetCoords[3]=coord2;
	if(x2>x1)
	{
		Bets[croupier.StatBase[((99))]][len].BetCoords[1]=coord1+1;
		Bets[croupier.StatBase[((99))]][len].BetCoords[2]=coord2-1;
	}
	if(x2<x1)
	{
		Bets[croupier.StatBase[((99))]][len].BetCoords[1]=coord1-1;
		Bets[croupier.StatBase[((99))]][len].BetCoords[2]=coord2+1;
	}
}

void SetSixCoords(Critter@croupier,uint8 coord,uint8 len)
{
	coord--;
	for(int8 i=0;i<6;i++)
	{
		Bets[croupier.StatBase[((99))]][len].BetCoords[i]=3*coord+i+1;
	}
}

void SetColumnCoords(Critter@croupier,uint8 coord,uint8 len)
{
	for(uint8 i=0;i<12;i++)
	{
		Bets[croupier.StatBase[((99))]][len].BetCoords[i]=i*3+coord;
	}
}

void SetDozenCoords(Critter@croupier,uint8 coord,uint8 len)
{
	for(uint8 i=0;i<12;i++)
	{
		Bets[croupier.StatBase[((99))]][len].BetCoords[i]=coord*12-i;
	}
}

void SetEOCoords(Critter@croupier,uint8 coord,uint8 len)
{
	if(coord==0)
	{
		coord=2;
	}
	for(uint8 i=0;i<18;i++)
	{
		Bets[croupier.StatBase[((99))]][len].BetCoords[i]=i*2+coord;
	}
}

void SetRBCoords(Critter@croupier,uint8 coord,uint8 len)
{
	uint8[]red={1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36};
	uint8[]black={2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35};
	for(uint8 i=0;i<18;i++)
	{
		if(coord==(0))
		{
			Bets[croupier.StatBase[((99))]][len].BetCoords[i]=red[i];
		}
		else
		{
			Bets[croupier.StatBase[((99))]][len].BetCoords[i]=black[i];
		}
	}
}

void SetLHCoords(Critter@croupier,uint8 coord,uint8 len)
{
	for(uint8 i=0;i<18;i++)
	{
		Bets[croupier.StatBase[((99))]][len].BetCoords[i]=coord*18+i+1;
	}
}

uint8 GetXByNum(uint8 num)
{
	return num/3;
}

uint GetMaxBetForBetType(Critter&croupier,uint betType)
{
	uint mBet;
	switch(betType)
	{
		case(0):
		mBet=MaxBet[croupier.StatBase[((99))]]/18;
		break;
		case(1):
		mBet=MaxBet[croupier.StatBase[((99))]]/9;
		break;
		case(2):
		mBet=MaxBet[croupier.StatBase[((99))]]/6;
		break;
		case(3):
		mBet=MaxBet[croupier.StatBase[((99))]]*2/9;
		break;
		case(4):
		mBet=MaxBet[croupier.StatBase[((99))]]/3;
		break;
		case(5):
		case(6):
		mBet=MaxBet[croupier.StatBase[((99))]]*2/3;
		break;
		case(7):
		case(8):
		case(9):
		mBet=MaxBet[croupier.StatBase[((99))]];
		break;
	}
	return mBet;
}                  

uint NumOfNpc=0;
uint[][]GameAnyData;
uint[][]AnyDataTemp;
uint8[]CurBetType;

uint8[]DialogAnswerPageIndex;
uint8[]DialogAnswerNum;

CBet@[][]Bets;  

uint[]MinBet;
uint[]MaxBet;
uint[]Bet1;
uint[]Bet2;
uint[]Bet3;
uint[]Bet4;
uint[]AllBetSize;
uint16[]OnCheat1;
uint16[]OnCheat2;
uint16[]OnCheat3;
uint8[]CLevel;
uint[]StopGameMoney;
uint16[]WaitForGame;
uint16[]GameCurrency;

void _RouletteInit(Critter&croupier,bool firstTime)
{
	AddElements();
	croupier.StatBase[((99))]=NumOfNpc++;
	DialogAnswerNum[croupier.StatBase[((99))]]=0;
	if(IsAnyData("Roulette_"+croupier.Id))
	{
		if(GetAnyData("Roulette_"+croupier.Id,AnyDataTemp[croupier.StatBase[((99))]]))
		{
			for(uint8 i=0;i<(1);i++)
			{
				GameAnyData[croupier.StatBase[((99))]][i]=AnyDataTemp[croupier.StatBase[((99))]][i];
			} 
			
		}
	}
	LoadSettings(croupier.Stat[(89)],croupier);
	
} 

void AddElements()
{
	Bets.grow(1);
	CurBetType.grow(1);
	DialogAnswerPageIndex.grow(1);
	DialogAnswerNum.grow(1);
	AnyDataTemp.grow(1);
	GameAnyData.grow(1);
	
	MinBet.grow(1);
	MaxBet.grow(1);
	Bet1.grow(1);
	Bet2.grow(1);
	Bet3.grow(1);
	Bet4.grow(1);
	AllBetSize.grow(1);
	OnCheat1.grow(1);
	OnCheat2.grow(1);
	OnCheat3.grow(1);
	CLevel.grow(1);
	StopGameMoney.grow(1);
	WaitForGame.grow(1);
	GameCurrency.grow(1);
}

void dlg_MakeBet(Critter&master,Critter@croupier,string@str)
{
	int coord=0;
	if(((@str!=null)&&str.length()>0))
	{
		master.Say((13),"\n");
		if((not StrToInt(str,coord))and(str!="00"))
		{
			master.SayMsg((13),(1),((1000000000+(((95)))*100000+(7))));
		}
		else
		{
			if(str=="00")
			{
				master.SayMsg((12),(1),((1000000000+(((95)))*100000+(9))));
			}
			else
			{
				if((coord<0)or(coord>36))
				{
					master.SayMsg((13),(1),((1000000000+(((95)))*100000+(7))));
				}
				else
				{
					master.SayMsg((12),(1),((1000000000+(((95)))*100000+(9))));
				}
			}
		}
	}
	else
	{
		if((@str!=null))
		{
			str="$makebet"+"@msg dlg "+((1000000000+(((95)))*100000+(14)))+"@";
		}
	}
}

void dlg_CheckWinNumber(Critter&master,Critter@croupier,string@str)
{
	uint num;
	uint winCash;
	if(not((@str!=null)&&str.length()==0))
	return;
	num=GetNumber();
	winCash=CheckWinCash(croupier,num);
	if(winCash>0)
	{
		master.AddItem(GameCurrency[croupier.StatBase[((99))]],winCash);
	}
	str+="$winnumber"+GetNumberStr(num)+winCash;
	EndGame(croupier);
}

void dlg_SetBetSize(Critter&master,Critter@croupier,string@str)
{
	uint mBet;
	if(!((@str!=null)&&str.length()>0))
	{
		mBet=GetMaxBetForBetType(croupier,croupier.StatBase[((94))]);  
		
		str+="$minbet"+MinBet[croupier.StatBase[((99))]];
		str+="$betone"+Bet1[croupier.StatBase[((99))]];
		str+="$bettwo"+Bet2[croupier.StatBase[((99))]];
		str+="$betthree"+Bet3[croupier.StatBase[((99))]];
		str+="$betfour"+Bet4[croupier.StatBase[((99))]];
		str+="$maxbet"+mBet;
		str+="$allmoney"+master.CountItem(GameCurrency[croupier.StatBase[((99))]]);
	}
}

bool d_MaxBet(Critter&master,Critter@croupier)
{
	uint maxBet=GetMaxBetForBetType(croupier,croupier.StatBase[((94))]);  
	
	if(master.CountItem(GameCurrency[croupier.StatBase[((99))]])>maxBet)
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool d_IsSpecBet(Critter&master,Critter@croupier,int betType,int betNum)
{
	if(int(CurBetType[croupier.StatBase[((99))]])==betType)
	{   
		
		DialogAnswerNum[croupier.StatBase[((99))]]++;
		if((DialogAnswerNum[croupier.StatBase[((99))]]<(DialogAnswerPageIndex[croupier.StatBase[((99))]]*(5)+1))or(DialogAnswerNum[croupier.StatBase[((99))]]-(DialogAnswerPageIndex[croupier.StatBase[((99))]]*(5))>(5)))
		{
			return false;
		}
		else
		{
			return true;
		}
	}
	else
	{
		return false;
	}
}

bool d_IsNavigationNeeded(Critter&master,Critter@croupier,int nav)
{
	if(nav==(0))
	{
		if(DialogAnswerPageIndex[croupier.StatBase[((99))]]>0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else
	{
		if(DialogAnswerNum[croupier.StatBase[((99))]]>(DialogAnswerPageIndex[croupier.StatBase[((99))]]+1)*(5))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}

bool d_NoBets(Critter&master,Critter@croupier,int val)
{
	bool res;
	if(Bets[croupier.StatBase[((99))]].length()==0)
	{
		res=true;
	}
	else
	{
		res=false;
	}
	if(val==(0))
	{
		return res;
	}
	else
	{
		return!res;
	}
}

bool d_IsMoneyEnough(Critter&master,Critter@croupier,int val)
{
	uint8 betType;
	uint outSidebetsSize=0;
	uint inSidebetsSize=0;
	uint playerMoney=master.CountItem(GameCurrency[croupier.StatBase[((99))]]);
	uint8 len=Bets[croupier.StatBase[((99))]].length();
	if(len==0)
	{
		if(playerMoney>=MinBet[croupier.StatBase[((99))]])
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else
	{
		for(uint8 i=0;i<len;i++)
		{
			betType=Bets[croupier.StatBase[((99))]][i].BetType;
			switch(betType)
			{
				case(0):
				case(1):
				case(2):
				case(3):
				case(4):
				inSidebetsSize+=Bets[croupier.StatBase[((99))]][i].BetSize;
				break;
				default:
				outSidebetsSize+=Bets[croupier.StatBase[((99))]][i].BetSize;
				break;
			}
		}
		if(val==(1))
		{
			if((playerMoney+inSidebetsSize)>=MinBet[croupier.StatBase[((99))]])
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			if((playerMoney+outSidebetsSize)>=MinBet[croupier.StatBase[((99))]])
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	}
}

bool d_IsMoneyEnoughForBet(Critter&master,Critter@croupier,int betNum)
{
	uint bet;
	uint maxBet;
	switch(betNum)
	{
		case 1:
		bet=Bet1[croupier.StatBase[((99))]];
		break;
		case 2:
		bet=Bet2[croupier.StatBase[((99))]];
		break;
		case 3:
		bet=Bet3[croupier.StatBase[((99))]];
		break;
		case 4:
		bet=Bet4[croupier.StatBase[((99))]];
	}
	maxBet=GetMaxBetForBetType(croupier,croupier.StatBase[((94))]);
	if(bet>maxBet)
	{
		return false;
	}
	if(master.CountItem(GameCurrency[croupier.StatBase[((99))]])>=bet)
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool d_AllMoneyBet(Critter&master,Critter@croupier)
{
	uint money=master.CountItem(GameCurrency[croupier.StatBase[((99))]]);
	if((money<=MaxBet[croupier.StatBase[((99))]])and(money!=0))
	{
		return true;
	}
	else
	{
		return false;
	}
}

void r_NavUse(Critter&master,Critter@croupier,int nav)
{
	DialogAnswerNum[croupier.StatBase[((99))]]=0;
	if(nav==(0))
	{
		DialogAnswerPageIndex[croupier.StatBase[((99))]]--;
	}
	else
	{
		DialogAnswerPageIndex[croupier.StatBase[((99))]]++;
	}
}

void r_SetBet(Critter&master,Critter@croupier,int betType,int coord)
{
	croupier.StatBase[((94))]=betType;
	if(betType==(0))
	{ 
		
		croupier.StatBase[((96))]=coord;           
		
	}
	else
	{
		croupier.StatBase[((96))]=coord;
	}
}

void r_SetBetSize(Critter&master,Critter@croupier,int betSizeNum)
{
	uint8 len=Bets[croupier.StatBase[((99))]].length();
	uint8 len2;
	uint8 coord2=0,coord3=0;
	uint bCoord;
	uint8 cbTemp;
	string sCoords="";
	uint8[]coords;
	uint mBet;
	mBet=GetMaxBetForBetType(croupier,croupier.StatBase[((94))]);
	Bets[croupier.StatBase[((99))]].resize(len+1);
	switch(betSizeNum)
	{
		case(1):
		croupier.StatBase[((95))]=Bet1[croupier.StatBase[((99))]];
		break;
		case(2):
		croupier.StatBase[((95))]=Bet2[croupier.StatBase[((99))]];
		break;
		case(3):
		croupier.StatBase[((95))]=Bet3[croupier.StatBase[((99))]];
		break;
		case(4):
		croupier.StatBase[((95))]=Bet4[croupier.StatBase[((99))]];
		break;
		case(5):
		croupier.StatBase[((95))]=master.CountItem(GameCurrency[croupier.StatBase[((99))]]);
		case(6):
		croupier.StatBase[((95))]=mBet;
		break;
		default:
		break;
	}
	master.DeleteItem(GameCurrency[croupier.StatBase[((99))]],croupier.StatBase[((95))]);
	AllBetSize[croupier.StatBase[((99))]]+=croupier.StatBase[((95))];
	@Bets[croupier.StatBase[((99))]][len]=CBet(croupier.StatBase[((94))],croupier.StatBase[((95))],coords);
	coords.resize(3);
	if(croupier.StatBase[((94))]==(3))
	{
		cbTemp=croupier.StatBase[((96))];
		croupier.StatBase[((96))]=GetCornerCoord(cbTemp,1);
		coord2=GetCornerCoord(cbTemp,2);
	}
	coords[0]=croupier.StatBase[((96))];
	coords[1]=coord2;
	coords[2]=coord3;
	SetCoords(croupier,croupier.StatBase[((94))],coords);
	len2=Bets[croupier.StatBase[((99))]][len].BetCoords.length();
	for(uint8 i=0;i<len2;i++)
	{
		bCoord=Bets[croupier.StatBase[((99))]][len].BetCoords[i];
		if(bCoord<37)
		{
			sCoords+=""+bCoord;
		}
		else
		{
			if(bCoord==(37))
			{
				sCoords+="@msg dlg "+(1000000000+(((95)))*100000+((1)))+"@";
			}
			else
			{
				sCoords+="@msg dlg "+(1000000000+(((95)))*100000+((2)))+"@";
			}
		}
		if(i!=len2-1)
		{
			sCoords+=", ";
		}
	}
	master.SayMsg((11),(1),((1000000000+(((95)))*100000+(12))));
	master.SayMsg((11),(1),((1000000000+(((95)))*100000+(13))),"$result"+sCoords);
	master.SayMsg((11),(1),((1000000000+(((95)))*100000+(11))),"$betsize"+AllBetSize[croupier.StatBase[((99))]]);
}

void r_SetCurBetType(Critter&master,Critter@croupier,int betType)
{
	CurBetType[croupier.StatBase[((99))]]=betType;
	DialogAnswerPageIndex[croupier.StatBase[((99))]]=0;
	DialogAnswerNum[croupier.StatBase[((99))]]=0;
}

void r_StartGame(Critter&master,Critter@croupier)
{
	EndGame(croupier);
}
