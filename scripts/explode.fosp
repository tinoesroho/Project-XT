

import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";
import void QuakeScreen(Map&map)from"effects";                

bool OnUseExplode(Critter&cr,Item&explode,Critter@targetCr,Item@targetItem,Scenery@targetScen,uint timer)
{
	if((@targetCr!=null)||(@targetItem!=null)||(@targetScen!=null))
	return false;
	uint16 pid=explode.GetProtoId();
	if(pid!=(51)&&pid!=(206)&&
	pid!=(85)&&pid!=(209)&&pid!=(222)&&
	pid!=(544)&&pid!=(545))
	return false;
	
	bool isExpert=cr.Perk[(383)]!=0;
	int trapsSkill=cr.Skill[(211)];
	if(trapsSkill<0)
	trapsSkill=0;
	
	if(timer<(1))
	timer=(1);
	if(timer>(599))
	timer=(599);
	timer*=60; 
	
	if(pid==(51))
	{
		Item@activateExpl=cr.AddItem((206),1);
		if(not(@activateExpl!=null))
		return false;
		
		if(not isExpert)
		timer=timer*Random(80,120)/100;
		
		uint numEvent=CreateTimeEvent(__FullSecond+timer,"explode@e_Explode",activateExpl.Id,true);
		(activateExpl.Flags=(activateExpl.Flags)|((0x00020000)));
		activateExpl.Val1=int(numEvent);
		activateExpl.Val2=int(cr.Id);
		activateExpl.TrapValue=((cr.Skill[(211)])/5+10);
		activateExpl.Val3=(trapsSkill);
		activateExpl.Val4=(isExpert?1:0);
		if(cr.Timeout[(240)]<int(timer)+((5)*__TimeMultiplier*60))
		cr.TimeoutBase[(240)]=__FullSecond+timer+((5)*__TimeMultiplier*60);
	}
	
	else if(pid==(85))
	{
		Item@expl=cr.AddItem((209),1);
		if(not(@expl!=null))
		return false;
		Item@explSwitch=cr.AddItem((222),1);
		if(not(@explSwitch!=null))
		return false;
		
		(expl.Flags=(expl.Flags)|((0x00020000)));
		explSwitch.Val1=int(expl.Id);
		expl.Val2=int(cr.Id);
		expl.TrapValue=((cr.Skill[(211)])/5+10);
		expl.Val3=(trapsSkill);
		expl.Val4=(isExpert?1:0);
		
		expl.Info+=2;
		explSwitch.Info+=2;
		expl.SetLexems("$frequency"+expl.Id);
		explSwitch.SetLexems("$frequency"+expl.Id);
		expl.Update();
		explSwitch.Update();
	}
	
	else if(pid==(222))
	{
		Item@expl=GetItem(uint(explode.Val1));
		if((@expl!=null))
		{
			uint16 hexX=0,hexY=0;
			Map@map=expl.GetMapPosition(hexX,hexY);
			Critter@crExpl=(expl.Accessory==(1)?::GetCritter(expl.CritId):null);
			Explode(map,hexX,hexY,crExpl,(209),uint(expl.Val2),(expl.Val3),(expl.Val4));
			DeleteItem(expl);
		}
	}
	
	else if(pid==(544))
	{
		Item@mine=cr.AddItem((545),1);
		if(not(@mine!=null))
		return false;
		
		(mine.Flags=(mine.Flags)|((0x00020000)));
		mine.Val2=int(cr.Id);
		mine.TrapValue=((cr.Skill[(211)])/5+10);
		mine.Val3=(trapsSkill);
		mine.Val4=(isExpert?1:0);
		mine.SetScript("_ExplodeInit");
	}
	
	else if(pid==(206)||pid==(209)||pid==(545))
	{
		if(pid==(206))
		::EraseTimeEvent(uint(explode.Val1));
		
		int chance=cr.Skill[(211)]-(explode.TrapValue-10)*(cr.Id==uint(explode.Val2)?5:10);
		chance=(((chance)>(90))?(90):(((chance)<(5))?(5):(chance)))+cr.Stat[(6)]; 
		
		if(chance>Random(1,100))
		{
			if(pid==(206))
			cr.AddItem((51),1);
			else if(pid==(545))
			cr.AddItem((544),1);
			else if(pid==(209))
			cr.AddItem((85),1);
			cr.StatBase[(76)]+=(50);
		}
		
		else
		{
			Map@map=cr.GetMap();
			Explode(map,cr.HexX,cr.HexY,cr,pid,uint(explode.Val2),(explode.Val3),(explode.Val4));
		}
	}
	
	do{if(explode.GetCount()>(1)) explode.SetCount(explode.GetCount()-(1));else DeleteItem(explode);}while(false);
	return true;
} 

void _ExplodeInit(Item&item,bool firstTime)
{
	if(item.GetProtoId()==(545))
	{
		(item.Flags=(item.Flags)|((0x00020000)));
		item.SetEvent((7),"_MineWalk");
		item.Update();
	}
} 

void _MineWalk(Item&mine,Critter&cr,bool entered,uint8 dir)
{
	if(entered&&cr.Stat[(68)]!=(3)&&(cr.Perk[(397)]==0||Random(0,1)==0))
	{
		CreateTimeEvent(__FullSecond,"e_Explode",mine.Id,false);
	}
} 

uint e_Explode(uint[]@values)
{
	Item@item=GetItem(values[0]);
	if(not(@item!=null))
	return 0;
	
	uint16 explodePid=item.GetProtoId();
	uint ownerId=uint(item.Val2);
	int bonusDamage=(item.Val3);
	int bonusRadius=(item.Val4);
	uint16 hexX=0;
	uint16 hexY=0;
	Map@map=item.GetMapPosition(hexX,hexY);
	DeleteItem(item);
	
	if((@map!=null))
	Explode(map,hexX,hexY,null,explodePid,ownerId,bonusDamage,bonusRadius);
	else if(item.Accessory==(1))
	{
		Critter@cr=::GetCritter(item.CritId);
		if((@cr!=null))
		Explode(null,0,0,cr,explodePid,ownerId,bonusDamage,bonusRadius);
	}
	return 0;
}

void Explode(Map@map,uint16 hexX,uint16 hexY,Critter@cr,uint16 explodePid,uint ownerId,int bonusDamage,int bonusRadius)
{
	uint16 effectPid;
	uint effectRadius;
	uint damage;
	uint damageType;
	uint damageRadius;
	
	switch(explodePid)
	{
		case(206):
		effectPid=(4011);
		effectRadius=1;
		damage=Random(30,50);
		damageType=(7);
		damageRadius=3;
		break;
		case(209):
		effectPid=(4011);
		effectRadius=2;
		damage=Random(40,80);
		damageType=(7);
		damageRadius=3;
		break;
		case(545):
		effectPid=(4011);
		effectRadius=1;
		damage=Random(40,80);
		damageType=(7);
		damageRadius=3;
		break;
		default:
		Log("Invalid explode pid.");
		return;
	}
	
	damage+=bonusDamage;
	if(damage<=0)
	damage=1;
	damageRadius+=bonusRadius;
	if(damageRadius<=0)
	damageRadius=1;
	
	if((@map!=null))
	ExplodeEx(map,hexX,hexY,effectPid,effectRadius,damage,damageType,damageRadius,ownerId);
	else if((@cr!=null))
	InjureCritter(cr,damage,damageType,cr.Dir,ownerId);
}

void ExplodeEx(Map&map,uint16 hexX,uint16 hexY,uint16 effectPid,uint effectRadius,uint damage,uint damageType,uint damageRadius,uint ownerId)
{
	map.RunEffect(effectPid,hexX,hexY,effectRadius);
	map.PlaySound(Random(0,1)==0?"WHN1XXX1.ACM":"WHN1XXX2.ACM");
	QuakeScreen(map);
	
	Critter@[]critters;
	if(map.GetCrittersHex(hexX,hexY,damageRadius,(0x03),critters)==0)
	return;
	for(uint i=0,j=critters.length();i<j;i++)
	{
		Critter@cr=critters[i];
		uint dist=::GetDistantion(hexX,hexY,cr.HexX,cr.HexY);
		int dir=(dist==0?(cr.Dir+3)%6:GetDirection(hexX,hexY,cr.HexX,cr.HexY));
		InjureCritter(cr,damage,damageType,dir,ownerId);
		if(ownerId!=0)
		cr.AddEnemyInStack(ownerId);
	}
}              

void _TimerMineInit(Item&mine,bool firstTime)
{
	if(mine.GetProtoId()==(545))
	{
		mine.SetEvent((7),"_TimerMineWalk");
		mine.SetEvent((4),"_OnSkillTimerMine");
		mine.Val4=(((mine.Val4)>(5))?(5):(((mine.Val4)<(1))?(1):(mine.Val4)));
		(mine.Flags=(mine.Flags)|((0x00020000)));
		mine.Update();
	}
}

void _TimerMineWalk(Item&mine,Critter&cr,bool entered,uint8 dir)
{
	
	if(entered&&cr.Stat[(68)]!=(3)&&(cr.Perk[(397)]==0||Random(0,1)==0))
	{
		CreateTimeEvent(__FullSecond,"e_Explode",mine.Id,false); 
		
		if(mine.Val1>0)
		{
			uint[]values={mine.MapId,mine.HexX,mine.HexY,mine.GetProtoId(),mine.Val1,mine.Val2,mine.TrapValue,mine.Val3,mine.Val4};
			CreateTimeEvent(__FullSecond+mine.Val1*60,"e_RespawnTimerMine",values,true);
		}
	}
}

uint e_RespawnTimerMine(uint[]@values)
{
	if(values.length()<9)
	return 0;
	
	Map@map=GetMap(values[0]);
	if((@map!=null))
	{
		Item@mine=map.AddItem(values[1],values[2],values[3],1);
		if((@mine!=null))
		{
			mine.Val1=values[4];
			mine.Val2=values[5];
			mine.TrapValue=(values[6]==0?Random(30,50):values[6]);
			mine.Val3=values[7];
			mine.Val4=(((values[8])>(5))?(5):(((values[8])<(1))?(1):(values[8])));
			mine.Update();
			mine.SetScript("_TimerMineInit");
		}
	}
	
	return 0;
}

bool _OnSkillTimerMine(Item&mine,Critter&cr,int skill)
{
	uint16 pid=mine.GetProtoId();
	if(pid!=(545))
	return false;
	
	bool isExpert=cr.Perk[(383)]!=0;
	int trapsSkill=cr.Skill[(211)];
	if(trapsSkill<0)
	trapsSkill=0;
	
	int chance=cr.Skill[(211)]-(mine.TrapValue-10)*(cr.Id==uint(mine.Val2)?5:10);
	chance=(((chance)>(90))?(90):(((chance)<(5))?(5):(chance)))+cr.Stat[(6)]; 
	
	if(chance>Random(1,100))
	{
		cr.StatBase[(76)]+=(50);
	}
	
	else
	{
		Map@map=cr.GetMap();
		Explode(map,cr.HexX,cr.HexY,cr,pid,uint(mine.Val2),(mine.Val3),(mine.Val4));
	}
	
	if(mine.Val1>0)
	{
		uint[]values={mine.MapId,mine.HexX,mine.HexY,mine.GetProtoId(),mine.Val1,mine.Val2,mine.TrapValue,mine.Val3,mine.Val4};
		CreateTimeEvent(__FullSecond+mine.Val1*60+Random(120,240)*60,"e_RespawnTimerMine",values,true);
	}
	
	do{if(mine.GetCount()>(1)) mine.SetCount(mine.GetCount()-(1));else DeleteItem(mine);}while(false);
	return true;
}
