

class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
}

Entire@GetEntire(Map&map,int entireNum,int skip)
{
	Entire ent;
	if(map.GetEntireCoords(entireNum,skip,ent.HexX,ent.HexY)==false)
	return null;
	ent.Number=entireNum;
	return ent;
}

uint ParseEntires(Map&map,Entire[]&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	Entire[]entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                  

bool IsCritterInDeadZone(Critter&cr,Map&map,uint8 dir,uint8 hexFirst,uint8 hexEnd)
{
	uint crossNum=0;
	for(uint i=hexFirst;i<=hexEnd;i++)
	{
		if(BeamCrossing2Section(map,i,(i==hexEnd?hexFirst:i+1),cr.HexX,cr.HexY,dir))
		{
			crossNum++;
			
		}
	}
	bool inZone=false;
	if(crossNum>0&&(crossNum%2==1))
	inZone=true;
	
	return inZone;
	
}         

bool BeamCrossing2Section(Map&map,uint8 hexNum1,uint8 hexNum2,uint16 beamX,uint16 beamY,uint8 dir)
{
	
	uint16 hx0=beamX;
	uint16 beamX2=hx0;
	uint16 hy0=beamY;
	uint16 beamY2=hy0;
	uint steps=0;
	
	while(hx0!=beamX2||hy0!=beamY2||steps==0)
	{
		steps+=1;
		hx0=beamX2;
		hy0=beamY2;
		map.MoveHexByDir(beamX2,beamY2,dir,steps);
	} 
	
	uint16 hx1=0;
	uint16 hx2=0;
	uint16 hy1=0;
	uint16 hy2=0;
	
	if(!map.GetEntireCoords(hexNum1,0,hx1,hy1))
	return false;
	if(!map.GetEntireCoords(hexNum2,0,hx2,hy2))
	return false;                           
	
	float z=(int(hx1)-int(hx2))*(int(beamY2)-int(beamY))-(int(hy1)-int(hy2))*(int(beamX2)-int(beamX));
	
	float ch=(int(hx1)-int(beamX))*(int(beamY2)-int(beamY))-(int(hy1)-int(beamY))*(int(beamX2)-int(beamX));
	
	float cbeam=(int(hx1)-int(hx2))*(int(hy1)-int(beamY))-(int(hy1)-int(hy2))*(int(hx1)-int(beamX));
	
	if(z==0&&ch==0&&cbeam==0)
	return false;
	
	if(z==0)
	return false;
	
	float crossS=ch/z;
	
	float crossB=cbeam/z;
	return(0<crossS&&crossS<1&&0<crossB&&crossB<1);
}   

