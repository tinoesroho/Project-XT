

const uint16[]Pids_AllWeapon={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332),(11),(400),(13),(12),(389),(395),(350),(355),(387),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486),(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116),(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSmallGuns={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponPistols={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394)};
const uint16[]Pids_WeaponRifles={(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392)};
const uint16[]Pids_WeaponShotguns={(94),(385),(242),(268),(354)};
const uint16[]Pids_WeaponPistolMachineGun={(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponBigGuns={(11),(400),(13),(12),(389),(395),(350),(355),(387)};
const uint16[]Pids_WeaponEnergo={(16),(402),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397)};
const uint16[]Pids_WeaponLaser={(16),(402),(118),(401),(28),(120)};
const uint16[]Pids_WeaponPlasma={(24),(406),(15),(233)};
const uint16[]Pids_WeaponPulse={(396),(397)};
const uint16[]Pids_WeaponThrowing={(159),(25),(26),(27),(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponGrenade={(159),(25),(26),(27)};
const uint16[]Pids_WeaponThrowingOther={(79),(205),(365),(45),(19),(423),(426),(486)};
const uint16[]Pids_WeaponMelee={(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116)};
const uint16[]Pids_WeaponCutting={(4),(236),(517),(383),(319),(522)};
const uint16[]Pids_WeaponPricking={(7),(280),(320)};
const uint16[]Pids_WeaponShock={(5),(20),(384),(6),(386),(115)};
const uint16[]Pids_WeaponElectric={(160),(399),(116)};
const uint16[]Pids_WeaponUnarmed={(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSpecial={(270),(393),(371),(372),(427),(489),(498),(290),(291),(518),(520),(530),(531),(421),(390)};

const uint16[]Pids_AllArmor={(74),(1),(379),(265),(2),(380),(240),(17),(381),(239),(3),(232),(348),(349),(113),(524)};
const uint16[]Pids_ArmorLight={(74),(1),(379),(265)};
const uint16[]Pids_ArmorMedium={(2),(380),(240),(17),(381),(239)};
const uint16[]Pids_ArmorHeavy={(3),(232),(348),(349)};
const uint16[]Pids_ArmorRobes={(113)};
const uint16[]Pids_ArmorSpecial={(524)};

const uint16[]Pids_AllAmmo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358),(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_Ammo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358)};
const uint16[]Pids_AmmoOther={(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_AmmoSpecial={(274)};

const uint16[]Pids_AllDrugs={(40),(48),(49),(109),(144),(260),(273),(525),(106),(124),(125),(310),(311),(469),(53),(87),(110),(259),(71),(81),(103),(378),(424)};
const uint16[]Pids_DrugsPreparations={(40),(48),(49),(109),(144),(260),(273),(525)};
const uint16[]Pids_DrugsAlcohol={(106),(124),(125),(310),(311),(469)};
const uint16[]Pids_Drugs={(53),(87),(110),(259)};
const uint16[]Pids_DrugsOther={(71),(81),(103),(378)};
const uint16[]Pids_DrugsSpecial={(334),(473),(480),(481),(482),(424)};

const uint16[]Pids_MiscExplosions={(51),(85),(544)};
const uint16[]Pids_MiscActiveExplosions={(206),(209),(545),(222)};
const uint16[]Pids_MiscPartsBasic={(98),(92),(127),(271),(272),(276),(277),(278),(284),(285),(286),(318),(416),(542),(532),(534),(475),(535),(536),(537),(538),(50),(449),(539),(541)};
const uint16[]Pids_MiscPartsSelfSpecial={(89),(222),(229),(307),(419),(454),(364),(422),(479),(488)};
const uint16[]Pids_MiscPartsSpecial={(55),(253),(254),(258),(269),(356),(377)};
const uint16[]Pids_MiscPartsBody={(114),(251),(281),(282),(321),(322),(323),(324),(429),(484),(485),(507)};
const uint16[]Pids_MiscAllTools={(75),(77),(84),(308),(410),(411),(412),(47),(91),(408),(409),(428),(440),(289),(297),(543)};
const uint16[]Pids_MiscToolsTech={(75),(77),(84),(308),(410),(411),(412)};
const uint16[]Pids_MiscToolsMediacal={(47),(91),(408),(409),(428),(440)};
const uint16[]Pids_MiscToolsOther={(289),(297),(543)};
const uint16[]Pids_MiscToolsSpecial={(52),(54),(59)};
const uint16[]Pids_MiscOther={(101),(117),(126),(226),(227),(262),(295),(314),(315),(316),(317),(325),(326),(436),(437)};              

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}  

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import void ActivateMobScript(Map&map)from"mob";                            

uint[]GlobalGroupsIds;
uint GlobalMapId;
int GlobalWanMax;
int GlobalWanCount;
int GlobalWanSpawn;
int GlobalHumanCount;
int GlobalWanCountLow;

void SetQuestState(Critter&player,int Status)
{
	GameVar@quest=GetLocalVar((5387),player.Id);
	if((@quest!=null))
	quest=Status;
}

int GetQuestState(Critter&player)
{
	GameVar@quest=GetLocalVar((5387),player.Id);
	if(not(@quest!=null))
	return 0;
	return quest.GetValue();
} 

void DL(string@s)
{ 
	
}                          

void DeleteWanMap()
{
	DL("Delete Wanamingo Location started");
	
	GameVar@game_map=GetGlobalVar((162));
	if((@game_map!=null))
	{
		if(game_map.GetValue()!=0)
		{
			Location@loc=GetLocation(game_map.GetValue());
			if(not(@loc!=null))
			{
				game_map=0;
				DL("Invalid Wanamingo location");
			}
			else
			{
				
				for(uint i=0;i<GlobalGroupsIds.length();i++)
				{
					Critter@player=GetCritter(GlobalGroupsIds[i]);
					if(!(@player!=null))
					{
						continue;
					}
					Map@player_map=player.GetMap();
					if((@player_map!=null))
					{
						Location@player_loc=player_map.GetLocation();
						if(!(@player_loc!=null))
						{
							continue;
						}
						if(player_loc.GetProtoId()==loc.GetProtoId())
						{ 
							
							player.Say((11),"Вы услышали далекий шум, который нарастал и приближался. Задрожали стены пещеры, и с потолка посыпались камни. Только чудом вам удалось выбраться из пещеры Ванаминго.");
							player.TransitToGlobal(false);
						}
					}
					
					if(player.IsKnownLoc(true,loc.Id))
					{
						player.UnsetKnownLoc(true,loc.Id);
						DL("Player id "+player.Id+"UnsetKnownLoc");
					}
				}
				
				DeleteLocation(loc.Id);
				game_map=0;
			}
		}
	} 
	
	GlobalGroupsIds.resize(0);
	GlobalMapId=0;
	GlobalWanMax=0;
	GlobalWanCount=0;
	GlobalWanSpawn=0;
	GlobalHumanCount=0;
	GlobalWanCountLow=0;
	GameVar@game_time=GetGlobalVar((163));
	if((@game_time!=null))
	{
		game_time=0;
	}
	DL("Delete Wanamingo Location Succesfull"); 
	
} 

uint GetCrittersByRole(Map&map,uint x,uint y,uint radius,int role,Critter@[]@critters)
{
	Critter@[]cTmp;
	uint count=map.GetCrittersHex(x,y,radius,(0x01)|(0x20),cTmp);
	for(uint i=0;i<count;i++)
	if(cTmp[i].Stat[(89)]==role)
	critters.insertLast(cTmp[i]);
	return critters.length();
}                                                                                                                                   

Location@_GetNewWanLoc(Critter@[]grp)
{
	
	int x,y;
	x=-1;
	y=1;
	uint locId=CreateLocation(
	(202),
	(13*__GlobalMapZoneLength-__GlobalMapZoneLength/2)+x*__GlobalMapZoneLength+Random(-(__GlobalMapZoneLength/2),(__GlobalMapZoneLength/2)),
	(10*__GlobalMapZoneLength-__GlobalMapZoneLength/2)+y*__GlobalMapZoneLength+Random(-(__GlobalMapZoneLength/2),(__GlobalMapZoneLength/2)),
	grp);
	if(locId==0)
	{
		DL("Wan Location create fail 1. ERROR:"+GetLastError());
		return null;
	}
	
	Location@loc=GetLocation(locId);
	if(!(@loc!=null))
	{
		DL("Wan Location create fail 2. ERROR:"+GetLastError());
		return null;
	}
	
	loc.Visible=false;
	loc.AutoGarbage=false;
	loc.Radius=8;
	
	return loc;
}

void r_GotoHunter(Critter&player,Critter@npc,int val)
{
	
	if(!_TimeOutIsFree())
	{
		
		DL("Wanamingo quest: TIMEOUT is not free ");
		return;
	} 
	
	DeleteWanMap();
	
	Critter@[]groups;
	groups.insertLast(@player);
	Critter@[]realGrp;
	player.GetFollowGroup((0x0F),realGrp);
	for(uint i=0,l=realGrp.length();i<l;i++)
	{
		if(GetQuestState(realGrp[i])==0)
		{
			groups.insertLast(@realGrp[i]);
		}
	} 
	
	for(uint i=0;i<groups.length();i++)
	{
		if(GetQuestState(groups[i])==0)
		{
			SetQuestState(groups[i],1);
		}
	}   
	
	GameVar@game_map=GetGlobalVar((162));
	GameVar@game_time=GetGlobalVar((163));
	
	game_time=__FullSecond+(60*60*24);
	
	Location@loc=_GetNewWanLoc(groups);
	
	if(not(@loc!=null))
	return;
	GlobalMapId=loc.Id;
	
	game_map=GlobalMapId;
	
	Map@map=loc.GetMapByIndex(0);
	map.SetScript("redd_q_wanamingo@_WanMapInit");
	
	if(CreateTimeEvent(game_time.GetValue(),"e_TimeExpired",0,false)==0)
	{
		DL("Time event create fail, "+GetLastError());
	}
	
	uint16 x=0,y=0;
	int c;
	
	map.GetEntireCoords(1,0,x,y);
	
	Critter@[]critters;
	
	c=GetCrittersByRole(map,x,y,20,(13),critters);
	
	for(uint i=0;i<critters.length();i++)
	{
		critters[i].ToDead((110),null);
		critters[i].StatBase[(84)]=60*24*365;
	}
	critters.resize(0);
	c=GetCrittersByRole(map,x,y,20,(5),critters);
	
	for(uint i=0;i<critters.length();i++)
	critters[i].StatBase[(104)]=(5060);
	critters.resize(0);
	
	c=GetCrittersByRole(map,x,y,20,1,critters);
	
	GlobalWanCountLow=c;
	
	for(uint i=0;i<critters.length();i++)
	critters[i].SetEvent((2),"wan_dead_low");
	
	int wan;
	wan=groups.length()*5;
	wan=(((wan)>(64))?(64):(((wan)<(16))?(16):(wan))); 
	
	GlobalWanCount=wan;
	GlobalWanMax=wan;
	GlobalWanSpawn=wan;
	GlobalHumanCount=0;
	GlobalGroupsIds.resize(groups.length());
	for(uint i=0,j=groups.length();i<j;i++)
	GlobalGroupsIds[i]=groups[i].Id;
	
	DL("Quest started successful. Location added");
} 

void _WanMapInit(Map&map,bool firstTime)
{
	DL("Begin Wan Map init");
	
	ActivateMobScript(map);
	
	map.SetEvent((6),"map_incoming_r17");
	map.SetEvent((7),"map_leave_r17"); 
	
	DL("Wan Map init success");
}

uint e_TimeExpired(uint[]@values)
{
	DeleteWanMap();
	return 0;
}   

Critter@SpawnWan(Map&map,uint8 EntSpawn,uint8 level)
{
	uint16 x=0,y=0;
	if(not map.GetEntireCoords(EntSpawn,0,x,y))
	{
		Log("ERROR GetEntireCoords "+EntSpawn);
		return null;
	}
	
	int[]params={(104),(5052),(107),(1),(106),(24),(84),-1,(77),level};
	Critter@cr=map.AddNpc((243),x,y,Random(0,5),params,null,"mob@_MobInit");
	if((@cr!=null))
	{
		
		cr.SetEvent((2),"wan_dead");
	}
	if(not(@cr!=null))
	{
		Log("Critter creation error");
		return null;
	}
	return cr;
} 

bool SpawnWan2()
{
	
	GameVar@game_map=GetGlobalVar((162));
	Location@loc=GetLocation(game_map.GetValue());
	if(not(@loc!=null))
	return false;
	Map@map=loc.GetMapByIndex(0);
	if(not(@map!=null))
	return false;
	for(int i=1;i<=5;i++)
	{
		Critter@globalCr=GetCritter(GlobalGroupsIds[Random(0,GlobalGroupsIds.length()-1)]);
		if(not(@globalCr!=null))
		continue;
		Critter@cr=SpawnWan(map,i+10,(((globalCr.Stat[(77)])>(20))?(20):(((globalCr.Stat[(77)])<(10))?(10):(globalCr.Stat[(77)]))));
		if(not(@cr!=null))
		continue;
		uint16 x=0,y=0;
		bool r=map.GetEntireCoords(i+20,0,x,y);
		if(not r)
		continue;
		cr.SetHomePos(x,y,Random(0,5));
		AddWalkPlane(cr,(50)+20,x,y,Random(0,5),false,0);
		AddAttackPlane(cr,(50)+10,globalCr);
		GlobalWanSpawn--; 
		
		for(uint i2=0;i2<GlobalGroupsIds.length();i2++)
		cr.AddEnemyInStack(GlobalGroupsIds[i2]);
	}
	return true;
} 

uint e_Spawn(uint[]@values)
{
	if(not SpawnWan2())
	return 0;
	if(GlobalWanSpawn<=0)
	return 0;
	else
	return 5*60;
} 

uint e_Alert(uint[]@values)
{
	for(uint i=0;i<GlobalGroupsIds.length();i++)
	{
		Critter@cr=GetCritter(GlobalGroupsIds[i]);
		if((@cr!=null))
		cr.Say((11),"Вы слышите шорох...");
	}
	return 0;
} 

uint e_Alert2(uint[]@values)
{
	for(uint i=0;i<GlobalGroupsIds.length();i++)
	{
		Critter@cr=GetCritter(GlobalGroupsIds[i]);
		if((@cr!=null))
		cr.Say((11),"Кажется у вас проблемы!");
	}
	return 0;
} 

void BeginSpawn()
{
	if(CreateTimeEvent(__FullSecond+3*60,"e_Spawn",false)==0)
	Log("Time event create fail, "+GetLastError());
	if(CreateTimeEvent(__FullSecond+1*60,"e_Alert",false)==0)
	Log("Time event create fail, "+GetLastError());
	if(CreateTimeEvent(__FullSecond+5*60,"e_Alert2",false)==0)
	Log("Time event create fail, "+GetLastError());
}         

int GetExpa(Critter&player)
{
	int kls=player.StatBase[(91)];
	int aid=player.StatBase[(92)];
	if(kls==0 and aid==0)
	return 0;
	int expa=500;
	if(kls>=10 or aid>=2)
	expa+=1500;
	return expa;
} 

void QuestCompleteNotify(Critter&player)
{
	if(GetQuestState(player)==2)
	{
		SetQuestState(player,3);    
		
		player.StatBase[(76)]+=GetExpa(player);
	}
	else if(GetQuestState(player)==1)
	SetQuestState(player,5);
	else
	SetQuestState(player,0);
}    

void map_leave(Map&map,Critter&player)
{
	DL("Map leave begin");
	if(player.IsPlayer())
	{
		GlobalHumanCount--;
		DL("GlobalHuman "+GlobalHumanCount);
		if(GlobalHumanCount==0)
		DeleteWanMap();
		
		remove_events(player);
		DL("Player events has been removed");   
		
		if(not player.IsDead())
		{
			if(GlobalWanCount>0)
			{
				if(GetQuestState(player)==2)
				{
					SetQuestState(player,6);
				}
			}
		}
		player.StatBase[(91)]=0;
		player.StatBase[(92)]=0;
	}
	DL("Map leave end");
}

void map_leave_r17(Map&map,Critter&player)
{
	if(player.IsPlayer())
	{   
		
		GlobalHumanCount--;
		
		Location@loc=map.GetLocation();
		
		if(!(@loc!=null))
		{
			DL("Wan Loc can't find error");
			return;
		}
		if(player.IsKnownLoc(true,loc.Id))
		{
			player.UnsetKnownLoc(true,loc.Id);
			DL("Player id "+player.Id+" UnsetKnownLoc succsess ");
		}
		
		remove_events(player);  
		
		if(!player.IsDead())
		{
			if(GlobalWanCount>0)
			{
				if(GetQuestState(player)==2)
				{
					SetQuestState(player,6);
				}
			}
		}
		
	}
	
	DL("Player has left wan map. Player ID "+player.Id);
	
	if(_MapHasPlayers(map))
	{
		DeleteWanMap();
	}
}
void map_incoming_r17(Map&map,Critter&player)
{
	if(not map.IsTurnBased()&&map.IsTurnBasedAvailability())
	map.BeginTurnBased(player);
	
	Location@loc=map.GetLocation();
	if((@loc!=null))
	{
		
		loc.AutoGarbage=true;
	}
	
	if(player.IsPlayer())
	{
		
		SetQuestState(player,2);
		GlobalHumanCount++;
		
		remove_events(player);
		
		player.SetEvent((21),"player_doctor");
		player.SetEvent((2),"player_dead_r_17");   
		
	}
} 

void player_dead_r_17(Critter&player,Critter@killer)
{
	SetQuestState(player,4);
	if(player.StatBase[(91)]*2>GlobalWanMax)
	{
		player.StatBase[(76)]+=5000;
	}
	else
	{
		player.StatBase[(76)]+=500;
	}
	remove_events(player);
}
bool _MapHasPlayers(Map&map)
{
	for(uint i=0;i<GlobalGroupsIds.length();i++)
	{
		Critter@cr=GetCritter(GlobalGroupsIds[i]);
		if((@cr!=null))
		{
			if((@map.GetCritter(cr.Id)!=null))
			{
				return true;
			}
		}
	}
	return false;
}

void map_deleting_r17(Map&map,bool deleted)
{
	DL("Map finish started");
	Location@loc=map.GetLocation();
	for(uint i=0;i<GlobalGroupsIds.length();i++)
	{
		Critter@cr=GetCritter(GlobalGroupsIds[i]);
		if((@cr!=null))
		cr.UnsetKnownLoc(true,loc.Id);
	} 
	
	GameVar@mapid=GetGlobalVar((162));
	mapid=0;
	DL("Map finish ended");
}  

void map_incoming(Map&map,Critter&player)
{
	
	if(not map.IsTurnBased()&&map.IsTurnBasedAvailability())
	map.BeginTurnBased(player);
	
	if(player.IsPlayer())
	{
		if(GlobalHumanCount>0)
		{
			Location@loc=GetLocation(map.Id);
			
		}
		
		SetQuestState(player,2);
		GlobalHumanCount++;
		player.StatBase[(91)]=0;
		player.StatBase[(92)]=0;
		player.SetEvent((21),"player_doctor");
		player.SetEvent((2),"player_dead");   
		
	}
} 

void remove_events(Critter&player)
{
	player.SetEvent((21),"");
	player.SetEvent((2),"");
	player.StatBase[(91)]=0;
	player.StatBase[(92)]=0;
} 

void player_dead(Critter&player,Critter@killer)
{
	remove_events(player);
	SetQuestState(player,4);
	if(player.StatBase[(91)]>GlobalWanMax/2)
	{
		player.StatBase[(76)]+=5000;
	}
	else
	{
		player.StatBase[(76)]+=500;
	}
	player.StatBase[(91)]=0;
	player.StatBase[(92)]=0;
} 

void map_deleting(Map&map,bool deleted)
{
	Location@loc=map.GetLocation();
	for(uint i=0;i<GlobalGroupsIds.length();i++)
	{
		Critter@cr=GetCritter(GlobalGroupsIds[i]);
		if((@cr!=null))
		cr.UnsetKnownLoc(true,loc.Id);
	}
	
	GameVar@mapid=GetGlobalVar((162));
	mapid=0;
}

bool player_doctor(Critter&crit,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	
	if(skill==(206))
	if((@onCritter!=null))
	if(onCritter.IsPlayer())
	if(crit.Id!=onCritter.Id)
	if(crit.Timeout[(230)]<=0)
	crit.StatBase[(92)]++;
	
	return false;
} 

void wan_dead_low(Critter&crit,Critter@killer)
{
	GlobalWanCountLow--;
	
	if(GlobalWanCountLow<=0)
	BeginSpawn();
}

void wan_dead(Critter&crit,Critter@killer)
{
	if(killer.IsPlayer())
	killer.StatBase[(91)]++;
	GlobalWanCount--;
	
	if(GlobalWanCount==0)
	{ 
		
		for(uint i=0;i<GlobalGroupsIds.length();i++)
		{
			Critter@cr=GetCritter(GlobalGroupsIds[i]);
			if((@cr!=null))
			QuestCompleteNotify(cr);
		}
		
		GameVar@mapid=GetGlobalVar((162));
		if((@mapid!=null)&&mapid.GetValue()!=0)
		{
			Location@loc=GetLocation(mapid.GetValue());
			loc.AutoGarbage=true;
			mapid=0;
		}
	}
}   

bool _TimeOutIsFree()
{
	GameVar@game_time=GetGlobalVar((163));
	if(!(@game_time!=null))
	{
		DL("ошибка: не найдена переменная GVAR_redd_marion_wan_timeout");
		return false;
	}
	
	if(game_time.GetValue()==0)
	{
		return true;
	}
	
	if(__FullSecond>=uint(game_time.GetValue()))
	{
		DL("Время на квест истекло");
		return true;
	}
	else
	{
		return false;
	}
}

bool _QuestAlreadyRun()
{
	return GlobalMapId!=0;
} 

bool d_CheckQAccess(Critter&player,Critter@npc)
{  
	
	if(!_QuestAlreadyRun())
	return true;
	
	return(_TimeOutIsFree());
	
}  

