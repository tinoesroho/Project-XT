

shared class Serializator
{
	uint8[]Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
	
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer(uint size)
	{
		if(size<=BufSize)
		return;
		if(BufSize==0)
		BufSize=1;
		while(size>BufSize)
		BufSize*=2;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		
		bool result=SetAnyData(name,Array,DataSize);    
		
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		
		if(not GetAnyData(name,Array))
		return false;    
		
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator&SetCurPos(uint pos)
	{
		GrowBuffer(pos);
		CurPos=pos;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Fill(uint8 value,uint length)
	{
		GrowBuffer(CurPos+length);
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string&value)
	{
		uint len=value.rawLength();
		GrowBuffer(CurPos+len+1);
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Set(const Critter&cr)
	{
		GrowBuffer(CurPos+4);
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const Item&item)
	{
		GrowBuffer(CurPos+4);
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator&Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator&Get(int64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(bool[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(string[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	} 
	
	Serializator&Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator&Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
};             

class GameEventOccurCondition
{
	uint GameEventIndex;
	uint Status;
}

class GameEvent
{
	uint AnyDataIndex;
	uint Status;
	GameEventOccurCondition[]OccurConditions;
	string HandlerFunction;
	uint TimeOccur;
	bool TimeIsAbsolute;
	bool FirstEventNoConditions;
	uint RunningEventId;
	uint NextEventIndex;
	uint ServerTime;
	
	GameEvent()
	{}
	
	GameEvent(uint idx)
	{
		this.AnyDataIndex=idx;
		this.Load();
	}
	
	void AddCondition(uint eventIndex,uint status)
	{
		for(uint i=0,l=this.OccurConditions.length();i<l;i++)
		if(this.OccurConditions[i].GameEventIndex==eventIndex&&this.OccurConditions[i].Status==status)
		return;
		GameEventOccurCondition condition;
		condition.GameEventIndex=eventIndex;
		condition.Status=status;
		this.OccurConditions.insertLast(condition);
	}
	
	void Save()
	{
		Serializator save;
		save.Set(this.AnyDataIndex);
		save.Set(this.Status);
		save.Set(this.HandlerFunction);
		save.Set(this.ServerTime);
		uint len=this.OccurConditions.length();
		save.Set(len*2);
		for(uint i=0;i<len;i++)
		{
			save.Set(this.OccurConditions[i].GameEventIndex);
			save.Set(this.OccurConditions[i].Status);
		}
		save.Set(this.TimeOccur);
		save.Set(this.TimeIsAbsolute);
		save.Set(this.FirstEventNoConditions);
		save.Set(this.RunningEventId);
		save.Set(this.NextEventIndex);
		save.Save(("GE_"+this.AnyDataIndex));
	}
	
	void Load()
	{
		Serializator load;
		uint eId=0;
		uint status=0;
		if(load.Load(("GE_"+this.AnyDataIndex)))
		{
			load.Get(AnyDataIndex);
			load.Get(Status);
			load.Get(this.HandlerFunction);
			load.Get(this.ServerTime);
			uint len=0;
			load.Get(len);
			for(uint i=0;i<len;i++)
			{
				load.Get(eId);
				load.Get(status);
				i++;
				this.AddCondition(eId,status);
			}
			load.Get(this.TimeOccur);
			load.Get(this.TimeIsAbsolute);
			load.Get(this.FirstEventNoConditions);
			load.Get(this.RunningEventId);
			load.Get(this.NextEventIndex);
		}
	}
	
	string ToString()
	{
		return"AnyDataIndex: "+AnyDataIndex+";Status: "+Status+";HandlerFunction: "+
		HandlerFunction+";TimeOccur: "+TimeOccur+";TimeIsAbsolute: "+(TimeIsAbsolute?"yes":"no")+
		";FirstEventNoConditions: "+(FirstEventNoConditions?"YES":"NO")+";RunningEventId: "+RunningEventId;
	}
	
	void Run()
	{
		uint time=TimeIsAbsolute?TimeOccur:__FullSecond+TimeOccur;
		Run(time);
	}
	
	void Run(uint time)
	{
		this.ServerTime=time;
		if(TimeOccur>0 and time<__FullSecond)
		{
			Log("Cannot run event (id="+this.AnyDataIndex+"). Time is lost:"+time);
			return;
		}
		this.RunningEventId=CreateTimeEvent(time,"e_GameEvent",this.AnyDataIndex,true);
		;
		;
		this.Status=(1);
		this.Save();
	}
	
	void Stop()
	{
		if(this.Status!=(1))
		{
			return;
		}
		if(this.RunningEventId>0)
		EraseTimeEvent(this.RunningEventId);
		this.RunningEventId=0;
		this.Status=(3);
		this.Save();
	}
}

class GameEventManager
{
	
	uint[]GameEventsIndexes;
	
	void Save()
	{
		Serializator save;
		save.Set(this.GameEventsIndexes);
		save.Save(("GE_Manager"));
	}
	
	void Load()
	{
		Serializator load;
		if(load.Load(("GE_Manager")))
		{
			this.GameEventsIndexes.resize(0);
			load.Get(GameEventsIndexes);
		}
	}
	
	GameEvent@GetGameEventByIndex(uint index)
	{
		GameEvent@event=GameEvent(index);
		if((@event!=null))
		{
			event.Load();
			return event;
		}
		return null;
	} 
	
	void CheckEventsCanOccure()
	{
		for(uint i=0,l=this.GameEventsIndexes.length();i<l;i++)
		{
			GameEvent@event=GetGameEventByIndex(this.GameEventsIndexes[i]);
			if((@event!=null)&&CanOccure(event))
			event.Run();
		}
	}
	
	bool CanOccure(GameEvent@event)
	{
		if((@event!=null))
		{
			if(event.Status==(1))
			return false;
			if(event.FirstEventNoConditions&&event.Status==(0))
			{
				;
				return true;
			}
			if(event.OccurConditions.length()==0)
			return false;
			for(uint j=0,k=event.OccurConditions.length();j<k;j++)
			{
				GameEvent@condition=this.GetGameEventByIndex(event.OccurConditions[j].GameEventIndex);
				;
				if(!(@condition!=null)||condition.Status!=event.OccurConditions[j].Status)
				{
					
					return false;
				}
			}
			
			return true;
		}
		return false;
	}
	
	void RunEvent(uint idx,uint time)
	{
		GameEvent@event=this.GetGameEventByIndex(idx);
		if((@event!=null))
		{
			event.Run(time);
		}
	}
	
	void RunEvent(uint idx)
	{
		GameEvent@event=this.GetGameEventByIndex(idx);
		if((@event!=null))
		{
			event.Run();
		}
	}
	
	void StopEvent(uint idx)
	{
		GameEvent@event=this.GetGameEventByIndex(idx);
		if((@event!=null))
		{
			event.Stop();
			CheckEventsCanOccure();
		}
	}
}

uint e_GameEvent(uint[]@values)
{
	;
	uint key=values[0];
	GameEventManager mng=GameEventManager();
	mng.Load();
	GameEvent@event=mng.GetGameEventByIndex(key);
	;
	if((@event!=null)&&event.Status==(1))
	{
		event.Status=(2);
		event.Save();
		GameEvent@nextEvent;
		if(event.NextEventIndex>0)
		{
			@nextEvent=mng.GetGameEventByIndex(event.NextEventIndex);
			if((@nextEvent!=null)&&mng.CanOccure(nextEvent))
			nextEvent.Run();
		}
		else
		{
			mng.CheckEventsCanOccure();
		}
		CreateTimeEvent(0,event.HandlerFunction,false);
		if(event.NextEventIndex==event.AnyDataIndex&&(@nextEvent!=null))
		{
			event.Status=(1);
		}
		else
		{
			event.Status=(3);
		}
		event.Save();
	}
	mng.Save();
	return 0;
}

void DeclareEvents()
{                         
	
	DeclareEvent((1),"game_event_racing@e_RunPreparePhase",(4*30*24*60*60),false,true,(2));
	DeclareCondition((1),(4),(2));
	DeclareEvent((2),"game_event_racing@e_RunBeginPhase",((7*24*60*60)*2),false,false,0);
	DeclareCondition((2),(1),(2));
	DeclareEvent((3),"game_event_racing@e_RunRacingPhase",(1*24*60*60),false,false,(4));
	DeclareEvent((4),"game_event_racing@e_RunStopPhase",(1*24*60*60),false,false,(1));
	DeclareCondition((4),(3),(2));
	DeclareEvent((5),"game_event_storehouse@e_CreateStoreHouse",(1*30*24*60*60),false,true,(5));
	DeclareCondition((5),(5),(2));
	DeclareEvent((6),"game_event_caches@e_StatusOn",(7*24*60*60),false,true,(6));
	DeclareCondition((6),(6),(2));
	DeclareEvent((7),"purgatory@e_RunPreparationStage",(1*30*24*60*60),false,true,(8));
	DeclareCondition((7),(10),(2));
	DeclareEvent((8),"purgatory@e_RunBeginStage",(1*24*60*60),false,false,(9));
	DeclareCondition((8),(7),(2));
	DeclareEvent((9),"purgatory@e_RunFightStage",((5)*__TimeMultiplier*60),false,false,(10));
	DeclareCondition((9),(8),(2));
	DeclareEvent((10),"purgatory@e_RunEndStage",(2*24*60*60),false,false,(7));
	DeclareCondition((10),(9),(2));
	DeclareEvent((11),"game_event_replicator@e_BeginEvent",(5*30*24*60*60),false,true,0);
	DeclareCondition((11),(12),(2));
	DeclareEvent((12),"game_event_replicator@e_StopEvent",(1*30*24*60*60),false,false,(11));
	
}

void DeclareCondition(uint idx,uint eventCondition,uint status)
{
	GameEventManager mng;
	mng.Load();
	GameEvent@event=mng.GetGameEventByIndex(idx);
	if((@event!=null))
	{
		event.AddCondition(eventCondition,status);
		event.Save();
	}
}

void DeclareEvent(uint idx,string handler,uint timeOccure,bool timeAbsolute,bool defaultStart,uint nextEventIdx)
{
	GameEventManager mng;
	mng.Load();
	if(mng.GameEventsIndexes.find(idx)>=0)
	{
		return;
	}
	GameEvent event=GameEvent();
	event.AnyDataIndex=idx;
	event.Status=(0);
	event.HandlerFunction=handler;
	event.TimeOccur=timeOccure;
	event.TimeIsAbsolute=timeAbsolute;
	event.FirstEventNoConditions=defaultStart;
	event.NextEventIndex=nextEventIdx;
	mng.GameEventsIndexes.insertLast(idx);
	event.Save();
	mng.Save();
}

bool CheckEventStatus(uint idx,uint status)
{
	GameEventManager mng;
	mng.Load();
	GameEvent@event=mng.GetGameEventByIndex(idx);
	if((@event!=null)&&event.Status==status)
	return true;
	return false;
}

uint GetEventOccurenceTime(uint idx)
{
	GameEventManager mng;
	mng.Load();
	GameEvent@event=mng.GetGameEventByIndex(idx);
	if((@event!=null)&&event.Status==(1))
	return event.ServerTime;
	return 0;
}

void CheckAllGameEvents()
{
	GameEventManager mng;
	mng.Load();
	mng.CheckEventsCanOccure();
}

void RunGameEvent(uint idx,uint time)
{
	GameEventManager mng;
	mng.Load();
	mng.RunEvent(idx,time);
}

void RunGameEvent(uint idx)
{
	GameEventManager mng;
	mng.Load();
	mng.RunEvent(idx);
}

void StopGameEvent(uint idx)
{
	GameEventManager mng;
	mng.Load();
	mng.StopEvent(idx);
	
}

bool d_GameEventStatus(Critter&player,Critter@npc,int idx,int status)
{
	return CheckEventStatus(uint(idx),uint(status));
} 

