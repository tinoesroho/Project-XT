

import int RollVsSkill(Critter&cr,uint skillIndex,int bonus)from"stdlib";  

import bool IsSuccessRvS(int val)from"stdlib";  

import bool IsCriticalRvS(int val)from"stdlib";  

import void HealCritter(Critter&player)from"stdlib";  

import bool TransitToLoc(Critter&cr,uint16 locPid,uint mapIndex,uint entranceNum)from"stdlib";  

import bool TransitToMap(Critter&cr,uint16 mapPid,uint entranceNum)from"stdlib";  

import bool TransitToNewLocation(Critter&cr,uint16 locPid)from"stdlib";  

import void InfoMessage(Critter&player,Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageNorm(Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageShout(Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageWhisp(Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageEmo(Critter&npc,uint strNum)from"stdlib";        

import void TimeoutSet(Critter&npc,uint gameHours)from"stdlib";  

import void TimeoutSub(Critter&npc,uint gameHoursSub)from"stdlib";  

import void TimeoutAdd(Critter&npc,uint gameHoursAdd)from"stdlib";  

import void GroupSetVar(Critter&player,uint16 varId,int value)from"stdlib";  

import void Warn(Critter&player,int npcRole)from"stdlib";  

import void DoorControl(Critter&player,uint entireNum,bool toOpen)from"stdlib";  

import bool DialogNpc(Critter&player,int role)from"stdlib";  

import Critter@GetNearCritterWithRole(Map@map,uint16 hexX,int hexY,uint radius,int role)from"stdlib";

import void Kill(Critter&player,int type)from"stdlib";

import void Damage(Critter&player,int dmg,int type,int dir)from"stdlib";

import void AttackStop(Critter&player,int npcRole)from"stdlib";

import void Attack(Critter&player,int npcRole)from"stdlib";
import bool TransitToMap(Critter&cr,int locPid,int mapIndex,int entranceNum)from"stdlib";

import void SkillUp(Critter&player,int skill)from"stdlib";

import void QuestRewardExperience(Critter&cr,uint8 base)from"stdlib"; 

import void DropDrugEffects(Critter&cr)from"drugs";
import void DropRadiation(Critter&cr)from"radiation";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import Location@CreateLocationForCritter(Critter&player,int locPid,int worldX,int worldY,int delta,int varNum)from"location";
import void SetLocationDeleteTime(Location&loc,uint time)from"location";                             

import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId,uint forceFlags)from"combat";
import uint GetNearFullSecond(uint16 year,uint16 month,uint16 day,uint16 hour,uint16 minute,uint16 second)from"time";

int16[][][]ToolsSettings=
{
	{
		
		{(543)},
		{0},
		{0},
		{2066,2316,2317,2318,2319,2320,2321,2945,2946,2947,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572},
		{0},
		{(286),(320)},
		{1,1},
		{1,1},
		{95,100},
	},
	{
		
		{(6),(115)},
		{(6),(6)},
		{(51),(51)},
		{2074,2075,2079,2080,2092,2093,2428,2429,2430,2431,2435,3273,3580},
		{0},
		{(19)},
		{1},
		{5},
		{100},
	},
	{
		
		{(6),(115)},
		{(6),(6)},
		{(51),(51)},
		{2069,2070,2072,2073,2078,2081,2090,2091,2688},
		{0},
		{(19),(537),(536)},
		{1,1,1},
		{5,2,1},
		{80,65,100},
	},
	{
		
		{(75)},
		{0},
		{0},
		{2106,2252,2253,2254,2255,3294,3295,3296},
		{5},
		{(475),(98)},
		{1,1},
		{2,1},
		{70,100},
	},
	{
		
		{(532)},
		{0},
		{0},
		{42},
		{1},
		{(605)},
		{0},
		{0},
		{100},
	}
};
CTool[]Tools;

ToolDefault defTool; 

ToolAxe toolAxe;
ToolSuperSledge toolSuperSledge;
ToolGiveExpForOre toolGiveExpForOre;
ToolShowInfoInWeight toolShowInfoInWeight;
ToolBottle toolBottle;
void SetToolsExt()
{
	Tools[0].SetCallbackDemand(toolAxe,(543))
	.SetCallbackResult(toolAxe,(286));
	Tools[1].SetCallbackSetTimeouts(toolSuperSledge,(115));
	Tools[2].SetCallbackSetTimeouts(toolSuperSledge,(115))
	.SetCallbackAddExp(toolGiveExpForOre,(536))
	.SetCallbackResult(toolShowInfoInWeight,(536))
	.SetCallbackResult(toolShowInfoInWeight,(537));
	Tools[4].SetCallbackDemand(toolBottle,(532))
	.SetCallbackResult(toolBottle,(605))
	.SetCallbackSetTimeouts(toolBottle,(532));
} 

class CStarter
{
	CStarter()
	{
		for(uint i=0;i<ToolsSettings.length();i++)
		{
			uint k=0;
			Tools.resize(Tools.length()+1);
			CTool@tool=Tools[Tools.length()-1];
			tool.ToolPids=ToolsSettings[i][k++];
			tool.Anim1=ToolsSettings[i][k++];
			tool.Anim2=ToolsSettings[i][k++];
			tool.SourcePids=ToolsSettings[i][k++];
			tool.SourceCount=ToolsSettings[i][k++];
			tool.NewItemsPids=ToolsSettings[i][k++];
			tool.MinCount=ToolsSettings[i][k++];
			tool.MaxCount=ToolsSettings[i][k++];
			tool.NewItemsChances=ToolsSettings[i][k];
			tool.CallbackDemand.resize(tool.ToolPids.length());
			tool.CallbackResult.resize(tool.NewItemsPids.length());
			tool.CallbackSetTimeouts.resize(tool.ToolPids.length());
			tool.CallbackAddExp.resize(tool.NewItemsPids.length());
			tool.SetCallbackDemand(defTool)
			.SetCallbackResult(defTool)
			.SetCallbackGetTimeouts(defTool)
			.SetCallbackSetTimeouts(defTool)
			.SetCallbackAddExp(defTool);
		}
		SetToolsExt();
	}
}
CStarter starter;

interface IResourceDemand{
	bool OnDemand(Critter&master,uint16 toolPid);
}
interface IResourceResult{
	uint OnResult(Critter&master,Item@onItem,Scenery@onScenery,uint16 toolPid,uint count,uint16 newItemsPid);
}
interface IResourceGetTimeouts{
	bool OnGetTimeouts(Critter&master,uint16 toolPid);
}
interface IResourceSetTimeouts{
	void OnSetTimeouts(Critter&master,uint16 toolPid,uint count,uint16 newItemsPid);
}
interface IResourceAddExp{
	void OnAddExp(Critter&master,uint16 toolPid,uint count,uint16 newItemsPid);
}

class CTool
{
	int16[]ToolPids;
	int16[]SourcePids;
	int16[]SourceCount;
	int16[]NewItemsPids;
	int16[]NewItemsChances;
	int16[]Anim1;
	int16[]Anim2;
	int16[]MinCount;
	int16[]MaxCount;
	IResourceDemand@[]CallbackDemand;
	IResourceResult@[]CallbackResult;
	IResourceGetTimeouts@CallbackGetTimeouts;
	IResourceSetTimeouts@[]CallbackSetTimeouts;
	IResourceAddExp@[]CallbackAddExp;
	CTool@SetCallbackDemand(IResourceDemand@callback)
	{
		for(uint i=0;i<ToolPids.length();i++)
		{
			@CallbackDemand[i]=callback;
		}
		return this;
	}
	CTool@SetCallbackResult(IResourceResult@callback)
	{
		for(uint i=0;i<NewItemsPids.length();i++)
		{
			@CallbackResult[i]=callback;
		}
		return this;
	}
	CTool@SetCallbackDemand(IResourceDemand@callback,uint16 toolPid)
	{
		int toolIdx=GetToolIdx(toolPid);
		if(toolIdx!=-1)
		{
			@CallbackDemand[toolIdx]=callback;
		}
		else
		{
			;
		}
		return this;
	}
	CTool@SetCallbackResult(IResourceResult@callback,uint16 newItemPid)
	{
		int16 newItemIdx=GetNewItemIdx(newItemPid);
		if(newItemIdx!=-1)
		{
			@CallbackResult[newItemIdx]=callback;
		}
		else
		{
			;
		}
		return this;
	}
	CTool@SetCallbackGetTimeouts(IResourceGetTimeouts@callback)
	{
		@CallbackGetTimeouts=callback;
		return this;
	}
	CTool@SetCallbackSetTimeouts(IResourceSetTimeouts@callback)
	{
		for(uint i=0;i<ToolPids.length();i++)
		{
			@CallbackSetTimeouts[i]=callback;
		}
		return this;
	}
	CTool@SetCallbackSetTimeouts(IResourceSetTimeouts@callback,uint16 toolPid)
	{
		int toolIdx=GetToolIdx(toolPid);
		if(toolIdx!=-1)
		{
			@CallbackSetTimeouts[toolIdx]=callback;
		}
		else
		{
			;
		}
		return this;
	}
	CTool@SetCallbackAddExp(IResourceAddExp@callback)
	{
		for(uint i=0;i<NewItemsPids.length();i++)
		{
			@CallbackAddExp[i]=callback;
		}
		return this;
	}
	CTool@SetCallbackAddExp(IResourceAddExp@callback,uint16 newItemPid)
	{
		int16 newItemIdx=GetNewItemIdx(newItemPid);
		if(newItemIdx!=-1)
		{
			@CallbackAddExp[newItemIdx]=callback;
		}
		else
		{
			;
		}
		return this;
	}
	int16 GetNewItemIdx(Critter&player,int16 toolIdx)
	{
		bool demand=true;
		if(not(CallbackDemand[toolIdx]is null))
		{
			demand=CallbackDemand[toolIdx].OnDemand(player,ToolPids[toolIdx]);
		}
		if(demand)
		{
			for(uint i=0;i<NewItemsChances.length();i++)
			{
				if(Random(0,99)<NewItemsChances[i])
				{
					return i;
				}
				else
				{
					continue;
				}
			}
		}
		return-1;
	}
	int16 GetNewItemIdx(uint16 pid)
	{
		;
		for(uint i=0;i<NewItemsPids.length();i++)
		{
			;
			if(uint(NewItemsPids[i])==pid)
			{
				return i;
			}
		}
		return-1;
	}
	int GetToolIdx(uint16 pid)
	{
		for(uint i=0;i<ToolPids.length();i++)
		{
			if(uint(ToolPids[i])==pid)
			{
				return i;
			}
		}
		return-1;
	}
}

void _ToolInit(Item&item,bool firstTime)
{
	item.SetEvent((2),"_ToolUse");
}

bool _ToolUse(Item&item,Critter&cr,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	uint16 pid=item.GetProtoId();
	uint16 onObj;
	uint resourceCount;
	if((@onItem!=null))
	{
		onObj=onItem.GetProtoId();
	}
	else
	{
		if((@onScenery!=null))
		{
			onObj=onScenery.ProtoId;
		}
		else
		{
			return false;
		}
	}
	CTool@tool;
	@tool=GetTool(pid,onObj);
	if((@tool!=null))
	{
		uint toolIdx=tool.GetToolIdx(pid);
		if(not(tool.CallbackGetTimeouts is null))
		{
			bool noTimeouts=tool.CallbackGetTimeouts.OnGetTimeouts(cr,pid);
			if(not noTimeouts)
			{
				return true;
			}
		}
		if(not CritterCanGetMoreItems(cr))
		{
			return true;
		}
		AnimateCritter(cr,tool.Anim1[toolIdx],tool.Anim2[toolIdx]);
		uint16 mapId=cr.GetMapId();
		;
		if((@onScenery!=null))
		{
			resourceCount=GetSceneryResourcesCount(mapId,onScenery);
			if(resourceCount==0)
			{
				cr.SayMsg((11),(0),(3700));
				return true;
			}
		}
		int16 newItemIdx=tool.GetNewItemIdx(cr,toolIdx);
		if(newItemIdx!=-1)
		{
			if(tool.NewItemsPids[newItemIdx]>0)
			{
				uint itemCount=Random(tool.MinCount[newItemIdx],tool.MaxCount[newItemIdx]);
				if(itemCount>0)
				{
					if((@onScenery!=null))
					{
						if(resourceCount<itemCount)
						{
							itemCount=resourceCount;
						}
						resourceCount-=itemCount;
						SetSceneryResourcesCount(resourceCount,mapId,onScenery);
					}
					cr.AddItem(tool.NewItemsPids[newItemIdx],itemCount);
				}
				if(not(tool.CallbackResult[newItemIdx]is null))
				{
					itemCount+=tool.CallbackResult[newItemIdx].OnResult(cr,onItem,onScenery,pid,itemCount,tool.NewItemsPids[newItemIdx]);
				}
				if(not(tool.CallbackSetTimeouts[toolIdx]is null))
				{
					tool.CallbackSetTimeouts[toolIdx].OnSetTimeouts(cr,pid,itemCount,tool.NewItemsPids[newItemIdx]);
				}
				if(not(tool.CallbackAddExp[newItemIdx]is null))
				{
					tool.CallbackAddExp[newItemIdx].OnAddExp(cr,pid,itemCount,tool.NewItemsPids[newItemIdx]);
				}
				return true;
			}
			else
			{
				return false;
			}
		}
		else
		{
			return false;
		}
	}
	else
	{
		;
	}
	return false;
}
bool CritterCanGetMoreItems(Critter&player)
{
	if((player.Stat[(11)]-player.ItemsWeight())<0)
	{
		player.SayMsg((11),(0),(3701));
		return false;
	}
	return true;
}

uint GetSceneryResourcesCount(uint16 mapId,Scenery&scenery)
{
	uint[]adResourceCount;
	uint resourceCount=0;
	if(IsAnyData("Resources_"+mapId+"_"+scenery.HexX+"_"+scenery.HexY+"_"+scenery.ProtoId))
	{
		if(GetAnyData("Resources_"+mapId+"_"+scenery.HexX+"_"+scenery.HexY+"_"+scenery.ProtoId,adResourceCount))
		{
			resourceCount=adResourceCount[0];
		}
	}
	else
	{
		uint[]anyData;
		uint maxResCount=GetMaxResourceCount(scenery.ProtoId);
		anyData.insertLast(maxResCount);
		if(not SetAnyData("Resources_"+mapId+"_"+scenery.HexX+"_"+scenery.HexY+"_"+scenery.ProtoId,anyData))
		{
			Log("AnyData not created");
		}
		uint[]forTE;
		forTE.insertLast(mapId);
		forTE.insertLast(scenery.HexX);
		forTE.insertLast(scenery.HexY);
		forTE.insertLast(scenery.ProtoId);
		CreateTimeEvent(__FullSecond+(60*60*24*3),"_AddResourcesCount",forTE,true);
		resourceCount=maxResCount;
	}
	return resourceCount;
}

void SetSceneryResourcesCount(uint resourceCount,uint16 mapId,Scenery&scenery)
{
	uint[]anyData;
	anyData.insertLast(resourceCount);
	if(not SetAnyData("Resources_"+mapId+"_"+scenery.HexX+"_"+scenery.HexY+"_"+scenery.ProtoId,anyData))
	{
		Log("AnyData not created");
	}
}

CTool@GetTool(uint16 pid,uint16 source)
{
	;
	for(uint i=0;i<Tools.length();i++)
	{
		for(int16 k=0;k<int(Tools[i].ToolPids.length());k++)
		{
			if(uint(Tools[i].ToolPids[k])==pid)
			{
				for(int16 l=0;l<int(Tools[i].SourcePids.length());l++)
				{
					if(uint(Tools[i].SourcePids[l])==source)
					{
						return Tools[i];
					}
				}
				break;
			}
		}
	}
	return null;
}

CTool@GetTool(uint16 sourcePid)
{
	for(uint i=0;i<Tools.length();i++)
	{
		for(int16 k=0;k<int(Tools[i].SourcePids.length());k++)
		{
			if(uint(Tools[i].SourcePids[k])==sourcePid)
			{
				return Tools[i];
			}
		}
	}
	return null;
}

uint _AddResourcesCount(uint[]@values)
{
	uint[]adResourceCount;
	if(IsAnyData("Resources_"+values[0]+"_"+values[1]+"_"+values[2]+"_"+values[3]))
	{
		if(GetAnyData("Resources_"+values[0]+"_"+values[1]+"_"+values[2]+"_"+values[3],adResourceCount))
		{
			adResourceCount[0]+=(2);
			if(adResourceCount[0]<GetMaxResourceCount(values[3]))
			{
				if(not SetAnyData("Resources_"+values[0]+"_"+values[1]+"_"+values[2]+"_"+values[3],adResourceCount))
				{
					Log("AnyData not created");
				}
			}
			else
			{
				EraseAnyData("Resources_"+values[0]+"_"+values[1]+"_"+values[2]+"_"+values[3]);
				return 0;
			}
		}
		return(60*60*24*3);
	}
	else
	{
		return 0;
	}
}

void AnimateCritter(Critter&cr,uint anim1,uint anim2)
{
	if(anim1!=0 or anim2!=0)
	{
		cr.Animate(anim1,anim2,null,true,true);
	}
}

uint GetMaxResourceCount(uint16 scProto)
{
	CTool@tool=GetTool(scProto);
	{
		uint count=tool.SourceCount[0];
		if(count!=0)
		{
			return count;
		}
	}
	return(10);
}

class ToolDefault:IResourceDemand,IResourceResult,IResourceGetTimeouts,IResourceSetTimeouts,IResourceAddExp
{
	uint OnResult(Critter&master,Item@onItem,Scenery@onScenery,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		string lexem="$itemname"+"@msg ITEM "+(newItemsPid*100)+"@";
		if(count>1)
		{
			lexem+="$count"+count+"$type"+"@msg text "+(3705)+"@";
			master.SayMsg((11),(0),(3702),lexem);
		}
		else
		{
			if(count==1)
			{
				master.SayMsg((11),(0),(3703),lexem);
			}
		}
		return 0;
	}
	bool OnDemand(Critter&master,uint16 toolPid)
	{
		return true;
	}
	bool OnGetTimeouts(Critter&master,uint16 toolPid)
	{
		if(master.Timeout[(236)]>0)
		{
			master.SayMsg((11),(3),(3401));
			return false;
		}
		return true;
	}
	void OnSetTimeouts(Critter&master,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		master.TimeoutBase[(236)]=(__FullSecond+((((10)*__TimeMultiplier*60))/master.Skill[(217)]));
	}
	
	void OnAddExp(Critter&master,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		
	}
}    

class ToolBottle:IResourceDemand,IResourceResult,IResourceSetTimeouts
{
	bool OnDemand(Critter&master,uint16 toolPid)
	{
		GameVar@qVar=GetLocalVar((3316),master.Id);
		if((@qVar!=null)&&qVar>0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	uint OnResult(Critter&master,Item@onItem,Scenery@onScenery,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		uint[]adResourceCount;
		uint itemCount=1;
		uint resourceCount=1;
		if((@onItem!=null))
		{
			if(IsAnyData("Resources_"+onItem.MapId+"_"+onItem.HexX+"_"+onItem.HexY+"_"+onItem.GetProtoId()))
			{
				if(GetAnyData("Resources_"+onItem.MapId+"_"+onItem.HexX+"_"+onItem.HexY+"_"+onItem.GetProtoId(),adResourceCount))
				{
					resourceCount=adResourceCount[0];
				}
			}
			if(resourceCount==0)
			{
				master.SayMsg((11),(0),(3707));
				return 0;
			}
			uint[]anyData;
			resourceCount=0;
			anyData.insertLast(resourceCount);
			if(not SetAnyData("Resources_"+onItem.MapId+"_"+onItem.HexX+"_"+onItem.HexY+"_"+onItem.GetProtoId(),anyData))
			{
				Log("res: AnyData not created");
			}
			else
			{
				uint[]forTE;
				forTE.insertLast(onItem.MapId);
				forTE.insertLast(onItem.HexX);
				forTE.insertLast(onItem.HexY);
				forTE.insertLast(onItem.GetProtoId());
				CreateTimeEvent(__FullSecond+(60*60*24*3)*5,"_AddResourcesCount",forTE,true);
			}
			Item@tool=master.GetItem(toolPid,-1);
			if((Random(1,6)+int(master.Stat[(6)]/4))>5&&(@tool!=null))
			{
				master.AddItem((605),1);
				master.SayMsg((11),(0),(3708));
				do{if(tool.GetCount()>(1)) tool.SetCount(tool.GetCount()-(1));else DeleteItem(tool);}while(false);
			}
			else
			{
				master.SayMsg((11),(0),(3707));
			}
		}
		return 0;
	}
	
	void OnSetTimeouts(Critter&master,uint16 toolPid,uint count,uint16 newItemsPid)
	{}
} 

class ToolAxe:IResourceDemand,IResourceResult
{
	
	bool OnDemand(Critter&master,uint16 toolPid)
	{
		if(Random(0,99)<(50+(master.StatBase[(5)]*5)))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	uint OnResult(Critter&master,Item@onItem,Scenery@onScenery,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		uint[]adResourceCount;
		uint resourceCount=GetMaxResourceCount(onScenery.ProtoId);
		uint maxCount=master.Skill[(217)]/50;
		if(maxCount==0)
		{
			maxCount=1;
		}
		uint itemCount=Random(1,maxCount);
		uint16 mapId=master.GetMapId();
		if((@onScenery!=null))
		{
			if(IsAnyData("Resources_"+mapId+"_"+onScenery.HexX+"_"+onScenery.HexY+"_"+onScenery.ProtoId))
			{
				if(GetAnyData("Resources_"+mapId+"_"+onScenery.HexX+"_"+onScenery.HexY+"_"+onScenery.ProtoId,adResourceCount))
				{
					resourceCount=adResourceCount[0];
				}
			}
			if(resourceCount<itemCount)
			{
				itemCount=resourceCount;
			}
		}
		if((resourceCount==0)and(count==0))
		{
			master.SayMsg((11),(0),(3700));
			return 0;
		}
		else
		{
			resourceCount-=itemCount;
			if((count+itemCount)>0)
			{
				master.SayMsg((11),(0),(3704));
			}
		}
		if((@onScenery!=null))
		{
			uint[]anyData;
			anyData.insertLast(resourceCount);
			if(not SetAnyData("Resources_"+mapId+"_"+onScenery.HexX+"_"+onScenery.HexY+"_"+onScenery.ProtoId,anyData))
			{
				Log("AnyData not created");
			}
		}
		master.AddItem((286),itemCount);
		return itemCount;
	}
}

class ToolSuperSledge:IResourceSetTimeouts
{
	void OnSetTimeouts(Critter&master,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		master.TimeoutBase[(236)]=(__FullSecond+((((10)*__TimeMultiplier*60))/(master.Skill[(217)]*3/2)));
	}
}

class ToolGiveExpForOre:IResourceAddExp
{
	void OnAddExp(Critter&master,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		master.StatBase[(76)]+=(20);
	}
}

class ToolShowInfoInWeight:IResourceResult
{
	uint OnResult(Critter&master,Item@onItem,Scenery@onScenery,uint16 toolPid,uint count,uint16 newItemsPid)
	{
		string lexem="$itemname"+"@msg ITEM "+(newItemsPid*100)+"@";
		if(count>0)
		{
			ProtoItem@newItemProto=GetProtoItem(newItemsPid);
			uint itemweight=newItemProto.Weight*count/1000;
			lexem+="$count"+itemweight+"$type"+"@msg text "+(3706)+"@";
			master.SayMsg((11),(0),(3702),lexem);
		}
		return 0;
	}
}
