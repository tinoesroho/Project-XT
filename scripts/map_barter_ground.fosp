

int FindInArray(int[]&arr,int value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(int[]&arr,int id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint[]&arr,uint value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint[]&arr,uint id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

int FindInArray(uint16[]&arr,uint16 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}  

int FindInArray(uint8[]&arr,uint8 value)
{
	uint count=arr.length();
	for(uint i=0;i<count;i++)
	{
		if(arr[i]==value)
		return i;
	}
	return-1;
}

bool FindInArray(uint8[]&arr,uint8 id,int&index)
{
	for(uint i=0;i<arr.length();i++)
	{
		if(id==arr[i])
		{
			index=i;
			return true;
		}
	}
	index=-1;
	return false;
}  

bool Present(int what,int[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint what,uint[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

bool Present(uint16 what,uint16[]&where)
{
	if(FindInArray(where,what)==-1)
	return false;
	else
	return true;
}

void MergeArrays(uint16[]&arrayTo,uint16[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
	}
}

void MergeArrays(int[]&arrayTo,int[]&arrayFrom)
{
	for(uint i=0,l=arrayFrom.length();i<l;i++)
	{
		arrayTo.insertLast(arrayFrom[i]);
		arrayTo.insertLast(arrayFrom[i]);
	}
}                                                                                                                                                                                                                                                                                                                                                                                                                         

import bool AddAttackPlane(Critter&npc,uint priority,uint critId,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp,bool run)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";

void _MapInit(Map&map,bool firstTime)
{
	map.SetEvent((6),"_MapInCritter");
	
	Critter@[]critters;
	map.GetCritters(0,(0x01)|(0x20),critters);
	
	for(uint i=0;i<critters.length();i++)
	{
		critters[i].StatBase[(84)]=1;
		critters[i].StatBase[(10)]=9999;
		critters[i].StatBase[(8)]=300;
		critters[i].StatBase[(9)]=90;
		critters[i].StatBase[(14)]=95;
		critters[i].StatBase[(101)]=300;
		critters[i].SkillBase[(203)]=300;
		critters[i].SkillBase[(202)]=300;
		critters[i].SkillBase[(201)]=300;
		critters[i].SkillBase[(200)]=300;
		critters[i].ModeBase[(513)]=1;
		critters[i].ModeBase[(527)]=1;
		critters[i].ModeBase[(522)]=1;
		critters[i].ModeBase[(536)]=1;
		critters[i].ModeBase[(511)]=1;
		critters[i].ModeBase[(523)]=1;
		critters[i].ModeBase[(532)]=1;
	}
	
} 

void _MapInCritter(Map&map,Critter&cr)
{
	if(HasIllegalItems(cr))
	cr.SendMessage((129),cr.Id,(2));
}

void _GuardInit(Critter&cr,bool firstTime)
{
	cr.StatBase[(84)]=1;
	cr.StatBase[(10)]=9999;
	cr.StatBase[(8)]=300;
	cr.StatBase[(9)]=90;
	cr.StatBase[(14)]=95;
	cr.StatBase[(101)]=300;
	cr.SkillBase[(200)]=300;
	cr.SkillBase[(201)]=300;
	cr.SkillBase[(203)]=300;
	cr.SkillBase[(202)]=300;
	cr.ModeBase[(522)]=1;
	cr.ModeBase[(532)]=1;
	cr.ModeBase[(523)]=1;
	cr.ModeBase[(511)]=1;
	cr.ModeBase[(536)]=1;
	cr.ModeBase[(527)]=1;
	cr.ModeBase[(513)]=1;
	cr.SetEvent((27),"_GuardSmthStealing");
	cr.SetEvent((28),"_GuardSmthAttack");
	cr.SetEvent((30),"_GuardSmthUseItem");
	cr.SetEvent((32),"_GuardSmthDropItem");
	cr.SetEvent((18),"_GuardMessage");
	cr.SetEvent((26),"_NpcSmthDead");
	cr.SetEvent((36),"_NpcPlaneEnd");
}

void _AlienInit(Critter&cr,bool firstTime)
{
	cr.SetEvent((27),"_GuardSmthStealing");
	cr.SetEvent((28),"_GuardSmthAttack");
} 

void _GuardMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	NpcPlane@[]planes;
	if(message==(129))
	{
		AddAttackPlane(cr,0,value,true);
		Critter@target=GetCritter(value);
		if(!(@target!=null))
		return;
		if(target.IsNpc())
		return;
		if(Random(0,4)==1)
		cr.SayMsg((3),(0),(5200),GetPlayerName(value));
	}
	else
	{
		if(message==(500))
		{
			uint count=cr.GetPlanes(planes);
			if(count==0)
			return;
			uint erased=0;
			for(uint i=0;i<count;i++)
			{
				if(planes[i].Identifier==(30)&&planes[i].IdentifierExt==uint(value)&&cr.ErasePlane(i-erased))
				erased++;
			}
			if(cr.GetPlanes((30),value,planes)!=0)
			{
				for(uint i=0;i<planes.length();i++)
				{
					if((@planes[i]!=null))
					{
						cr.ErasePlane(i);
					}
				}
			}
		}
	}
} 

void _GuardSmthStealing(Critter&guard,Critter&fromCr,Critter&thief,bool success,Item&item,uint count)
{
	if(thief.IsPlayer()&&guard.IsLife())
	{
		AddAttackPlane(guard,0,thief,1,true);
	}
}

void _GuardSmthAttack(Critter&guard,Critter&attacker,Critter&target)
{
	if(attacker.IsPlayer())
	AddAttackPlane(guard,0,attacker,true);
} 

void _GuardSmthDropItem(Critter&npc,Critter&fromCr,Item&item)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(209)||pid==(545)||pid==(206))
		{
			AddAttackPlane(npc,0,fromCr,true);
		}
	}
	if(!npc.IsLife())
	return;
	if(!CheckItemIsIllegal(item))
	return;
	AddPickPlane(npc,(50),item,0,true);
}

void _GuardSmthUseItem(Critter&npc,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(85)||pid==(544)||pid==(222)||pid==(51)||pid==(206)||pid==(209)||pid==(545))
		{
			AddAttackPlane(npc,0,fromCr,true);
		}
	}
}

void _NpcSmthDead(Critter&npc,Critter&fromCrit,Critter@killer)
{
	if((fromCrit.Mode[(511)]==0&&fromCrit.Mode[(523)]==0))
	AddWalkPlane(npc,0,(30),fromCrit.Id,fromCrit.HexX,fromCrit.HexY,6,true,1);
}  

const uint16[]Pids_IllegalItems=
{
	(206),(209),(545),(222)
};

bool HasIllegalItems(Critter&cr)
{
	Item@[]items;
	if(cr.GetItems(-1,items)==0)
	return false;
	for(uint i=0,l=items.length();i<l;i++)
	{
		if(CheckItemIsIllegal(items[i]))
		return true;
	}
	return false;
}

bool CheckItemIsIllegal(Item@item)
{
	if(!(@item!=null))
	return false;
	return Present(item.GetProtoId(),Pids_IllegalItems);
}

int _NpcPlaneEnd(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Identifier==(30)&&reason==(30))
	{
		Critter@cr=::GetCritter(plane.IdentifierExt);
		if((@cr!=null)&&cr.IsDead())
		{
			Item@[]items;
			cr.GetItems((0),items);
			cr.GetItems((1),items);
			cr.GetItems((2),items);
			npc.GetMap().GetItems(cr.HexX,cr.HexY,items);
			
			for(uint i=0,j=items.length();i<j;i++)
			{
				int type=items[i].GetType();
				if(type<(1)||type>(7))
				@items[i]=null;
			}
			MoveItems(items,npc);
			npc.SendMessage((500),plane.IdentifierExt,(2));
			npc.Animate(0,(27),null,true,true);
			npc.Wait(__Breaktime);
		}
		return(2);
	}
	return(0);
}
