                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 

import bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)from"entire";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";    

class Patroller
{
	Patroller()
	{}
	uint DialogId;
	uint ProtoId;
	uint BagId;
	uint TeamId;
	uint AiPacket;
	uint PowerLvl;
	uint Id;
	
	Critter@GetPatroller(Map&map,uint x,uint y)
	{
		int[]params=
		{
			(104),DialogId,(107),BagId,(106),TeamId,(105),AiPacket,
			(77),(((this.PowerLvl*5)>(24))?(24):(((this.PowerLvl*5)<(1))?(1):(this.PowerLvl*5))),(517),1
		};
		Critter@cr=map.AddNpc(this.ProtoId,x,y,Random(0,5),params,null,null);
		if(!(@cr!=null))
		return null;
		
		this.Id=cr.Id;
		cr.ShowCritterDist1=(6);
		cr.SetScript("_PatrollerInit");
		return cr;
	}
}

void _PatrollerInit(Critter&cr,bool firstTime)
{
	if(!firstTime)
	{
		DeleteNpc(cr);
		return;
	}
	cr.SetEvent((5),"_ShowCritter1");
	cr.SetEvent((36),"_PatrollerPlaneEnd");
	cr.SetEvent((2),"_PatrollerDead");
	cr.SetEvent((39),"_PatrollerTalk");
	cr.SetEvent((15),"_PatrollerAttack");
	cr.SetEvent((35),"_PatrollerPlaneBegin");
	cr.SetEvent((31),"_SmthUseSkill");
	cr.SetEvent((30),"_SmthUseItem");
	
} 

class PatrolPoint
{
	
	PatrolPoint(Map&map,uint eHexNum,uint waitMinutes)
	{
		this.MapId=map.Id;
		this.EHexNum=eHexNum;
		this.WaitMinutes=waitMinutes;
	}
	
	uint EHexNum;
	uint WaitMinutes;
	uint MapId;
	
	Map@PatrolMap()
	{
		Map@map=GetMap(this.MapId);
		if((@map!=null))
		{
			return map;
		}
		else
		{
			Log("Patrol map not found. Id "+this.MapId);
			return null;
		}
	}
	
	bool GetNearPatrolPoint(uint&x,uint&y)
	{
		Map@map=GetMap(this.MapId);
		if(!(@map!=null))
		return false;
		
		uint16 x_=0,y_=0;
		bool result=GetNearEntire(map,this.EHexNum,x_,y_);
		x=x_;
		y=y_;
		return result;
	}
}

class PatrolRoute
{
	PatrolRoute()
	{
		this.curIndex=0;
	}
	
	void AddPoint(PatrolPoint&p)
	{
		this.curIndex=0;
		this.points.insertLast(p);
	} 
	
	PatrolPoint[]points;
	
	uint curIndex;
	
	PatrolPoint@CurPoint()
	{
		if(this.points.length()==0)
		return null;
		
		return this.points[this.curIndex<this.points.length()?this.curIndex:0];
	}
	
	void MoveNextPoint()
	{
		this.curIndex=(this.curIndex+1<this.points.length()?this.curIndex+1:0);
	}
	
}

class PatrolInfo
{
	PatrolInfo()
	{
		this.AlivePatrollers=0;
	}
	
	PatrolRoute Route;
	Patroller[]Patrollers;
	uint[]AcceptedPlayers;
	uint AlivePatrollers;
	
	void AddPatroller(uint dialog,uint pid,uint bag,uint team,uint ai,uint lvl)
	{
		Patroller@p=Patroller();
		
		if(!(@p!=null))
		return;
		
		p.DialogId=dialog;
		p.ProtoId=pid;
		p.BagId=bag;
		p.TeamId=team;
		p.AiPacket=ai;
		p.PowerLvl=lvl;
		
		this.Patrollers.insertLast(p);
	}
	
	void MovePatrol()
	{
		for(uint i=0;i<this.Patrollers.length();i++)
		{
			Critter@cr=GetCritter(this.Patrollers[i].Id);
			if(!(@cr!=null))
			continue;
			if(!cr.IsLife())
			continue;
			this.MovePatroller(cr);
			
		}
	}
	
	void MovePatroller(Critter&cr)
	{
		PatrolPoint@p=this.Route.CurPoint();
		if(!(@p!=null))
		return;
		uint x=0;
		uint y=0;
		if(p.GetNearPatrolPoint(x,y))
		{
			cr.ErasePlane((0),true);
			AddWalkPlane(cr,0,(49),0,x,y,Random(0,5),false,1);
		}
	}
	
	void BeginPatrol()
	{
		this.EndPatrol();
		this.AcceptedPlayers.resize(0);
		if(this.Route.points.length()==0)
		{
			Log("Begin patrol failed. Route empty");
			return;
		}
		
		if(this.Patrollers.length()==0)
		{
			Log("Begin patrol failed. 0 patrollers setted up");
			return;
		}
		
		Map@map=this.Route.CurPoint().PatrolMap();
		if(!(@map!=null))
		return;
		
		uint x=0;
		uint y=0;
		for(uint i=0;i<this.Patrollers.length();i++)
		{
			if(this.Route.CurPoint().GetNearPatrolPoint(x,y))
			{
				this.Patrollers[i].GetPatroller(map,x,y);
				this.AlivePatrollers++;
			}
		}
	}
	
	void EndPatrol()
	{
		for(uint i=0;i<this.Patrollers.length();i++)
		{
			if(this.Patrollers[i].Id!=0)
			{
				Critter@pat=GetCritter(this.Patrollers[i].Id);
				if((@pat!=null))
				{
					if(pat.IsNpc())
					{
						DeleteNpc(pat);
						this.Patrollers[i].Id=0;
					}
				}
			}
		}
	}
	
	bool CheckAllPatrollersAtPoint()
	{
		PatrolPoint@p=pInfo.Route.CurPoint();
		if(!(@p!=null))
		return false;
		uint x=0;
		uint y=0;
		if(!p.GetNearPatrolPoint(x,y))
		return false;
		
		for(uint i=0;i<this.Patrollers.length();i++)
		{
			Critter@cr=GetCritter(this.Patrollers[i].Id);
			if(!(@cr!=null))
			continue;
			if(!cr.IsLife())
			continue;
			
			if(GetDistantion(x,y,cr.HexX,cr.HexY)>(4))
			{
				if(cr.IsNoPlanes())
				this.MovePatroller(cr);
				return false;
			}
		}
		
		return true;
	} 
	
	bool IsPatroller(Critter&cr)
	{
		for(uint i=0;i<this.Patrollers.length();i++)
		{
			if(cr.Id==this.Patrollers[i].Id)
			return true;
		}
		return false;
	}
	
	void AcceptPlayer(Critter&player)
	{
		for(uint i=0;i<this.AcceptedPlayers.length();i++)
		{
			if(this.AcceptedPlayers[i]==player.Id)
			{
				return;
			}
		}
		this.AcceptedPlayers.insertLast(player.Id);
	} 
	
	bool IsPlayerAccepted(Critter&player)
	{
		for(uint i=0;i<this.AcceptedPlayers.length();i++)
		{
			if(this.AcceptedPlayers[i]==player.Id)
			{
				return true;
			}
		}
		return false;
	}
} 

PatrolInfo pInfo;

void _ShowCritter1(Critter&cr,Critter&showCrit)
{
	if(showCrit.IsNpc())
	return;
	if(pInfo.IsPlayerAccepted(showCrit))
	return;
	NpcPlane@[]planes;
	cr.GetPlanes(planes);
	for(uint i=0;i<planes.length();i++)
	{
		if(planes[i].Type==(1))
		{
			return;
		}
	}
	
	_FoundPlayer(cr);
	; 
	
	Critter@[]talkers;
	for(uint i=0;i<pInfo.Patrollers.length();i++)
	{
		
		Critter@pat=GetCritter(pInfo.Patrollers[i].Id);
		if(!(@pat!=null))
		continue;
		@talkers;
		if(pat.GetTalkedPlayers(talkers)>0)
		{
			for(uint j=0;j<talkers.length();j++)
			{
				if(talkers[j].Id==showCrit.Id)
				{
					;
					return;
				}
			}
		}
	}
	showCrit.Wait(0);
	RunDialog(showCrit,cr,true);
} 

void plane_MiscWait(Critter&npc)
{
	
	if(pInfo.CheckAllPatrollersAtPoint())
	{
		pInfo.Route.MoveNextPoint();
		pInfo.MovePatrol();
	}
	else
	{
		AddMiscPlane(npc,(25),__FullSecond+pInfo.Route.CurPoint().WaitMinutes*60,"map_redding_inner"+"@plane_MiscWait");
	}
	
}

void _FoundPlayer(Critter&cr)
{
	cr.ErasePlane((0),true);
	cr.ErasePlane((2),true);
}

void _PatrollerDead(Critter&cr,Critter@killer)
{
	DeleteNpc(cr);
}

void _SmthUseItem(Critter&cr,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(fromCr.IsNpc())
	return;
	
	uint pid=item.GetProtoId();
	
	if(pid==(51)||pid==(85)||pid==(544))
	{
		AddAttackPlane(cr,0,fromCr,false);
	}
}

void _SmthUseSkill(Critter&cr,Critter&fromCr,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(!(@onCritter!=null))
	return;
	if(skill==(210))
	{
		AddAttackPlane(cr,0,fromCr,false);
	}
} 

bool _PatrollerTalk(Critter&cr,Critter&player,bool attach,uint talkCount)
{
	if(!attach)
	{
		for(uint i=0;i<pInfo.Patrollers.length();i++)
		{
			
			Critter@pat=GetCritter(pInfo.Patrollers[i].Id);
			if(!(@pat!=null))
			continue;
			
			if(pat.GetTalkedPlayers(null)>0)
			return true;
			
		}
		
		pInfo.MovePatrol();
	}
	else
	{
		if(talkCount>2)
		return false;
	}
	
	return true;
}

int _PatrollerPlaneBegin(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Type==(1)&&plane.Priority==(50))
	{
		Critter@target=GetCritter(plane.Attack_TargId);
		if(!(@target!=null))
		return(0);
		
		for(uint i=0;i<pInfo.Patrollers.length();i++)
		{
			if(pInfo.Patrollers[i].Id==cr.Id)
			continue;
			
			Critter@pat=GetCritter(pInfo.Patrollers[i].Id);
			if((@pat!=null))
			{
				NpcPlane@[]planes;
				pat.GetPlanes(planes);
				bool hasTarget=false;
				for(uint j=0;j<planes.length()&&!hasTarget;j++)
				if(planes[j].Type==(1)&&planes[j].Attack_TargId==target.Id)
				hasTarget=true;
				
				;
				if(!hasTarget)
				AddAttackPlane(pat,(50)+1,target,false);
			}
		}
	}
	return(0);
}

bool _PatrollerAttack(Critter&cr,Critter&target)
{
	return false;
}

int _PatrollerPlaneEnd(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	;
	if(plane.Identifier==(49))
	{
		PatrolPoint@p=pInfo.Route.CurPoint();
		if(!(@p!=null))
		return(0);
		
		if(reason==(30))
		{
			AddMiscPlane(cr,(25),__FullSecond+p.WaitMinutes*60,"map_redding_inner"+"@plane_MiscWait");
		}
		else
		{
			uint x=plane.Walk_HexX;
			uint y=plane.Walk_HexY;
			if(p.GetNearPatrolPoint(x,y))
			{
				plane.Walk_HexX=x;
				plane.Walk_HexY=y;
				;
				return(1);
			}
		}
	}
	
	return(0);
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        

import uint GetNearFullSecond(uint16 year,uint16 month,uint16 day,uint16 hour,uint16 minute,uint16 second)from"time";          

import void PowerNpc(Critter&cr)from"redding_common";

void _MapInit(Map&map,bool firstTime)
{
	Critter@[]npc;
	map.GetCritters(0,(0x0F)|(0x20),npc);
	for(uint i=0,l=npc.length();i<l;i++)
	{
		Critter@cr=npc[i];
		if((@cr!=null))
		{
			if(cr.Stat[(106)]==(16)||cr.Stat[(104)]==(1345))
			{
				PowerNpc(cr);
			}
		}
	}
	
	pInfo=PatrolInfo();
	;
	pInfo.Route.AddPoint(PatrolPoint(map,(156),14));
	pInfo.Route.AddPoint(PatrolPoint(map,(161),4));
	pInfo.Route.AddPoint(PatrolPoint(map,(158),4));
	pInfo.Route.AddPoint(PatrolPoint(map,(159),4));
	pInfo.Route.AddPoint(PatrolPoint(map,(160),4));
	pInfo.Route.AddPoint(PatrolPoint(map,(157),24));
	pInfo.AddPatroller((1348),(498),(191),(16),(124),30);
	pInfo.AddPatroller((1348),(498),(165),(16),(124),30);
	pInfo.AddPatroller((1348),(498),(184),(16),(124),30);
	
	uint time=GetNearFullSecond(0,0,0,6,0,0);
	CreateTimeEvent(time,"e_BeginPatrol",false);
	
}

uint e_BeginPatrol(uint[]@values)
{
	pInfo.BeginPatrol();
	pInfo.MovePatrol();
	uint time=GetNearFullSecond(0,0,0,5,55,0);
	CreateTimeEvent(time,"e_EndPatrol",false);
	return 0;
}

uint e_EndPatrol(uint[]@values)
{
	pInfo.EndPatrol();
	uint time=GetNearFullSecond(0,0,0,21,0,0);
	CreateTimeEvent(time,"e_BeginPatrol",false);
	return 0;
}
