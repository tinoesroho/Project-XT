

shared class Serializator
{
	uint8[]Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
	
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer(uint size)
	{
		if(size<=BufSize)
		return;
		if(BufSize==0)
		BufSize=1;
		while(size>BufSize)
		BufSize*=2;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		
		bool result=SetAnyData(name,Array,DataSize);    
		
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		
		if(not GetAnyData(name,Array))
		return false;    
		
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator&SetCurPos(uint pos)
	{
		GrowBuffer(pos);
		CurPos=pos;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Fill(uint8 value,uint length)
	{
		GrowBuffer(CurPos+length);
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64&value)
	{
		GrowBuffer(CurPos+8);
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32&value)
	{
		GrowBuffer(CurPos+4);
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16&value)
	{
		GrowBuffer(CurPos+2);
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool&value)
	{
		GrowBuffer(CurPos+1);
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string&value)
	{
		uint len=value.rawLength();
		GrowBuffer(CurPos+len+1);
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const int8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint64[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint32[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint16[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const uint8[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const bool[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const string[]&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		GrowBuffer(CurPos+len);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Set(const Critter&cr)
	{
		GrowBuffer(CurPos+4);
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator&Set(const Item&item)
	{
		GrowBuffer(CurPos+4);
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	} 
	
	Serializator&Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator&Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator&Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator&Get(int64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(int8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint64[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint32[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint16[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(uint8[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(bool[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator&Get(string[]&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	} 
	
	Serializator&Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator&Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
};                      

import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool GetFreeHex(Map&map,uint radius,uint16&hx,uint16&hy)from"caravan"; 

class HostileLocationInfo
{
	HostileLocationInfo()
	{
		this.LocCreated=false;
	}
	
	HostileLocationInfo(int playerId,int varNum)
	{
		this.LocCreated=false;
		this.PlayerId=playerId;
		this.QVarNum=varNum;
	}
	
	uint PlayerId;
	uint QVarNum;
	uint CVarNum;
	uint LocId;
	uint LocPid;
	uint LocX;
	uint LocY;
	uint CoordDelta;
	bool LocCreated;
	
	bool Serialized()
	{
		string key=("HLoc_"+this.PlayerId+"_q_"+this.QVarNum);
		return IsAnyData(key);
	}
	
	void Save()
	{
		string key=("HLoc_"+this.PlayerId+"_q_"+this.QVarNum);
		Serializator save;
		save.Set(this.PlayerId);
		save.Set(this.QVarNum);
		save.Set(this.CVarNum);
		save.Set(this.LocId);
		save.Set(this.LocPid);
		save.Set(this.LocX);
		save.Set(this.LocY);
		save.Set(this.CoordDelta);
		save.Set(this.LocCreated);
		save.Save(key);
	}
	
	void Load()
	{
		string key=("HLoc_"+this.PlayerId+"_q_"+this.QVarNum);
		Serializator load;
		if(!load.Load(key))
		{
			
			return;
		}
		load.Get(this.PlayerId);
		load.Get(this.QVarNum);
		load.Get(this.CVarNum);
		load.Get(this.LocId);
		load.Get(this.LocPid);
		load.Get(this.LocX);
		load.Get(this.LocY);
		load.Get(this.CoordDelta);
		load.Get(this.LocCreated);
	}
	
	void Erase()
	{
		string key=("HLoc_"+this.PlayerId+"_q_"+this.QVarNum);
		if(IsAnyData(key))
		EraseAnyData(key);
	}
	
	bool CreateHostileLocation()
	{
		if(this.PlayerId==0||this.LocCreated||this.LocPid==0)
		return false;
		Critter@player=GetCritter(this.PlayerId);
		if(!(@player!=null))
		return false;
		this.LocId=CreateLocation(this.LocPid,this.LocX+Random(-1*int(this.CoordDelta),this.CoordDelta),this.LocY+Random(-1*int(this.CoordDelta),this.CoordDelta),null);
		if(this.LocId==0)
		return false;
		;
		this.LocCreated=true;
		this.Save();
		player.SetKnownLoc(true,this.LocId);
		
		Location@loc=GetLocation(this.LocId);
		if((@loc!=null))
		{
			for(uint i=0,l=loc.GetMapCount();i<l;i++)
			{
				Map@map=loc.GetMapByIndex(i);
				if((@map!=null))
				{
					(map.SetData(0,this.PlayerId));
					(map.SetData(1,this.QVarNum));
					map.SetScript("_HostileMapInit");
				}
			}
		}
		
		uint[]values={this.PlayerId,this.QVarNum};
		CreateTimeEvent(__FullSecond+(((2)*__TimeMultiplier*86400)),"e_ResetHostileLoc",values,true);
		
		this.Save();
		return true;
	}
	
	uint GetNpc(Critter@[]&critters,bool ally,int findType)
	{
		uint len=critters.length();
		if(this.LocId==0)
		return 0;
		;
		Location@loc=GetLocation(this.LocId);
		if(!(@loc!=null))
		return 0;
		for(uint i=0,l=loc.GetMapCount();i<l;i++)
		{
			;
			Map@map=loc.GetMapByIndex(i);
			if((@map!=null))
			for(uint j=0,m=map.GetNpcCount((ally?(401):(400)),findType);j<m;j++)
			{
				;
				Critter@cr=map.GetNpc((ally?(401):(400)),findType,j);
				if((@cr!=null))
				critters.insertLast(@cr);
			}
		}
		;
		return(critters.length()-len);
	}
	
	uint DeadPercent(bool ally)
	{
		Critter@[]critters;
		uint all=this.GetNpc(critters,ally,(0x0F)|(0x20));
		uint dead=this.GetNpc(critters,ally,(0x06)|(0x20));
		;
		return(dead==0?0:uint(100*dead/all));
	}
	
	void ResetQuest()
	{
		GameVar@qVar=GetLocalVar(this.QVarNum,this.PlayerId);
		if((@qVar!=null))
		qVar=(2);
		
		if(this.CVarNum!=0)
		{
			GameVar@status=GetLocalVar(this.CVarNum,this.PlayerId);
			if((@status!=null)&&status.GetValue()!=0)
			status=0;
		}
		Location@loc=GetLocation(this.LocId);
		if((@loc!=null))
		loc.AutoGarbage=true;
		this.Erase();
	}
	
	void CompleteQuest()
	{
		;
		GameVar@qVar=GetLocalVar(this.QVarNum,this.PlayerId);
		if((@qVar!=null))
		qVar=(3);
		
		;
		if(this.CVarNum!=0)
		{
			GameVar@status=GetLocalVar(this.CVarNum,this.PlayerId);
			if((@status!=null)&&status.GetValue()==0)
			{
				Critter@[]critters;
				status=this.GetNpc(critters,true,(0x04)|(0x20));
			}
		}
		Location@loc=GetLocation(this.LocId);
		if((@loc!=null))
		loc.AutoGarbage=true;
		Critter@[]critters;
		this.GetNpc(critters,true,(0x0F)|(0x20));
		this.GetNpc(critters,false,(0x0F)|(0x20));
		for(uint i=0,l=critters.length();i<l;i++)
		critters[i].SetScript("");
		this.Erase();
	}
}

uint e_ResetHostileLoc(uint[]@values)
{
	HostileLocationInfo@info=HostileLocationInfo(values[0],values[1]);
	if((@info!=null)&&info.Serialized())
	{
		info.Load();
		info.ResetQuest();
	}
	return 0;
}

void _HostileMapInit(Map&map,bool firstTime)
{
	;
	map.SetEvent((8),"_HostileMapCritterDead");
	map.SetEvent((6),"_HostileMapInCritter");
	HostileLocationInfo@info=(HostileLocationInfo((map.GetData(0)),(map.GetData(1))));
	if(!(@info!=null)||!info.Serialized())
	return;
	info.Load();
	Critter@[]allies;
	if(info.GetNpc(allies,true,(0x03)|(0x20))>0)
	{
		for(uint i=0,l=allies.length();i<l;i++)
		{
			;
			allies[i].SetScript("_AllyInit");
		}
	}
	Critter@[]hostiles;
	if(info.GetNpc(hostiles,false,(0x03)|(0x20))>0)
	{
		for(uint i=0,l=hostiles.length();i<l;i++)
		{
			hostiles[i].SetScript("_HostileInit");
		}
	}
}

void _HostileMapInCritter(Map&map,Critter&cr)
{}

void _HostileMapCritterDead(Map&map,Critter&cr,Critter@killer)
{
	HostileLocationInfo@info=(HostileLocationInfo((map.GetData(0)),(map.GetData(1))));
	if(!(@info!=null)||!info.Serialized())
	return;
	info.Load();
	Critter@[]hostiles;
	if(info.GetNpc(hostiles,false,(0x03)|(0x20))==0)
	{
		;
		info.CompleteQuest();
		map.SetScript("");
		map.SetEvent((8),"");
		map.SetEvent((6),"");
		return;
	}
	if(cr.IsPlayer()&&cr.Id==info.PlayerId)
	{
		for(uint i=0,l=hostiles.length();i<l;i++)
		{
			hostiles[i].DropPlanes();
		}
		Critter@[]allies;
		if(info.GetNpc(allies,true,(0x03)|(0x20))>0)
		{
			for(uint i=0,l=allies.length();i<l;i++)
			{
				if((@allies[i]!=null))
				SendAllyHome(allies[i]);
			}
		}
	}
	
} 

void _AllyInit(Critter&cr,bool firstTime)
{
	;
	cr.StatBase[(90)]=0;
	cr.ModeBase[(517)]=0;
	cr.SetEvent((0),"_AllyIdle");
	cr.SetEvent((29),"_AllySmthAttacked");
	cr.SetEvent((4),"_AllyShowCritter");
}

void _AllyIdle(Critter&cr)
{
	if(cr.Stat[(90)]==0||!(@cr.GetMap()!=null))
	return;
	HostileLocationInfo@info=((@cr.GetMap()!=null)?HostileLocationInfo((cr.GetMap().GetData(0)),(cr.GetMap().GetData(1))):null);
	if(!(@info!=null)||!info.Serialized())
	return;
	info.Load();
	Critter@player=GetCritter(info.PlayerId);
	if(!(@player!=null))
	{
		SendAllyHome(cr);
		return;
	}
	Map@map=player.GetMap();
	if(!(@map!=null))
	{
		SendAllyHome(cr);
		return;
	}
	Location@loc=map.GetLocation();
	if(!(@loc!=null)||loc.Id!=info.LocId)
	{
		SendAllyHome(cr);
		return;
	}
	if(map.Id==cr.GetMap().Id)
	{
		if(GetCrittersDistantion(cr,player)>20)
		AddWalkPlane(cr,0,player.HexX,player.HexY,Random(0,5),true,3);
	}
	else
	{
		uint16 hX=player.HexX;
		uint16 hY=player.HexY;
		if(GetFreeHex(map,4,hX,hY))
		{
			cr.TransitToMap(map.Id,hX,hY,Random(0,5));
		}
	}
}

void SendAllyHome(Critter&cr)
{
	uint mapId=0;
	uint16 hX=0;
	uint16 hY=0;
	uint8 dir=0;
	cr.DropPlanes();
	cr.StatBase[(90)]=0;
	cr.ModeBase[(517)]=0;
	cr.GetHomePos(mapId,hX,hY,dir);
	cr.TransitToMap(mapId,hX,hY,dir);
}

void _AllySmthAttacked(Critter&cr,Critter&fromCr,Critter&attacker)
{
	
	if(cr.Stat[(90)]==0)
	return;
}

void _AllyShowCritter(Critter&cr,Critter&showCrit)
{
	;
	HostileLocationInfo@info=((@cr.GetMap()!=null)?HostileLocationInfo((cr.GetMap().GetData(0)),(cr.GetMap().GetData(1))):null);
	if(!(@info!=null)&&!info.Serialized())
	return;
	info.Load();
	;
	if(cr.Stat[(90)]==0)
	{
		if(showCrit.IsPlayer()&&showCrit.Id==info.PlayerId)
		{
			;
			cr.StatBase[(90)]=1;
			cr.ModeBase[(517)]=1;
		}
		else
		{
			return;
		}
	}
}  

void r_SetFollow(Critter&player,Critter@npc,int val)
{
	if((@npc!=null))
	{
		npc.StatBase[(90)]=(((val)>(1))?(1):(((val)<(0))?(0):(val)));
		npc.ModeBase[(517)]=(((val)>(1))?(1):(((val)<(0))?(0):(val)));
	}
} 

void _HostileInit(Critter&cr,bool firstTime)
{
	cr.SetEvent((0),"_AllyIdle");
	cr.SetEvent((16),"_HostileAttacked");
	cr.SetEvent((5),"_HostileShowCritter");
	cr.SetEvent((2),"_HostileDead");
	cr.SetEvent((18),"_HostileMessage");
	cr.ShowCritterDist1=10;
}

void _HostileMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	if(message==(144)&&fromCr.Stat[(89)]==cr.Stat[(89)])
	{
		AddAttackPlane(cr,0,value);
	}
}

void _HostileShowCritter(Critter&cr,Critter&showCrit)
{
	if(showCrit.IsPlayer()||showCrit.Stat[(89)]==(401))
	{
		AddAttackPlane(cr,0,showCrit.Id);
	}
}

bool _HostileAttacked(Critter&cr,Critter&attacker)
{
	if(attacker.IsPlayer()||attacker.Stat[(89)]==(401))
	{
		cr.SendMessage((144),attacker.Id,(0));
	}
	return false;
}

void _HostileDead(Critter&cr,Critter@killer)
{
	bool toAll=false;
	HostileLocationInfo@info=((@cr.GetMap()!=null)?HostileLocationInfo((cr.GetMap().GetData(0)),(cr.GetMap().GetData(1))):null);
	if((@info!=null)&&info.Serialized())
	{
		info.Load();
		if(info.DeadPercent(false)>20)
		toAll=true;
	}
	if((@killer!=null))
	{
		cr.SendMessage((144),killer.Id,(toAll?(2):(0)));
	}
} 

void r_ShowLocation(Critter&player,Critter@npc,int qVar,int counterVar,int locPid,int locX,int locY)
{
	HostileLocationInfo@info=HostileLocationInfo(player.Id,qVar);
	if(!(@info!=null))
	return;
	info.CVarNum=counterVar;
	info.LocPid=locPid;
	info.LocX=locX;
	info.LocY=locY;
	info.CoordDelta=0;
	info.Save();
	info.CreateHostileLocation();
} 

void r_ShowLocation2(Critter&player,Critter@npc,int qVar,int counterVar,int locPid,int locX,int locY)
{
	HostileLocationInfo@info=HostileLocationInfo(player.Id,qVar);
	if(!(@info!=null))
	return;
	info.CVarNum=counterVar;
	info.LocPid=locPid;
	info.LocX=locX;
	info.LocY=locY;
	info.CoordDelta=__GlobalMapZoneLength;
	info.Save();
	info.CreateHostileLocation();
}
