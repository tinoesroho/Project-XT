

const int[]SmitData_=
{
	
	(0),(45),(44),0,1,0,0,
	(1),(45),0,0,0,1,(45),
	(2),(45),(45),0,0,0,0,
	(3),(45),0,0,0,1,(44),
	(4),(42),(46),4,1,0,0,
	(5),(42),0,4,0,1,(47),
	(6),(42),(47),4,0,0,0,
	(7),(44),(18),4,0,1,(17),
	(8),(44),(17),4,0,0,0,
	(9),(44),0,4,0,1,(18),
	(10),(42),0,4,0,1,(48),
	(11),(42),(48),4,0,0,0,
	(12),(42),0,4,0,1,(46)
};              

import bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)from"entire";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)from"npc_planes";
import uint GetNearFullSecond(uint16 year,uint16 month,uint16 day,uint16 hour,uint16 minute,uint16 second)from"time";
import bool BeginSpyControl(Critter&catcher,uint catchRadius,uint minSneak,uint checkTime,uint varStatNum,uint varQuest,uint strAlarm)from"q_spy_mission";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes"; 

void _SmitInit(Critter&smit,bool firstTime)
{
	smit.StatBase[(89)]=(54);
	
	smit.SetEvent((3),"_SmitRespawn");
	smit.SetEvent((2),"_SmitDead");
	smit.SetEvent((36),"_SmitPlaneEnd");
	smit.SetEvent((0),"_SmitIdle");
	if(firstTime)
	{
		SetupRadioComm(smit);
	}
	
	SetSmitPos((SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+3)]));
	_SmitRespawn(smit);
}   

uint8 GetSmitPos()
{
	GameVar@v=GetGlobalVar((4215));
	if((@v!=null))
	{
		return v.GetValue();
	}
	else
	{
		Log("GVAR_ncr_smit_position: var invalid");
		return 0;
	}
}
void SetSmitPos(int val)
{
	GameVar@v=GetGlobalVar((4215));
	if(!(@v!=null))
	return;
	v=val;
	
}  

Critter@GetFakeSmit(uint pos,Critter&realSmit)
{
	Map@posmap=GetMapByPid((SmitData_[(((pos)<(13)?(pos):0)*7+1)]),0);
	if(!(@posmap!=null))
	{
		Log("Map position № "+pos+" not found ");
		return null;
	}
	
	Critter@fakeSmit=posmap.GetNpc((54),(0x0F)|(0x20),0);
	if((@fakeSmit!=null))
	{
		if(fakeSmit.StatBase[(104)]==realSmit.StatBase[(104)]&&fakeSmit.Id!=realSmit.Id)
		{
			DL("real id"+realSmit.Id+"fakeId = "+fakeSmit.Id);
			return fakeSmit;
		}
		else
		{
			return null;
		}
	}
	else
	{
		return null;
	}
}  

bool IsSmitRightPosition(Critter&smit,uint pos)
{
	Map@map=smit.GetMap();
	if(!(@map!=null))
	return false;
	
	if(int(map.GetProtoId())!=(SmitData_[(((pos)<(13)?(pos):0)*7+1)]))
	return false;
	
	uint16 hx=smit.HexX;
	uint16 hy=smit.HexY;
	
	GetNearEntire(map,(SmitData_[(((pos)<(13)?(pos):0)*7+2)]),hx,hy);
	
	return GetDistantion(hx,hy,smit.HexX,smit.HexY)<=(3);
}

void _SmitRespawn(Critter&smit)
{
	uint pos=GetSmitPos();
	
	Critter@cr=GetFakeSmit(pos,smit);
	if((@cr!=null))
	{
		DL("Fake smit deleted id = "+cr.Id);
		DeleteNpc(cr);
	}
	
	if(IsSmitRightPosition(smit,pos))
	return;
	
	TransitToPos(smit,pos);
}

void _SmitDead(Critter&smit,Critter@killer)
{ 
	
	SetSmitPos((SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+3)]));
}

void TransitToPos(Critter&smit,uint pos)
{
	Map@map=GetMapByPid((SmitData_[(((pos)<(13)?(pos):0)*7+1)]),0);
	if(!(@map!=null))
	{
		Log("Map position № "+pos+" not found ");
		return;
	}
	uint16 hx=smit.HexX;
	uint16 hy=smit.HexY;
	
	if(GetNearEntire(map,(SmitData_[(((pos)<(13)?(pos):0)*7+2)]),hx,hy))
	{
		if(!smit.TransitToMap(map.Id,hx,hy,6))
		Log("Smit transit error. Position "+pos);
	}
	else
	{
		Log("Smit transit failed. Can't find entire. Position "+pos);
	}
	
	SetSmitPos(pos);
	DL("Transit to map successful");
}

void WalkToPos(Critter&smit,uint pos)
{
	
	uint16 hx=smit.HexX;
	uint16 hy=smit.HexY;
	
	Map@map=GetMapByPid((SmitData_[(((pos)<(13)?(pos):0)*7+1)]),0);
	
	if(!(@map!=null))
	return;
	
	if(map.Id!=smit.GetMap().Id)
	return;
	
	if(!GetNearEntire(map,(SmitData_[(((pos)<(13)?(pos):0)*7+6)])==0?(SmitData_[(((pos)<(13)?(pos):0)*7+2)]):(SmitData_[(((pos)<(13)?(pos):0)*7+6)]),hx,hy))
	return; 
	
	if(!AddWalkPlane(smit,0,pos,pos,hx,hy,Random(0,5),false,0))
	return; 
	
	SetSmitPos(pos);
} 

void _SmitIdle(Critter&smit)
{
	DL("EnterIdle"+(SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+3)]));
	if(!(SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+4)]==1)||!IsSmitRightPosition(smit,GetSmitPos()))
	{
		
		uint idleCount=smit.StatBase[(99)];
		if(idleCount>10)
		{
			if((SmitData_[((((SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+3)]))<(13)?((SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+3)])):0)*7+1)])!=int(smit.GetMap().GetProtoId()))
			{
				TransitToPos(smit,(SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+3)]));
			}
			else
			{
				WalkToPos(smit,(SmitData_[(((GetSmitPos())<(13)?(GetSmitPos()):0)*7+3)]));
			}
			smit.StatBase[(99)]=0;
		}
		else
		{
			smit.StatBase[(99)]++;
		}
	}
}   

int _SmitPlaneEnd(Critter&smit,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	
	if(reason==(30)&&plane.Identifier==(1)&&plane.IdentifierExt==(1))
	{
		OnGatesPlaneEnd(smit);
	}
	else if(reason==(30)&&plane.Identifier==(10)&&plane.IdentifierExt==(10))
	{
		OnMove2RadioPlaneEnd(smit);
	}
	else if(reason==(30)&&plane.Identifier==(5)&&plane.IdentifierExt==(5))
	{
		OnMove2PolicePlaneEnd(smit);
	}
	else if(reason==(30)&&plane.Identifier==(49)&&plane.IdentifierExt==(49))
	{
		OnExitDwnTnPlaneEnd(smit);
	}
	else if(reason==(30)&&plane.Identifier==(8)&&plane.IdentifierExt==(8))
	{
		OnWestinMovePlaneEnd(smit);
	}
	else if(reason==(30)&&plane.Identifier==(12)&&plane.IdentifierExt==(12))
	{
		SetSmitPos((4));
	}
	else if(reason==(32)&&plane.IdentifierExt!=0&&plane.Type==(2))
	{
		DL("HEX BUSY...");
		uint16 newX=plane.Walk_HexY;
		uint16 newY=plane.Walk_HexY;
		Map@map=smit.GetMap();
		if((@map!=null))
		{
			map.MoveHexByDir(newX,newY,Random(0,5),1);
			
			if(map.IsHexPassed(newX,newY))
			{
				plane.Walk_HexY=newX;
				plane.Walk_HexY=newY;
				
			}
		}
		
	}
	return(0);
}      

void OnGatesPlaneEnd(Critter&smit)
{
	SetSmitPos((2));
	uint8 pos=GetSmitPos();
	
	DL("Закончен план перемещения к воротам");
	
	if(!(@GetGatesGuard(smit)!=null))
	{
		smit.SayMsg((2),(0),(3408));
		TransitToPos(smit,(4));
		
	}
	else
	{
		smit.StatBase[(94)]=(3400);
		AddMiscPlane(smit,0,__FullSecond+2*60,"ncr_smit@plane_SayNextPhrase");
		
	}  
	
}
void plane_SayNextPhrase(Critter&smit)
{
	if(smit.StatBase[(94)]>(3407))
	{
		GameVar@status=GetGlobalVar((4216));
		if(!(@status!=null))
		return;
		DL("value"+status.GetValue());
		if(status.GetValue()!=1)
		{
			SetSmitPos((0));
			return;
		}
		
		smit.StatBase[(94)]=0;
		TransitToPos(smit,(4));
		
	}
	else
	{
		if(smit.StatBase[(94)]%2==1)
		{
			smit.SayMsg((2),(0),smit.StatBase[(94)]);
		}
		else
		{
			
			Critter@guard=GetGatesGuard(smit);
			if(!(@guard!=null)||guard.IsDead())
			{
				
				smit.StatBase[(94)]=0;
				return;
			}
			guard.SayMsg((2),(0),smit.StatBase[(94)]);
		}
		smit.StatBase[(94)]++;
		AddMiscPlane(smit,0,__FullSecond+3*60,"ncr_smit@plane_SayNextPhrase");
	}
	
}

Critter@GetGatesGuard(Critter&smit)
{
	Map@map=smit.GetMap();
	if(!(@map!=null))
	return null;
	
	if(int(map.GetProtoId())!=(SmitData_[((((2))<(13)?((2)):0)*7+1)]))
	return null;
	
	if(map.GetNpcCount((317),(0x01)|(0x20))>0)
	return map.GetNpc((317),(0x01)|(0x20),0); 
	
	if(map.GetNpcCount((318),(0x01)|(0x20))>0)
	return map.GetNpc((318),(0x01)|(0x20),0);
	
	return null;
	
}      

void SetupRadioComm(Critter&smit)
{
	CreateTimeEvent(GetNearFullSecond(0,0,0,1,0,0),"e_BeginRadioComm",smit.Id,true);
}

uint e_BeginRadioComm(uint[]@values)
{
	Critter@smit=GetCritter(values[0]);
	
	if((@smit!=null))
	{
		_BeginRadioCom(smit);
		
		SetupRadioComm(smit);
	}
	
	return 0;
}
void plane_SayNextRadio(Critter&smit)
{
	if(smit.StatBase[(92)]%3==0)
	{
		smit.SayMsg((2),(0),smit.StatBase[(92)]);
		smit.StatBase[(92)]++;
		RadioMessageMsg((17),(0),smit.StatBase[(92)]);
		smit.StatBase[(92)]++;
		
	}
	else
	{
		RadioMessageMsg((17),(0),smit.StatBase[(92)]);
		smit.StatBase[(92)]++;
	}
	if(smit.StatBase[(92)]>(3451))
	{
		smit.StatBase[(92)]=0;
		GameVar@status=GetLocalVar((4272),smit.Id);
		if((@status!=null))
		{
			status=0;
		}
		SetSmitPos((4));
		uint m=0;
		uint16 x=0,y=0;
		uint8 d=0;
		smit.GetHomePos(m,x,y,d);
		DL("Smit home pos: x="+x+" y = "+y+"mapHome = "+m+"mapcur"+smit.GetMap().Id+"CurX = "+smit.HexX+" CurY ="+smit.HexY);
	}
	else
	{
		AddMiscPlane(smit,0,__FullSecond+2*60,"ncr_smit@plane_SayNextRadio");
	}
} 

void _BeginRadioCom(Critter&smit)
{
	if(!smit.IsLife())
	return;
	
	if(GetSmitPos()!=(4))
	return;
	
	WalkToPos(smit,(10));
}

void OnMove2RadioPlaneEnd(Critter&smit)
{
	SetSmitPos((11));
	GameVar@status=GetLocalVar((4272),smit.Id);
	if((@status!=null))
	{
		status=1;
	}
	if(!BeginSpyControl(smit,12,30,2,(4272),(4273),(1)))
	{
		DL("Cannot begin spy control");
	}
	DL("begin radio event");
	smit.StatBase[(92)]=(3420);
	AddMiscPlane(smit,0,__FullSecond+2*60,"ncr_smit@plane_SayNextRadio");
	
}    

void OnMove2PolicePlaneEnd(Critter&smit)
{
	SetSmitPos((6));  
	
}

void plane_ComeBackNoPlayer(Critter&smit)
{
	
	WalkToPos(smit,(12));
}

void OnExitDwnTnPlaneEnd(Critter&smit)
{
	Critter@[]critters;
	smit.GetMap().GetCrittersHex(smit.HexX,smit.HexY,10,(0x0F)|(0x20),critters);
	
	for(uint i=0;i<critters.length();i++)
	{
		if(critters[i].StatBase[(104)]==(1029))
		{
			if(critters[i].GetTalkedPlayers(null)>0)
			{
				GameVar@qVar=GetLocalVar((4220),smit.StatBase[(97)]);
				if((@qVar!=null)&&qVar.GetValue()==2)
				qVar=3;
				smit.ModeBase[(510)]=0;
				Smit2Ranch(smit);
				return;
			}
			else
			{
				GameVar@qVar=GetLocalVar((4220),smit.StatBase[(97)]);
				if((@qVar!=null)&&qVar.GetValue()==2)
				qVar=6;
				smit.StatBase[(97)]=critters[i].Id;
				smit.StatBase[(92)]=(3456);
				plane_SayNexPolicePhrase(smit);
				return;
			}
		}
	}
	
	smit.SayMsg((2),(0),(3455));
	Smit2Ranch(smit);
}

void plane_SayNexPolicePhrase(Critter&smit)
{
	if(smit.StatBase[(92)]<=(3459))
	{
		if(smit.StatBase[(92)]%2==1)
		{
			smit.SayMsg((2),(0),smit.StatBase[(92)]);
			smit.StatBase[(92)]++;
			AddMiscPlane(smit,0,__FullSecond+3*60,"ncr_smit@plane_SayNexPolicePhrase");
			return;
			
		}
		else
		{
			Critter@cr=GetCritter(smit.StatBase[(97)]);
			if((@cr!=null))
			{
				if(cr.IsLife())
				{
					cr.SayMsg((2),(0),smit.StatBase[(92)]);
					smit.StatBase[(92)]++;
					AddMiscPlane(smit,0,__FullSecond+3*60,"ncr_smit@plane_SayNexPolicePhrase");
					return;
				}
			}
		}
	}
	smit.StatBase[(97)]=0;
	smit.StatBase[(92)]=0;
	smit.ErasePlane(-1,true);
	WalkToPos(smit,(12));
}
void Smit2Ranch(Critter&smit)
{
	TransitToPos(smit,(7));
	WalkToPos(smit,(8));
}    

void OnWestinMovePlaneEnd(Critter&smit)
{
	smit.StatBase[(92)]=(3460);
	if(!(@GetWestin(smit)!=null))
	{
		DL("Westin=invalid");
		smit.SayMsg((2),(0),(3466));
		FailWestinKill(smit);
	}
	else
	{
		AddMiscPlane(smit,0,__FullSecond+3*60,"ncr_smit@plane_SayNexWestinPhrase");
	}
	
}
void plane_SayNexWestinPhrase(Critter&smit)
{
	
	Critter@westin=GetWestin(smit);
	if(!(@westin!=null))
	{
		FailWestinKill(smit);
	}
	if(smit.StatBase[(92)]<=(3465))
	{
		if(smit.StatBase[(92)]%2==1)
		{
			westin.SayMsg((2),(0),smit.StatBase[(92)]);
		}
		else
		{
			smit.SayMsg((2),(0),smit.StatBase[(92)]);
		}
		smit.StatBase[(92)]++;
		AddMiscPlane(smit,0,__FullSecond+3*60,"ncr_smit@plane_SayNexWestinPhrase");
	}
	else
	{
		AttackWestin(smit,westin);
	} 
	
}
void FailWestinKill(Critter&smit)
{
	DL("westin kill failked");
	smit.StatBase[(92)]=0;
	WalkToPos(smit,(7));
	
}

void AttackWestin(Critter&smit,Critter&westin)
{
	if(!AddAttackPlane(smit,0,westin))
	{
		FailWestinKill(smit);
	}
}

Critter@GetWestin(Critter&smit)
{
	Critter@[]critters;
	smit.GetMap().GetCrittersHex(smit.HexX,smit.HexY,(5),(0x0F)|(0x20),critters);
	
	for(uint i=0;i<critters.length();i++)
	{
		if(critters[i].StatBase[(104)]==(1032))
		{
			if(critters[i].IsLife())
			{
				DL("westin founded");
				return critters[i];
			}
		}
	}
	return null;
} 

void r_SmitGoToGates(Critter&player,Critter@smit)
{
	if(!(@smit!=null))
	return;
	if(GetSmitPos()!=(0))
	return;
	
	WalkToPos(smit,(1));
}

void r_SmitGoToPolice(Critter&player,Critter@smit)
{
	if(!(@smit!=null))
	return;
	if(GetSmitPos()!=(4))
	return;
	
	WalkToPos(smit,(5));
	
}

void r_SmitGoToRanch(Critter&player,Critter@smit)
{
	if(!(@smit!=null))
	return; 
	
	uint16 x=smit.HexX;
	uint16 y=smit.HexY;
	Map@map=smit.GetMap();
	if(!(@map!=null))
	return;
	
	if(!GetNearEntire(map,(49),x,y))
	return;
	
	if(!AddWalkPlane(smit,0,(49),(49),x,y,Random(0,5),false,1))
	return;
	
	smit.ModeBase[(510)]=1;
	smit.SkillBase[(208)]=300;
	
	smit.StatBase[(97)]=player.Id;
}  

void DL(string s)
{
	
}      

