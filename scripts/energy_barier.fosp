

import int RollVsSkill(Critter&cr,uint skillIndex,int bonus)from"stdlib";  

import bool IsSuccessRvS(int val)from"stdlib";  

import bool IsCriticalRvS(int val)from"stdlib";  

import void HealCritter(Critter&player)from"stdlib";  

import bool TransitToLoc(Critter&cr,uint16 locPid,uint mapIndex,uint entranceNum)from"stdlib";  

import bool TransitToMap(Critter&cr,uint16 mapPid,uint entranceNum)from"stdlib";  

import bool TransitToNewLocation(Critter&cr,uint16 locPid)from"stdlib";  

import void InfoMessage(Critter&player,Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageNorm(Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageShout(Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageWhisp(Critter&npc,uint strNum)from"stdlib";  

import void NpcMessageEmo(Critter&npc,uint strNum)from"stdlib";        

import void TimeoutSet(Critter&npc,uint gameHours)from"stdlib";  

import void TimeoutSub(Critter&npc,uint gameHoursSub)from"stdlib";  

import void TimeoutAdd(Critter&npc,uint gameHoursAdd)from"stdlib";  

import void GroupSetVar(Critter&player,uint16 varId,int value)from"stdlib";  

import void Warn(Critter&player,int npcRole)from"stdlib";  

import void DoorControl(Critter&player,uint entireNum,bool toOpen)from"stdlib";  

import bool DialogNpc(Critter&player,int role)from"stdlib";  

import Critter@GetNearCritterWithRole(Map@map,uint16 hexX,int hexY,uint radius,int role)from"stdlib";

import void Kill(Critter&player,int type)from"stdlib";

import void Damage(Critter&player,int dmg,int type,int dir)from"stdlib";

import void AttackStop(Critter&player,int npcRole)from"stdlib";

import void Attack(Critter&player,int npcRole)from"stdlib";
import bool TransitToMap(Critter&cr,int locPid,int mapIndex,int entranceNum)from"stdlib";

import void SkillUp(Critter&player,int skill)from"stdlib";

import void QuestRewardExperience(Critter&cr,uint8 base)from"stdlib"; 

import void DropDrugEffects(Critter&cr)from"drugs";
import void DropRadiation(Critter&cr)from"radiation";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import Location@CreateLocationForCritter(Critter&player,int locPid,int worldX,int worldY,int delta,int varNum)from"location";
import void SetLocationDeleteTime(Location&loc,uint time)from"location";                                                                                                            

import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId,uint forceFlags)from"combat";
import uint GetNearFullSecond(uint16 year,uint16 month,uint16 day,uint16 hour,uint16 minute,uint16 second)from"time";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,Critter&target)from"npc_planes";

const uint16[][]EBHalfOnMode=
{
	{(850),(851),(855),(856),(859),(860),(863),(864)},
	{0,0,(857),(858),(861),(862),(865),(866),}
};

const uint8[][][]EBBlockers=
{
	
	{{4,3,4},{0,1,0}},
	
	{{5},{2,2}}
};

const uint8[][]EBTriggers=
{
	
	{1,1,1,1,2,2,2,3,3,3,3,4,4,4,4,5,5,5,0,0,0,0},
	
	{1,1,1,2,2,3,3,3,4,4,4,5,5,0,0,0},  
	
	{1,1,2,2,3,3,4,4,5,5,0,0},  
	
	{2,2,3,3,3,4,5,5,5,0,0,0,1,2}
};

const uint8[][]EBEmitterCoords=
{  
	
	{2,0},  
	
	{0,2}
};

void InitBariers(Item&barier)
{
	uint8[][]blockers;
	uint8[]triggers;
	uint8[]temp;
	uint8 trigDir;
	uint16 trigDest;
	uint16 proto=barier.GetProtoId();
	bool guarded=true;
	uint16 haveHalfOnMode=0;
	
	if(barier.MapId==0)
	{
		CreateTimeEvent(__FullSecond,"e_InitBarier",barier.Id,false);
		return;
	}
	Map@map=GetMap(barier.MapId);
	if((@map!=null))
	{
		DeleteBlockersAndTriggers(map,barier.Val1);
	}
	switch(proto)
	{
		case(850):
		;
		blockers.grow(2);
		push_back_array(blockers[0],EBBlockers[0][0]);
		push_back_array(blockers[1],EBBlockers[0][1]);
		trigDir=5;
		trigDest=4;
		if(barier.Val3!=0)
		{
			push_back_array(triggers,EBTriggers[0]);
			;
		}
		else
		{
			guarded=false;
		}
		haveHalfOnMode=EBHalfOnMode[1][0];
		break;
		case(851):
		;
		blockers.grow(2);
		push_back_array(blockers[0],EBBlockers[1][0]);
		push_back_array(blockers[1],EBBlockers[1][1]);
		trigDir=5;
		trigDest=2;
		if(barier.Val3!=0)
		{
			push_back_array(triggers,EBTriggers[1]);
		}
		else
		{
			guarded=false;
		}
		haveHalfOnMode=EBHalfOnMode[1][1];
		break;
		case(855):
		case(859):
		case(863):
		blockers.grow(2);
		trigDir=5;
		trigDest=2;
		if(barier.Val3!=0)
		{
			push_back_array(triggers,EBTriggers[2]);
		}
		else
		{
			guarded=false;
		}
		if(proto==(855))
		{
			haveHalfOnMode=EBHalfOnMode[1][2];
		}
		if(proto==(859))
		{
			haveHalfOnMode=EBHalfOnMode[1][4];
		}
		if(proto==(863))
		{
			haveHalfOnMode=EBHalfOnMode[1][6];
		}
		break;
		case(856):
		case(860):
		case(864):
		blockers.grow(2);
		trigDir=0;
		trigDest=2;
		if(barier.Val3!=0)
		{
			push_back_array(triggers,EBTriggers[3]);
		}
		else
		{
			guarded=false;
		}
		if(proto==(856))
		{
			haveHalfOnMode=EBHalfOnMode[1][3];
		}
		if(proto==(860))
		{
			haveHalfOnMode=EBHalfOnMode[1][5];
		}
		if(proto==(864))
		{
			haveHalfOnMode=EBHalfOnMode[1][7];
		}
		break;
		default:
		break;
	}
	CBarier(barier,blockers,triggers,trigDir,trigDest,guarded,haveHalfOnMode);
}

void InitEmitter(Item&emitter)
{
	emitter.SetEvent((4),"_UseEmitter");
	emitter.SetEvent((3),"_UseOnEmitter");
}

uint16 GetFieldCoord(uint16 coord,uint16 proto,uint8 type)
{
	switch(proto)
	{
		case(867):
		case(869):
		case(871):
		return EBEmitterCoords[0][type];
		case(868):
		case(870):
		case(872):
		return EBEmitterCoords[1][type];
	}
	return 0;
}

class CBarier
{
	Item@Barier;
	Item@[]Blockers;
	Item@[]Triggers;
	bool Guarded;
	uint8 BarierStat;
	uint16 HaveHalfOnMode;
	uint8 FieldMode;
	CBarier(Item&barier,uint8[][]@blockers,uint8[]@triggers,uint8 trigDir,uint16 trigDest,bool guarded,uint16 modeHalfOn)
	{
		;
		uint16 baseX,baseY;
		uint16 newX,newY;
		Item@temp;
		Map@map;
		Location@loc;
		HaveHalfOnMode=modeHalfOn;
		baseX=barier.HexX;
		baseY=barier.HexY;
		@Barier=barier;
		Guarded=guarded;
		Blockers.insertLast(@barier);
		if(barier.MapId>0)
		{
			@map=GetMap(barier.MapId);
		}
		if(!(@map!=null))
		{
			Log("Map not valid!");
			return;
		}
		for(uint k=0;k<blockers.length();k++)
		{
			newX=baseX;
			newY=baseY;
			for(uint i=0;i<blockers[k].length();i++)
			{
				map.MoveHexByDir(newX,newY,blockers[k][i],1);
				Critter@crit=map.GetCritter(newX,newY);
				if(map.IsHexPassed(newX,newY)or(@crit!=null))
				{
					@temp=map.GetItem(newX,newY,(852));
					if(not(@temp!=null)or temp.Val1!=Barier.Val1)
					{
						@temp=map.AddItem(newX,newY,(852),1);
						Blockers.insertLast(@temp);
					}
				}
			}
		}
		newX=baseX;
		newY=baseY;
		map.MoveHexByDir(newX,newY,trigDir,trigDest);
		if(guarded)
		{
			;
			for(uint k=0;k<triggers.length();k++)
			{
				map.MoveHexByDir(newX,newY,triggers[k],1);
				Critter@crit=map.GetCritter(newX,newY);
				if(map.IsHexPassed(newX,newY)or(@crit!=null))
				{
					@temp=map.GetItem(newX,newY,(854));
					if(not(@temp!=null)or temp.Val1!=Barier.Val1)
					{
						@temp=map.AddItem(newX,newY,(854),1);
						Triggers.insertLast(@temp);
					}
				}
			}
		}
		InitBlockers(this);
		InitTriggers(this);
		@loc=map.GetLocation();
		if(!(@loc!=null))
		{
			Log("Error: location not valid");
			return;
		}
		CBariersNet@net=GetBariersNet(Barier.Val1,loc.Id);
		if(!(@net!=null))
		{
			@net=CBariersNet(Barier.Val1,loc.Id,Barier.Val2);
			if(!(@net!=null))
			{
				Log("ForceField not created!");
				return;
			}
			BariersNets.insertLast(@net);
		}
		net.AddBarier(this);
	}
	
	void ChangeMode(uint8 mode)
	{
		FieldMode=mode;
		if(mode==(2))
		{
			if(HaveHalfOnMode!=0)
			{
				;
				Blockers[0].ChangeProto(HaveHalfOnMode);
			}
		}
		else
		{
			if(mode==(0))
			{
				uint16 proto=GetMainProto();
				if(proto!=0)
				{
					Blockers[0].ChangeProto(proto);
				}
			}
		}
		if((mode==(0))or(mode==(2)))
		{
			for(uint i=0;i<Blockers.length();i++)
			{
				(Blockers[i].Flags=((Blockers[i].Flags)&(~((0x00000001)))));
			}
		}
		else
		{
			for(uint i=0;i<Blockers.length();i++)
			{
				(Blockers[i].Flags=(Blockers[i].Flags)|((0x00000001)));
			}
		}
		for(uint i=0;i<Blockers.length();i++)
		{
			if(mode==(0))
			{
				(Blockers[i].Flags=((Blockers[i].Flags)&(~((0x00000004)))));
			}
			else
			{
				if(mode==(2))
				{
					Blockers[i].SetEvent((7),"_DamageCritter");
				}
				else
				{
					Blockers[i].SetEvent((7),"");
				}
				if((HaveHalfOnMode==0)and(mode==(2)))
				{
					(Blockers[i].Flags=((Blockers[i].Flags)&(~((0x00000004)))));
				}
				else
				{
					(Blockers[i].Flags=(Blockers[i].Flags)|((0x00000004)));
				}
			}
		}
	}
	
	uint GetBarierNum()
	{
		return Barier.Val1;
	}
	
	uint GetGuardNum()
	{
		return Barier.Val3;
	}
	
	uint16 GetMainProto()
	{
		for(uint16 i=0;i<EBHalfOnMode[1].length();i++)
		{
			if(Barier.GetProtoId()==EBHalfOnMode[1][i])
			{
				return EBHalfOnMode[0][i];
			}
		}
		return 0;
	}
	
	uint8 GetFieldMode()
	{
		;
		return this.FieldMode;
	}
}

class CBariersNet
{
	CBarier@[]Bariers;
	int NetNum;
	uint LocId;
	uint8 NetState;
	bool TerminalsDisabled;
	CBariersNet(int netNum,uint locId,uint8 netState)
	{
		NetNum=netNum;
		LocId=locId;
		NetState=netState;
		TerminalsDisabled=false;
	}
	void AddBarier(CBarier@barier)
	{
		Bariers.insertLast(@barier);
	}
	void ChangeNetMode(uint8 mode,uint8 autoEnable)
	{
		CBarier@barier;
		bool autoOn;
		bool autoOnHalf;
		for(uint i=0;i<Bariers.length();i++)
		{
			@barier=Bariers[i];
			autoOn=(barier.Blockers[0].Val4==0)?true:false;
			autoOnHalf=(barier.Blockers[0].Val5==0)?true:false;
			if(((((mode==(1))and(autoOn))or((mode==(2))and(autoOnHalf)))or(autoEnable==(1)))and(autoEnable!=(2)))
			{
				uint[]values;
				values.insertLast(LocId);
				values.insertLast(NetNum);
				values.insertLast((0));
				CreateTimeEvent(__FullSecond+(5*60),"e_TurnOnBariers",values,true);
			}
			barier.ChangeMode(mode);
			NetState=mode;
		}
	}
}
CBariersNet@[]BariersNets;

CBariersNet@GetBariersNet(int netNum,uint locId)
{
	for(uint i=0;i<BariersNets.length();i++)
	{
		if((BariersNets[i].NetNum==netNum)and(BariersNets[i].LocId==locId))
		return BariersNets[i];
	}
	return null;
}

CBarier@GetBarier(uint16 mainItemId)
{
	CBarier@barier;
	for(uint i=0;i<BariersNets.length();i++)
	{
		if((@BariersNets[i]!=null))
		{
			for(uint k=0;k<BariersNets[i].Bariers.length();k++)
			{
				if((@BariersNets[i].Bariers[k]!=null))
				{
					@barier=BariersNets[i].Bariers[k];
					if(barier.Barier.Id==mainItemId)
					{
						return barier;
					}
				}
			}
		}
	}
	return null;
}

void push_back_array(uint8[]&arr,uint8[]&target)
{
	for(uint i=0;i<target.length();i++)
	{
		arr.insertLast(target[i]);
	}
}

void InitBlockers(CBarier&barier)
{
	if(barier.Blockers[0].Val2==(0))
	{
		barier.Blockers[0].SetEvent((4),"_DamageCritterUse");
		(barier.Blockers[0].Flags=((barier.Blockers[0].Flags)&(~((0x00000001)))));
		for(uint i=0;i<barier.Blockers.length();i++)
		{
			(barier.Blockers[i].Flags=((barier.Blockers[i].Flags)&(~((0x00000004)))));
			if(i>0)
			{
				barier.Blockers[i].Val1=barier.Blockers[0].Val1;
			}
		}
		barier.FieldMode=(0);
	}
	else
	{
		if(barier.Blockers[0].Val2==(1))
		{
			barier.FieldMode=(1);
			(barier.Blockers[0].Flags=(barier.Blockers[0].Flags)|((0x00000001)));
			for(uint i=0;i<barier.Blockers.length();i++)
			{
				(barier.Blockers[i].Flags=(barier.Blockers[i].Flags)|((0x00000004)));
				(barier.Blockers[i].Flags=(barier.Blockers[i].Flags)|((0x00000001)));
				if(i>0)
				{
					barier.Blockers[i].Val1=barier.Blockers[0].Val1;
				}
			}
		}
		else
		{
			barier.FieldMode=(2);
			barier.Blockers[0].SetEvent((4),"_DamageCritterUse");
		}
	}
}

bool CheckInven(Critter&master)
{
	Item@[]items;
	bool res=false;
	master.GetItems(-1,items);
	for(uint i=0;i<items.length();i++)
	{
		if(items[i].GetProtoId()==(853))
		{
			if(CheckCard(items[i],master))
			{
				res=true;
				break;
			}
		}
	}
	return res;
}

bool CheckCard(Item&card,Critter&master)
{
	if((card.Val4<int(__FullSecond-(24*60*60)))or(card.Val5!=int(master.Id)))
	{
		return false;
	}
	else
	{
		return true;
	}
}

uint8 HackRoll(Critter&master)
{
	uint8 res=RollVsSkill(master,(212),(-40)+master.StatBase[(97)]);
	return res;
}

bool BarierOpen(Critter&master)
{
	Map@map=master.GetMap();
	if(!(@map!=null))
	{
		return false;
	}
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	{
		return false;
	}
	if(GetNetState(loc.Id,master.StatBase[(96)])==(1))
	{
		return true;
	}
	else
	{
		return false;
	}
}

uint e_InitBarier(uint[]@values)
{
	Item@barier=GetItem(values[0]);
	if((@barier!=null))
	{
		InitBariers(barier);
	}
	else
	{
		Log("Barier item not valid");
	}
	return 0;
}

void InitTriggers(CBarier&barier)
{
	;
	for(uint i=0;i<barier.Triggers.length();i++)
	{
		barier.Triggers[i].SetEvent((7),"_WalkOnTrigg");
		barier.Triggers[i].Val1=barier.GetGuardNum();
		barier.Triggers[i].Val2=barier.Barier.Id;
		barier.Triggers[i].Val3=barier.Barier.Val1;
	}
}

void _WalkOnTrigg(Item&item,Critter&cr,bool entered,uint8 dir)
{
	bool t=true;
	Critter@[]npcs;
	Map@map;
	uint netNum=0;
	if(cr.IsNpc())
	{
		return;
	}
	if(entered)
	{
		for(uint i=0;i<BariersNets.length();i++)
		{
			for(uint k=0;k<BariersNets[i].Bariers.length();k++)
			{
				if(BariersNets[i].Bariers[k].Barier.Id==uint(item.Val2))
				{
					netNum=BariersNets[i].Bariers[k].Barier.Val1;
					if(BariersNets[i].Bariers[k].FieldMode==(3))
					{
						return;
					}
				}
			}
		}
		@map=cr.GetMap();
		if(not(@map!=null))
		{
			return;
		}
		map.GetCrittersHex(cr.HexX,cr.HexY,(10),(0x01)|(0x20),npcs);
		for(uint i=0;i<npcs.length();i++)
		{
			if(npcs[i].StatBase[(89)]!=item.Val1)
			{
				npcs.removeAt(i);
			}
		}
		if(npcs.length()!=0)
		{
			CGuards@g=GetGuards(npcs,netNum,item.Val2);
			if(!(@g!=null))
			{
				return;
			}
			if(not g.CritIsAccessible(cr))
			{
				cr.Wait(0);
				
				uint i=Random(0,npcs.length()-1);
				RunDialog(cr,npcs[i],(97),true);
			}
		}
	}
}

void DeleteBlockersAndTriggers(Map&map,uint netNum)
{
	Item@[]items;
	if(map.GetItems((852),items)>0)
	{
		for(uint i=0;i<items.length();i++)
		{
			if(uint(items[i].Val1)==netNum)
			{
				DeleteItem(items[i]);
			}
		}
	}
	items.resize(0);
	if(map.GetItems((854),items)>0)
	{
		for(uint i=0;i<items.length();i++)
		{
			if(uint(items[i].Val1)==netNum)
			{
				DeleteItem(items[i]);
			}
		}
	}
}

bool CritIsAccessible(Critter&cr)
{
	return CheckInven(cr);
}

uint8 GetNetState(uint locId,uint netNum)
{
	CBariersNet@net=GetBariersNet(netNum,locId);
	if((@net!=null))
	{
		return net.NetState;
	}
	return 0;
}

void _DamageCritter(Item&item,Critter&cr,bool entered,uint8 dir)
{
	if(entered)
	{
		cr.Wait(0);
		InjureCritter(cr,Random((15),(30)),((5)),Random(0,5),0,0);
	}
}

bool _DamageCritterUse(Item&item,Critter&cr,int skill)
{
	CBarier@barier=GetBarier(item.Id);
	if(!(@barier!=null))
	{
		return true;
	}
	else
	{
		if((skill!=(212))or(not(IsSuccessRvS(RollVsSkill(cr,(212),0)))))
		{
			if(barier.GetFieldMode()==(2))
			{
				InjureCritter(cr,Random((5),(15)),((5)),GetDirection(item.HexX,item.HexY,cr.HexX,cr.HexY),0,(0x00000800));
				if(skill==(212))
				{
					cr.SayMsg((11),(0),(5309));
				}
				else
				{
					cr.SayMsg((11),(0),(5300));
				}
			}
			else
			{
				InjureCritter(cr,Random((10),(20)),((5)),GetDirection(item.HexX,item.HexY,cr.HexX,cr.HexY),0,(0x00000800));
				if(skill==(212))
				{
					cr.SayMsg((11),(0),(5309));
				}
				else
				{
					cr.SayMsg((11),(0),(5301));
				}
			}
		}
		else
		{
			cr.SayMsg((11),(0),(5308));
		}
	}
	return true;
}

bool _UseEmitter(Item&item,Critter&cr,int skill)
{
	CBarier@field;
	bool autoOn;
	uint8 fieldMode=GetFieldMode(item);
	if(skill==(213))
	{
		if(cr.Timeout[(232)]>0)
		{
			cr.SayMsg((11),(3),(3401));
			return true;
		}
		if((IsSuccessRvS(RollVsSkill(cr,(213),(-40)+item.Val0))))
		{
			@field=GetBarier(item.HexX,item.HexY,item.GetProtoId());
			if(!(@field!=null))
			{
				return false;
			}
			if((fieldMode==(0))or(fieldMode==(2)))
			{
				cr.SayMsg((11),(0),(5303));
				autoOn=(field.Blockers[0].Val4==0)?true:false;
				if(autoOn)
				{
					;
					uint[]values;
					values.insertLast(field.Blockers[0].Id);
					CreateTimeEvent(__FullSecond+(5*60),"e_TurnOnBarier",values,true);
				}
				field.ChangeMode((1));
			}
			else
			{
				cr.SayMsg((11),(0),(5304));
				field.ChangeMode((0));
			}
			if(!GaveExp(cr,item.Id))
			{
				cr.StatBase[(76)]+=(50);
			}
		}
		else
		{
			@field=GetBarier(item.HexX,item.HexY,item.GetProtoId());
			if((field.GetFieldMode()==(0))or(field.GetFieldMode()==(2)))
			{
				cr.SayMsg((11),(0),(5302));
			}
			else
			{
				cr.SayMsg((11),(0),(5311));
			}
		}
		cr.TimeoutBase[(232)]=(__FullSecond+((1)*__TimeMultiplier*60));
	}
	else
	{
		return false;
	}
	return true;
}

bool _UseOnEmitter(Item&item,Critter&cr,Item@usedItem)
{
	if(!(@usedItem!=null))
	{
		return true;
	}
	if((usedItem.GetProtoId()==(75))or(usedItem.GetProtoId()==(308)))
	{
		return ObjectUse(cr,item,usedItem.GetProtoId());
	}
	else
	{
		return false;
	}
}

bool GaveExp(Critter&cr,uint itemId)
{
	return false;
}

bool ObjectUse(Critter&cr,Item&item,uint16 proto)
{
	CBarier@field;
	bool autoOn;
	uint8 fieldMode=GetFieldMode(item);
	int8 bonus=0;
	if(proto==(308))
	{
		bonus=((-40)+40);
	}
	else
	{
		if(proto==(75))
		{
			bonus=((-40)+20);
		}
	}
	if(cr.Timeout[(233)]>0)
	{
		cr.SayMsg((11),(3),(3401));
		return true;
	}
	if((IsSuccessRvS(RollVsSkill(cr,(212),bonus+item.Val0))))
	{
		@field=GetBarier(item.HexX,item.HexY,item.GetProtoId());
		if(!(@field!=null))
		{
			return false;
		}
		if((fieldMode==(0))or(fieldMode==(2)))
		{
			cr.SayMsg((11),(0),(5303));
			autoOn=(field.Blockers[0].Val4==0)?true:false;
			if(autoOn)
			{
				;
				uint[]values;
				values.insertLast(field.Blockers[0].Id);
				CreateTimeEvent(__FullSecond+(5*60),"e_TurnOnBarier",values,true);
			}
			field.ChangeMode((1));
		}
		else
		{
			cr.SayMsg((11),(0),(5304));
			field.ChangeMode((0));
		}
		if(!GaveExp(cr,item.Id))
		{
			cr.StatBase[(76)]+=(50);
		}
		cr.TimeoutBase[(233)]=(__FullSecond+((1)*__TimeMultiplier*60));
	}
	else
	{
		@field=GetBarier(item.HexX,item.HexY,item.GetProtoId());
		if((field.GetFieldMode()==(0))or(field.GetFieldMode()==(2)))
		{
			cr.SayMsg((11),(0),(5302));
		}
		else
		{
			cr.SayMsg((11),(0),(5311));
		}
		cr.TimeoutBase[(233)]=(__FullSecond+((1)*__TimeMultiplier*60));
	}
	return true;
}

uint8 GetFieldMode(Item&item)
{
	CBarier@field=GetBarier(item.HexX,item.HexY,item.GetProtoId());
	if((@field!=null))
	{
		return field.GetFieldMode();
	}
	return 0;
}

CBarier@GetBarier(uint16 hexX,uint16 hexY,uint16 proto)
{
	CBarier@barier;
	for(uint i=0;i<BariersNets.length();i++)
	{
		for(uint k=0;k<BariersNets[i].Bariers.length();k++)
		{
			@barier=BariersNets[i].Bariers[k];
			if((barier.Barier.HexX==(hexX+GetFieldCoord(hexX,proto,(0))))and(barier.Barier.HexY==(hexY+GetFieldCoord(hexX,proto,(1)))))
			{
				;
				return barier;
			}
		}
	}
	;
	return null;
}

void _BarierInit(Item&barier,bool firstTime)
{
	InitBariers(barier);
}

void _EmitterInit(Item&emitter,bool firstTime)
{
	InitEmitter(emitter);
}

bool s_Terminal(Critter&player,Scenery&terminal,int skill,Item@item,int netNum,int hackBonus,int hitBonus)
{
	Map@map=player.GetMap();
	uint mapId,hexX,hexY;
	uint mode=0;
	uint itemId=0;
	uint timeBrocken=0;
	uint timeAccessDenied=0;
	uint[]anyData;
	uint[]adTermInfo;
	if(not(@map!=null))
	{
		return false;
	}
	if((@item!=null))
	{
		if(item.GetProtoId()==(853))
		{
			mode=(3);
			itemId=item.Id;
		}
	}
	else
	{
		if(skill!=-1)
		{
			if(skill==(212))
			{
				mode=(2);
			}
		}
		else
		{
			mode=(1);
		}
	}
	if(mode==0)
	{
		return false;
	}
	mapId=map.Id;
	player.StatBase[(94)]=terminal.HexX;
	player.StatBase[(95)]=terminal.HexY;
	player.StatBase[(96)]=netNum;
	player.StatBase[(97)]=hackBonus;
	player.StatBase[(98)]=hitBonus;
	if(IsAnyData("EnergyBarierTerminalInfo_"+mapId+"_"+terminal.HexX+"_"+terminal.HexY))
	{
		if(GetAnyData("EnergyBarierTerminalInfo_"+mapId+"_"+terminal.HexX+"_"+terminal.HexY,adTermInfo))
		{
			timeBrocken=adTermInfo[0];
			timeAccessDenied=adTermInfo[1];
		}
	}
	anyData.insertLast(mode);
	anyData.insertLast(itemId);
	anyData.insertLast(timeBrocken);
	anyData.insertLast(timeAccessDenied);
	if(not SetAnyData("EnergyBarierTerminal_"+mapId+"_"+terminal.HexX+"_"+terminal.HexY+"_"+netNum,anyData))
	{
		Log("AnyData not created");
	}
	RunDialog(player,(96),terminal.HexX,terminal.HexY,true);
	return true;
}

void r_GetAccessCard(Critter&master,Critter@slave)
{
	Item@item=master.AddItem((853),1);
	item.Val4=__FullSecond;
	item.Val5=master.Id;
}

uint r_Start(Critter&master,Critter@slave)
{
	Item@card;
	uint[]anyData;
	Map@map=master.GetMap();
	if(!(@map!=null))
	{
		Log("Map not valid");
		return 0;
	}
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	{
		Log("Error: location not valid");
		return 0;
	}
	CBariersNet@net=GetBariersNet(master.StatBase[(96)],loc.Id);
	if(!(@net!=null))
	{
		return 0;
	}
	if(!net.TerminalsDisabled)
	{
		if(IsAnyData("EnergyBarierTerminal_"+map.Id+"_"+master.StatBase[(94)]+"_"+master.StatBase[(95)]+"_"+master.StatBase[(96)]))
		{
			if(GetAnyData("EnergyBarierTerminal_"+map.Id+"_"+master.StatBase[(94)]+"_"+master.StatBase[(95)]+"_"+master.StatBase[(96)],anyData))
			{
				if((anyData[2]!=0)and(anyData[2]>__FullSecond))
				{
					return(7);
				}
				if((anyData[3]!=0)and(anyData[3]>__FullSecond))
				{
					return(8);
				}
				if(BarierOpen(master))
				{
					return(12);
				}
				if(anyData[0]==(1))
				{
					return(2);
				}
				else
				{
					if(anyData[0]==(3))
					{
						@card=GetItem(anyData[1]);
						if(!(@card!=null))
						{
							Log("Access card not valid");
							return 0;
						}
						if(not CheckCard(card,master))
						{
							return(10);
						}
						else
						{
							CBariersNet@net_=GetBariersNet(master.StatBase[(96)],loc.Id);
							if((@net_!=null))
							net_.ChangeNetMode((1),(0));
							return(9);
						}
					}
					else
					{
						if(anyData[0]==(2))
						{
							return doHack(master,master.StatBase[(94)],master.StatBase[(95)]);
						}
					}
				}
			}
			else
			{
				Log("AnyData not found");
			}
		}
		else
		{
			Log("AnyData not created");
		}
	}
	else
	{
		return(12);
	}
	return 0;
}

uint r_doHack(Critter&master,Critter@slave)
{
	return doHack(master,master.StatBase[(94)],master.StatBase[(95)]);
}

uint doHack(Critter&master,int hexX,int hexY)
{
	Critter@[]npcs;
	bool guardNotFound=true;
	Map@map=master.GetMap();
	if(not(@map!=null))
	{
		Log("Map not valid");
		return 0;
	}
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	{
		Log("Error: location not valid");
		return 0;
	}
	CBariersNet@net=GetBariersNet(master.StatBase[(96)],loc.Id);
	map.GetCrittersHex(master.HexX,master.HexY,(10),(0x01)|(0x20),npcs);
	for(uint i=0;i<npcs.length();i++)
	{
		for(uint k=0;k<net.Bariers.length();k++)
		{
			if(npcs[i].StatBase[(89)]==int(net.Bariers[k].GetGuardNum()))
			{
				guardNotFound=false;
			}
		}
		if(guardNotFound)
		{
			npcs.removeAt(i);
		}
	}
	if(npcs.length()!=0)
	{
		CGuards@g=GetGuards(npcs,master.StatBase[(96)],0);
		if(!(@g!=null))
		{
			return 0;
		}
		if(not g.CritIsAccessible(master))
		{
			for(uint i=0;i<npcs.length();i++)
			{
				AddAttackPlane(npcs[i],(50)+1,master);
			}
		}
	}
	
	uint mapId=master.GetMapId();
	uint8 hRoll=HackRoll(master);
	if(not IsSuccessRvS(hRoll))
	{
		if(IsCriticalRvS(hRoll))
		{
			uint[]adTermInfo;
			adTermInfo.insertLast(0);
			adTermInfo.insertLast(__FullSecond+(3*60*60));
			if(not SetAnyData("EnergyBarierTerminalInfo_"+mapId+"_"+hexX+"_"+hexY,adTermInfo))
			{
				Log("AnyData not saved");
			}
			
			return(8);
		}
		
		return(5);
	}
	
	return(6);
}

uint r_TurnOfBarier(Critter&master,Critter@slave)
{
	Map@map=master.GetMap();
	if(!(@map!=null))
	{
		Log("map not valid");
		return 0;
	}
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	{
		Log("Error: location not valid");
		return 0;
	}
	CBariersNet@net=GetBariersNet(master.StatBase[(96)],loc.Id);
	if((@net!=null))
	{
		net.ChangeNetMode((1),(0));
	}
	return(9);
}

void r_CheckHit(Critter&master,Critter@slave)
{}

uint r_CheckAccessCard(Critter&master,Critter@slave)
{
	if(CheckInven(master))
	{
		Map@map=master.GetMap();
		if(!(@map!=null))
		{
			Log("map not valid");
			return 0;
		}
		Location@loc=map.GetLocation();
		if(!(@loc!=null))
		{
			Log("Error: location not valid");
			return 0;
		}
		CBariersNet@net=GetBariersNet(master.StatBase[(96)],loc.Id);
		if((@net!=null))
		{
			net.ChangeNetMode((1),(0));
		}
	}
	return(9);
}

uint e_TurnOnBariers(uint[]@values)
{
	CBariersNet@net=GetBariersNet(values[1],values[0]);
	if((@net!=null))
	{
		net.ChangeNetMode(values[2],(0));
	}
	return 0;
}

uint e_TurnOnBarier(uint[]@values)
{
	CBarier@barier;
	for(uint i=0;i<BariersNets.length();i++)
	{
		for(uint k=0;k<BariersNets[i].Bariers.length();k++)
		{
			@barier=BariersNets[i].Bariers[k];
			if(barier.Barier.Id==values[0])
			{
				barier.ChangeMode((0));
			}
		}
	}
	return 0;
}

void r_StartGuard(Critter&master,Critter@npc)
{}

void r_HalfOn(Critter&master,Critter@npc)
{
	Map@map=master.GetMap();
	if(!(@map!=null))
	{
		Log("map not valid");
		return;
	}
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	{
		Log("Error: location not valid");
		return;
	}
	CBariersNet@net=GetBariersNet(master.StatBase[(96)],loc.Id);
	if((@net!=null))
	{
		net.ChangeNetMode((2),(0));
	}
}

uint e_DisableForceField(uint[]@values)
{
	CBariersNet@net=GetBariersNet(values[0],values[1]);
	if((@net!=null))
	{
		net.ChangeNetMode((3),(2));
	}
	return 0;
}

uint e_DisableForceFieldWithGuards(uint[]@values)
{
	CBariersNet@net=GetBariersNet(values[0],values[1]);
	if((@net!=null))
	{
		net.ChangeNetMode((1),(2));
	}
	return 0;
}

uint e_EnableForceField(uint[]@values)
{
	CBariersNet@net=GetBariersNet(values[0],values[1]);
	if((@net!=null))
	{
		net.ChangeNetMode((0),(2));
	}
	return 0;
}   

CGuards@GetGuards(Critter@[]@guards,uint netNum,uint barierId)
{
	if(guards.length()==0)
	{
		return null;
	}
	CGuards@g;
	Map@map=guards[0].GetMap();
	if(!(@map!=null))
	{
		Log("map not valid");
		return null;
	}
	Location@loc=map.GetLocation();
	if(!(@loc!=null))
	{
		Log("location not valid");
		return null;
	}
	CBariersNet@net=GetBariersNet(netNum,loc.Id);
	if(!(@net!=null))
	{
		Log("Net not valid");
		return null;
	}
	if(loc.GetProtoId()==45)
	{
		@g=CGuards_GeckCity();
	}
	else
	{
		@g=CGuards();
	}
	return g;
}

class CGuards
{
	bool CritIsAccessible(Critter&cr)
	{
		return CheckInven(cr);
	}
}

class CGuards_GeckCity:CGuards
{
	bool CritIsAccessible(Critter&cr)
	{
		cr.Say((2),"Hi there!");
		return true;
	}
}
