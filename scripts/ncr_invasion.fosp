

import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs"; 

int DeadAllyCounter(Critter&cr)
{
	if(!(@cr.GetMap()!=null))
	return 0;
	
	if(cr.IsPlayer())
	return 0;
	
	if(cr.StatBase[(106)]==0)
	return 0;
	
	return cr.GetMap().GetData(cr.StatBase[(106)]);
	
}

void AddDeadAlly(Critter&cr)
{
	if(!(@cr.GetMap()!=null))
	return;
	
	if(cr.IsPlayer())
	return;
	
	if(cr.StatBase[(106)]==0)
	return;
	
	cr.GetMap().SetData(cr.StatBase[(106)],DeadAllyCounter(cr)+1);
}           

void SetMapMobsTemplate(Map&map,uint teamId,int aDist,int alRadius,int alNum,int hLvl,int locAlarm,int globAlarm,int fArmLvl)
{
	FighterPattern@fp=FighterPattern();
	fp.AttackDist=aDist;
	fp.AllyAssistRadius=alRadius;
	fp.AssistAlliesNum=alNum;
	fp.MustHealLvl=hLvl;
	fp.LocalAlarmDeads=locAlarm;
	fp.GlobalAlarmDeads=globAlarm;
	fp.ForceArmourLvl=fArmLvl;
	
	Critter@[]critters;
	map.GetCritters(0,(0x01)|(0x20),critters);
	
	for(uint i=0;i<critters.length();i++)
	{
		if(uint(critters[i].StatBase[(106)])!=teamId)
		continue;
		fp.InitPattern(critters[i]);
	}
	map.SetEvent((8),"e_OnMapCritterDead");
}

class FighterPattern
{
	FighterPattern()
	{} 
	
	int AttackDist;
	int AllyAssistRadius;
	int AssistAlliesNum;
	int MustHealLvl;
	int LocalAlarmDeads;
	int GlobalAlarmDeads;
	int ForceArmourLvl; 
	
	void InitPattern(Critter&cr)
	{
		cr.ShowCritterDist1=this.AttackDist;
		
		cr.StatBase[(95)]=this.AllyAssistRadius;
		cr.StatBase[(96)]=this.AssistAlliesNum;
		cr.StatBase[(97)]=this.MustHealLvl;
		cr.StatBase[(98)]=this.LocalAlarmDeads;
		cr.StatBase[(99)]=this.GlobalAlarmDeads;  
		
		_SetOnDeadEvents(cr);
		_SetOnAttackedEvents(cr);
		_SetSeeEnemyEvents(cr);
		_SetOnItemDroppedEvents(cr);
		_SetOnMessageEvents(cr);
		_SetOnIddleEvents(cr);
		
		ForceCritterArmour(cr);
	}
	
	void ForceCritterArmour(Critter&cr)
	{
		
		if(this.ForceArmourLvl>3&&Random(1,3)==1)
		{
			cr.PerkBase[(420)]=1;
			cr.StatBase[(0)]=10;
			cr.StatBase[(2)]=Random(9,10);
			DL("Terminator");
		}
		
		for(int i=(23);i<=(29);i++)
		{
			cr.StatBase[i]=Random(1,this.ForceArmourLvl)*20;
			cr.StatBase[i]=(((cr.StatBase[i])>(180))?(180):(((cr.StatBase[i])<(30))?(30):(cr.StatBase[i])));
		}
		
		cr.StatBase[(7)]=(((cr.StatBase[(7)]+this.ForceArmourLvl*30)>(250))?(250):(((cr.StatBase[(7)]+this.ForceArmourLvl*30)<(50))?(50):(cr.StatBase[(7)]+this.ForceArmourLvl*30)));
		cr.StatBase[(72)]=(((cr.StatBase[(72)]+this.ForceArmourLvl*30)>(250))?(250):(((cr.StatBase[(72)]+this.ForceArmourLvl*30)<(50))?(50):(cr.StatBase[(72)]+this.ForceArmourLvl*30)));  
		
	}
	
	void _SetOnAttackedEvents(Critter&cr)
	{
		cr.StatBase[(94)]=Random(1,5);
		cr.SetEvent((16),"e_CritterAttacked");
	}
	
	void _SetSeeEnemyEvents(Critter&cr)
	{
		cr.SetEvent((5),"e_ShowCritter1");
	}
	
	void _SetOnItemDroppedEvents(Critter&cr)
	{}
	
	void _SetOnDeadEvents(Critter&cr)
	{ 
		
	}
	
	void _SetOnMessageEvents(Critter&cr)
	{
		cr.SetEvent((18),"e_CritterMessage");
	}
	
	void _SetOnIddleEvents(Critter&cr)
	{} 
	
}

void e_OnMapCritterDead(Map&map,Critter&cr,Critter@killer)
{
	if(cr.IsPlayer())
	{
		if(map.GetCritters(0,(0x01)|(0x10),null)==0)
		{
			map.SetData(1,0);
			DL("All players dead");
		}
	}
	else
	{
		AddDeadAlly(cr);
		if(!(@killer!=null))
		return;
		if(!killer.IsPlayer())
		return;
		if(DeadAllyCounter(cr)>=cr.StatBase[(99)])
		{
			cr.SendMessage((17),killer.Id,(2));
			DL("Global alarm called"+DeadAllyCounter(cr)+"cr deads = _GlobalAlarmDeads"+cr.StatBase[(99)]);
			return;
		}
		if(DeadAllyCounter(cr)>=cr.StatBase[(98)])
		{
			cr.SendMessage((17),killer.Id,(0));
			DL("Local alarm called"+DeadAllyCounter(cr));
			return;
		}
	}
}

void e_ShowCritter1(Critter&cr,Critter&showCrit)
{
	
	if(!showCrit.IsPlayer())
	return; 
	
	if(cr.GetMap().GetData(1)>0)
	return;
	cr.GetMap().SetData(1,1); 
	
	if(!showCrit.IsLife())
	return;
	if(cr.CheckEnemyInStack(showCrit.Id))
	return;
	
	e_CritterMessage(cr,cr,(17),showCrit.Id);
	uint dist=GetCrittersDistantion(cr,showCrit);
	if(cr.ShowCritterDist1>=dist)
	{
		
		Map@map=cr.GetMap();
		if(!(@map!=null))
		return;
		
		Critter@[]critters;
		
		if(map.GetCrittersHex(cr.HexX,cr.HexY,cr.StatBase[(95)],(0x01)|(0x20),critters)==0)
		return;
		
		for(uint i=0;i<critters.length();i++)
		{
			if(i>=uint(cr.StatBase[(96)]))
			break;
			e_CritterMessage(critters[i],cr,(17),showCrit.Id);
		}
	}
}
bool e_CritterAttacked(Critter&cr,Critter&attacker)
{
	DL("try heal");
	if(cr.Stat[(72)]*100>cr.StatBase[(97)]*cr.Stat[(7)])
	{
		DL("Heal not needed");
		return false;
	}
	_TryHeal(cr);
	return false;
}
void e_CritterMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	switch(message)
	{
		case(17):
		if(_IsAlly(cr,fromCr))
		{
			if(!cr.IsLife())
			return;
			if(!(@GetCritter(value)!=null))
			return;
			if(!cr.CheckEnemyInStack(value))
			{
				cr.AddEnemyInStack(value);
				DL("Added enemy: "+value);
			}
			else
			{
				DL("Enemy already in stack: "+value);
			}
		}
		break;
		default:
		break;
	}
}    

bool _TryHeal(Critter&cr)
{
	if(!cr.IsLife())
	return false;
	if(cr.CountItem((144))==0&&Random(1,6)==1&&cr.StatBase[(94)]>1)
	{
		cr.AddItem((144),1);
		cr.StatBase[(94)]--;
		cr.StatBase[(94)]--;
	}
	if(cr.CountItem((144))>0)
	{
		Item@item=cr.GetItem((144),-1);
		UseDrugOn(cr,cr,item);
		cr.Animate(0,(28),null,true,true);
		DL("SuperStim used");
		return true;
	}
	if(cr.CountItem((40))==0&&Random(1,4)==1&&cr.StatBase[(94)]>0)
	{
		cr.AddItem((40),1);
		cr.StatBase[(94)]--;
	}
	if(cr.CountItem((40))>0)
	{
		Item@item=cr.GetItem((40),-1);
		UseDrugOn(cr,cr,item);
		cr.Animate(0,(28),null,true,true);
		DL("Stim used");
		return true;
	}
	DL("no Stim in bag");
	
	return false;
	
}

bool _IsAlly(Critter&cr1,Critter&cr2)
{
	return cr1.StatBase[(106)]!=0&&cr1.StatBase[(106)]==cr2.StatBase[(106)];
}
void DL(string msg)
{
	
}

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";
import void SaveLoot2Storehouse(uint16 WorldX,uint16 WorldY,Item@[]items)from"game_event_storehouse";     

uint LastDeadId=0;
uint[]CollectedNpcIds;

void _NpcInit(Critter&npc,bool firstTime)
{
	uint bt=npc.Stat[(67)];
	if(bt>=(0)&&bt<=(4))
	{
		npc.SetEvent((18),"_NpcMessage");
		npc.SetEvent((2),"_NpcDead");
		npc.SetEvent((26),"_NpcSmthDead");
		npc.SetEvent((31),"_NpcSmthUseSkill");
		npc.SetEvent((36),"_NpcPlaneEnd");
		npc.SetEvent((17),"_NpcStealing");
		npc.SetEvent((30),"_NpcSmthUseItem");
		npc.SetEvent((32),"_NpcSmthDropItem");
		
		Item@[]items;
		npc.GetItems(-1,items);
		bool favrtAmmoSet=false;
		bool favrtWpnSet=false;
		for(uint i=0,j=items.length();i<j;i++)
		{
			SetDeterioration(items[i],Random(80,95));
			if(items[i].GetType()==(3)&&!favrtWpnSet)
			{
				npc.SetFavoriteItem((1),items[i].GetProtoId());
				favrtWpnSet=true;
			}     
			
		}
	}
}

Critter@GetCritterForLooting(Critter&lootCr)
{
	
	Critter@result=null;
	lootCr.SendMessage((30),0,(0));
	if(CollectedNpcIds.length()>0)
	{
		
		for(uint i=0,j=CollectedNpcIds.length();i<j;i++)
		{
			Critter@cr=GetCritter(CollectedNpcIds[i]);
			if(cr.GetPlanes((30),null)==0)
			{
				@result=cr;
				break;
			}
		} 
		
		if(not(@result!=null))
		@result=GetCritter(CollectedNpcIds[Random(0,CollectedNpcIds.length()-1)]); 
		
		CollectedNpcIds.resize(0);
	}
	return result;
}

void _NpcSmthUseItem(Critter&npc,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(85)||pid==(544)||pid==(222)||pid==(51))
		{
			AddAttackPlane(npc,0,fromCr,__RunOnCombat);
			npc.SendMessage((31),fromCr.Id,(2));
		}
	}
}

void _NpcSmthDropItem(Critter&npc,Critter&fromCr,Item&item)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(209)||pid==(545)||pid==(206))
		{
			AddAttackPlane(npc,0,fromCr,__RunOnCombat);
			npc.SendMessage((31),fromCr.Id,(2));
		}
	}
}

void _NpcMessage(Critter&npc,Critter&fromCr,int message,int value)
{
	if(message==(30))
	{
		if(not npc.IsDead())
		CollectedNpcIds.insertLast(npc.Id);
	}
	else if(message==(31))
	{
		if(fromCr.Stat[(106)]==npc.Stat[(106)]&&npc.IsLife())
		{
			Critter@target=GetCritter(value);
			if((@target!=null))
			AddAttackPlane(npc,0,target,__RunOnCombat);
		}
	}
	else if(message==(32))
	{
		Critter@target=GetCritter(value);
		if((@target!=null))
		AddAttackPlane(npc,0,target,__RunOnCombat);
	}
}

void _NpcDead(Critter&npc,Critter@killer)
{
	
	NpcPlane@[]planes;
	if(npc.GetPlanes((30),planes)>0)
	{
		Critter@cr=GetCritterForLooting(npc);
		if((@cr!=null))
		{
			
			for(uint i=0,j=planes.length();i<j;i++)
			cr.AddPlane(planes[i]);
		}
	} 
	
	if((@killer!=null)&&killer.IsPlayer())
	{
		uint varId=0;
		switch(npc.Stat[(106)])
		{
			case(36):
			varId=(5650);
			break;
			case(37):
			varId=(5651);
			break;
			case(38):
			varId=(5652);
			break;
			case(39):
			varId=(5653);
			break;
			case(40):
			varId=(5654);
			break;
			case(41):
			varId=(5655);
			break;
			case(42):
			varId=(5656);
			break;
			case(43):
			varId=(5657);
			break;
			case(44):
			varId=(5658);
			break;
			case(45):
			varId=(5659);
			break;
			case(46):
			varId=(5660);
			break;
			case(47):
			varId=(5661);
			break;
			case(48):
			varId=(5662);
			break;
			default:
			break;
		}
		if(varId!=0)
		{
			GameVar@var=GetLocalVar(varId,killer.Id);
			var+=1;
		}
	}
}

void _NpcSmthDead(Critter&npc,Critter&fromCrit,Critter@killer)
{
	if(fromCrit.Id!=LastDeadId)
	{
		if(fromCrit.ItemsCount()>0&&(fromCrit.Mode[(511)]==0&&fromCrit.Mode[(523)]==0))
		{
			Critter@cr=GetCritterForLooting(fromCrit);
			if((@cr!=null))
			AddWalkPlane(cr,0,(30),fromCrit.Id,fromCrit.HexX,fromCrit.HexY,6,false,1);
		}
		LastDeadId=fromCrit.Id;
	}
}

void _NpcSmthUseSkill(Critter&npc,Critter&fromCr,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if((skill==(-5)||skill==(210))&&(@onCritter!=null)&&npc.GetPlanes((30),onCritter.Id,null)>0)
	AddAttackPlane(npc,(50)+1,fromCr,__RunOnCombat);
	
}

int _NpcPlaneEnd(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Identifier==(30)&&reason==(30))
	{
		Critter@cr=GetCritter(plane.IdentifierExt);
		if((@cr!=null)&&cr.IsDead())
		{
			Item@[]items;
			cr.GetItems((0),items);
			cr.GetItems((1),items);
			cr.GetItems((2),items);
			npc.GetMap().GetItems(cr.HexX,cr.HexY,items);
			
			for(uint i=0,j=items.length();i<j;i++)
			{
				int type=items[i].GetType();
				if(type<(1)||type>(7))
				@items[i]=null;
			}
			
			MoveItems(items,npc);
			SaveLoot2Storehouse(npc.WorldX,npc.WorldY,items);
			npc.Animate(0,(27),null,true,true);
			npc.Wait(__Breaktime);
		}
		return(2);
	}
	return(0);
}

void _NpcStealing(Critter&npc,Critter&thief,bool success,Item&item,uint count)
{
	if(!success)
	{
		AddAttackPlane(npc,0,thief,__RunOnCombat);
		npc.SendMessage((31),thief.Id,(2));
	}
}                     

import bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)from"entire";
import bool GetFreeHex(Map&map,uint radius,uint16&hx,uint16&hy)from"caravan";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint critId)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";

void DefineInvasionEvent()
{
	CreateTimeEvent(__FullSecond+(1*5*24*60*60),"e_BeginInvasion",true);
}

uint e_BeginInvasion(uint[]@values)
{
	GameVar@invasionStatus=GetGlobalVar((4264));
	if(!(@invasionStatus!=null))
	return 0;
	if(invasionStatus.GetValue()==1)
	return 60*60*24;
	
	GameVar@campsNum=GetGlobalVar((4261));
	if(!(@campsNum!=null))
	return 0;
	
	if(campsNum.GetValue()==0)
	return 0;
	
	Location@ncr=GetLocationByPid((10),0);
	
	if(!(@ncr!=null))
	return 0;
	
	Location@[]locations;
	
	if(GetLocations(ncr.WorldX,ncr.WorldY,__GlobalMapZoneLength*2,locations)==0)
	return 0;
	
	Map@bazaar=ncr.GetMap((45));
	if(!(@bazaar!=null))
	{
		return 0;
	}
	
	for(uint i=0;i<locations.length();i++)
	{
		uint16 locPid=locations[i].GetProtoId();
		if(locPid<((205))||locPid>((209)))
		continue;
		
		Map@map=locations[i].GetMapByIndex(locations[i].GetMapCount()-1);
		if(!(@map!=null))
		continue;
		
		uint raidersNum=map.GetNpcCount((17),(0x01)|(0x20));
		if(raidersNum==0)
		continue;
		DL("Raiders:"+raidersNum);
		FighterPattern fp=FighterPattern();
		fp.ForceArmourLvl=map.GetData(0);
		
		uint16 hX=0;
		uint16 hY=0;
		
		for(uint j=0;j<(6);j++)
		{
			Critter@donor=map.GetNpc((17),(0x0F)|(0x20),Random(0,raidersNum-1));
			if(!(@donor!=null))
			continue;
			GetNearEntire(bazaar,(111),hX,hY);
			if(!GetFreeHex(bazaar,4,hX,hY))
			continue;
			
			int[]params=
			{
				(104),donor.Stat[(104)],(105),donor.Stat[(105)],(107),donor.Stat[(107)],
				(89),(17),(106),(21),(84),-1,(517),1,(77),donor.Stat[(77)]
			};
			Critter@raider=bazaar.AddNpc(donor.GetProtoId(),hX,hY,Random(0,5),params,null,"ncr_invasion@_InvaderInit");
			fp.ForceCritterArmour(raider);
			Item@[]items;
			donor.GetItems(-1,items);
			for(uint k=0;k<items.length();k++)
			{
				raider.AddItem(items[k].GetProtoId(),items[k].GetCount());
			}
		}
	}
	DL("invasion done");
	
	RadioMessageMsg(0,(0),(2951));
	invasionStatus=1;
	return 0;
}

bool IsValidToattack(Critter&raider,Critter&target)
{ 
	
	if(!target.IsLife())
	return false;
	if(target.IsPlayer())
	return true;
	if(raider.StatBase[(106)]==target.StatBase[(106)])
	return false;
	if(target.StatBase[(106)]==0)
	return false;
	
	return true;
}

void _InvaderInit(Critter&raider,bool firstTime)
{
	_NpcInit(raider,firstTime);
	raider.ModeBase[(533)]=1;
	raider.SetEvent((4),"_OnShowCritter");
	raider.SetEvent((16),"_RaiderAttacked");
	raider.SetEvent((0),"_RaiderIdle");
	raider.SetEvent((2),"_RaiderDead");
	raider.SetEvent((18),"_CritterInvasionMessage");
	raider.SetEvent((36),"_OnInvaderPlaneEnd");
}

uint e_DeleteDeadRaider(uint[]@values)
{
	Critter@raider=GetCritter(values[0]);
	if(!(@raider!=null))
	{
		DL("Raider not found");
		return 0;
	}
	DeleteNpc(raider);
	DL("Raider deleted");
	return 0;
}

void _RaiderDead(Critter&cr,Critter@killer)
{
	
	CreateTimeEvent(__FullSecond+(1*60*60),"e_DeleteDeadRaider",cr.Id,true);
	
	if(!(@killer!=null))
	return;
	cr.SendMessage((7),killer.Id,(2));
	_NpcDead(cr,killer); 
	
	if(killer.IsPlayer())
	{
		GameVar@qVar=GetLocalVar((4265),killer.Id);
		if((@qVar!=null)&&qVar.GetValue()==1)
		qVar=2;
	}
	
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return;
	
	uint invadersNum=map.GetNpcCount((17),(0x01)|(0x20));
	
	if(invadersNum>0)
	return; 
	
	GameVar@invasionStatus=GetGlobalVar((4264));
	if(!(@invasionStatus!=null))
	return;
	
	invasionStatus=0;
	
	Critter@[]players;
	
	map.GetCritters(0,(0x03)|(0x10),players);
	
	if(players.length()>0)
	{
		for(uint i=0;i<players.length();i++)
		{
			GameVar@pVar=GetLocalVar((4265),players[i].Id);
			if(!(@pVar!=null))
			continue;
			if(pVar.GetValue()!=2)
			continue;
			pVar=3;
		}
	}
	DefineInvasionEvent();
}

void _CritterInvasionMessage(Critter&cr,Critter&fromCr,int message,int value)
{
	if(message==(7))
	{
		if(cr.IsNoPlanes())
		{
			
			AddWalkPlane(cr,(1)-1,fromCr.HexX,fromCr.HexY,Random(0,5),true,Random(1,2));
		}
		return;
	}
	_NpcMessage(cr,fromCr,message,value);
	
}

void _RaiderIdle(Critter&cr)
{
	if(cr.IsNoPlanes())
	{
		Map@map=cr.GetMap();
		if(!(@map!=null))
		return;
		Critter@[]critters;
		map.GetCrittersHex(cr.HexX,cr.HexY,(35),(0x01)|(0x0F),critters);
		for(uint i=0;i<critters.length();i++)
		{
			if(IsValidToattack(cr,critters[i]))
			AddAttackPlane(cr,(1)*(critters[i].IsPlayer()?2:1),critters[i]);
		}
	}
} 

bool _RaiderAttacked(Critter&cr,Critter&attacker)
{
	
	if(!IsValidToattack(cr,attacker))
	{
		if(cr.CheckEnemyInStack(attacker.Id))
		cr.EraseEnemyFromStack(attacker.Id);
		if(attacker.CheckEnemyInStack(cr.Id))
		attacker.EraseEnemyFromStack(cr.Id);
		EraseAttackPlane(attacker,cr.Id);
		
		return true;
		
	}
	else
	{ 
		
		return false;
	}
} 

void _OnShowCritter(Critter&cr,Critter&showCrit)
{
	if(!IsValidToattack(cr,showCrit))
	return;
	
	AddAttackPlane(cr,(1)*(showCrit.IsPlayer()?2:1),showCrit);
	
	if(showCrit.IsPlayer())
	return;
	if(Random(1,10)==1)
	{
		cr.SayMsg((((Random(0,5))>((4)))?((4)):(((Random(0,5))<((2)))?((2)):(Random(0,5)))),(0),(2950));
	}
} 

int _OnInvaderPlaneEnd(Critter&cr,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(_NpcPlaneEnd(cr,plane,reason,someCr,someItem)==(0))
	return(0);
	
	if(reason==(32)||reason==(33)||reason==(36)||reason==(37)||reason==(31))
	{
		if(cr.GetPlanes(null)>1&&plane.Priority>1)
		plane.Priority--;
	}
	else if(reason==(41))
	{
		if((@someCr!=null))
		{
			if(!someCr.IsPlayer())
			{
				if(cr.GetPlanes(null)>1&&plane.Priority>1)
				plane.Priority--;
			}
		}
	}
	return(0);
	
}  

void BI(Critter&cr,int p0,int p1,int p2)
{
	uint[]@values;
	e_BeginInvasion(values);
}
